{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ANN-1-wine_quality","provenance":[],"collapsed_sections":["Ywh-yjO2-L6x","9zL0NJkRLz15","fnhrCtwkFnn4","k7Ci_4e2KB0f"],"mount_file_id":"1yNjJEy8pP3Ib4LKJP1y8dkgNSfjd4Ey-","authorship_tag":"ABX9TyOD3ZrCpRq1ChGM+WKRpodF"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#**wine_quality**\n","\n","Two datasets were created, using red and white wine samples. The inputs include objective tests (e.g. PH values) and the output is based on sensory data (median of at least 3 evaluations made by wine experts). Each expert graded the wine quality between 0 (very bad) and 10 (very excellent). Several data mining methods were applied to model these datasets under a regression approach. \n","\n","The two datasets are related to red and white variants of the Portuguese \"Vinho Verde\" wine. Due to privacy and logistic issues, only physicochemical (inputs) and sensory (the output) variables are available (e.g. there is no data about grape types, wine brand, wine selling price, etc.).\n","\n","**Number of Instances: red wine - 1599; white wine - 4898**\n","\n","**Input variables (based on physicochemical tests):**\n","1. fixed acidity\n","2. volatile acidity\n","3. citric acid\n","4. residual sugar\n","5. chlorides\n","6. free sulfur dioxide\n","7. total sulfur dioxide\n","8. density\n","9. pH\n","10. sulphates\n","11. alcohol\n","\n","**Output variable (based on sensory data):**\n","quality (score between 0 and 10)\n","\n","***Since the dataset is relatively very small & data Viz is not possible, we will use the traditional ML for the First-Half***"],"metadata":{"id":"vpYKGzAHhZze"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt\n","plt.style.use('dark_background')\n","%matplotlib inline\n","import pandas as pd\n","\n","import tensorflow as tf\n","import tensorflow_datasets as tfds"],"metadata":{"id":"bCneHRZRjD6x"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##**Load the wine_quality dataset**\n","\n","Lets use the publicly available [wine_quality ](https://www.tensorflow.org/datasets/catalog/wine_quality) from TFDS."],"metadata":{"id":"WieZ697VjsTW"}},{"cell_type":"code","source":["# train,info = tfds.load(\n","#     name='wine_quality/white',\n","#     split=['train','train'], # split=: Which split to read (e.g. 'train', ['train', 'test'], 'train[80%:]',...).https://www.tensorflow.org/datasets/splits\n","#     with_info=True, # with_info=True: Returns the tfds.core.DatasetInfo containing dataset metadata\n","#     as_supervised=False, # By using as_supervised=True, you can get a tuple (features, label) instead for supervised datasets.\n","#     data_dir=None, # data_dir=: Location where the dataset is saved ( defaults to ~/tensorflow_datasets/)\n","#     batch_size=None, # By using batch_size=-1, you can load the full dataset in a single batch.\n","#     shuffle_files=True, # shuffle_files=: Control whether to shuffle the files between each epoch (TFDS store big datasets in multiple smaller files).\n","#     download=True, # download=False: Disable download\n","#     decoders=None,\n","#     )\n","\n","# train\n","\n","train=pd.read_csv('/content/winequalityN.csv')\n","train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":502},"id":"dI2kqBECjenG","executionInfo":{"status":"ok","timestamp":1655961333005,"user_tz":-330,"elapsed":604,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"50de2a0f-111c-45eb-fa64-ad3e21994ad9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       type  fixed acidity  volatile acidity  citric acid  residual sugar  \\\n","0     white            7.0             0.270         0.36            20.7   \n","1     white            6.3             0.300         0.34             1.6   \n","2     white            8.1             0.280         0.40             6.9   \n","3     white            7.2             0.230         0.32             8.5   \n","4     white            7.2             0.230         0.32             8.5   \n","...     ...            ...               ...          ...             ...   \n","6492    red            6.2             0.600         0.08             2.0   \n","6493    red            5.9             0.550         0.10             2.2   \n","6494    red            6.3             0.510         0.13             2.3   \n","6495    red            5.9             0.645         0.12             2.0   \n","6496    red            6.0             0.310         0.47             3.6   \n","\n","      chlorides  free sulfur dioxide  total sulfur dioxide  density    pH  \\\n","0         0.045                 45.0                 170.0  1.00100  3.00   \n","1         0.049                 14.0                 132.0  0.99400  3.30   \n","2         0.050                 30.0                  97.0  0.99510  3.26   \n","3         0.058                 47.0                 186.0  0.99560  3.19   \n","4         0.058                 47.0                 186.0  0.99560  3.19   \n","...         ...                  ...                   ...      ...   ...   \n","6492      0.090                 32.0                  44.0  0.99490  3.45   \n","6493      0.062                 39.0                  51.0  0.99512  3.52   \n","6494      0.076                 29.0                  40.0  0.99574  3.42   \n","6495      0.075                 32.0                  44.0  0.99547  3.57   \n","6496      0.067                 18.0                  42.0  0.99549  3.39   \n","\n","      sulphates  alcohol  quality  \n","0          0.45      8.8        6  \n","1          0.49      9.5        6  \n","2          0.44     10.1        6  \n","3          0.40      9.9        6  \n","4          0.40      9.9        6  \n","...         ...      ...      ...  \n","6492       0.58     10.5        5  \n","6493        NaN     11.2        6  \n","6494       0.75     11.0        6  \n","6495       0.71     10.2        5  \n","6496       0.66     11.0        6  \n","\n","[6497 rows x 13 columns]"],"text/html":["\n","  <div id=\"df-fc91e50f-a201-4bb2-9f2e-cce2a12830f4\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>type</th>\n","      <th>fixed acidity</th>\n","      <th>volatile acidity</th>\n","      <th>citric acid</th>\n","      <th>residual sugar</th>\n","      <th>chlorides</th>\n","      <th>free sulfur dioxide</th>\n","      <th>total sulfur dioxide</th>\n","      <th>density</th>\n","      <th>pH</th>\n","      <th>sulphates</th>\n","      <th>alcohol</th>\n","      <th>quality</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>white</td>\n","      <td>7.0</td>\n","      <td>0.270</td>\n","      <td>0.36</td>\n","      <td>20.7</td>\n","      <td>0.045</td>\n","      <td>45.0</td>\n","      <td>170.0</td>\n","      <td>1.00100</td>\n","      <td>3.00</td>\n","      <td>0.45</td>\n","      <td>8.8</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>white</td>\n","      <td>6.3</td>\n","      <td>0.300</td>\n","      <td>0.34</td>\n","      <td>1.6</td>\n","      <td>0.049</td>\n","      <td>14.0</td>\n","      <td>132.0</td>\n","      <td>0.99400</td>\n","      <td>3.30</td>\n","      <td>0.49</td>\n","      <td>9.5</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>white</td>\n","      <td>8.1</td>\n","      <td>0.280</td>\n","      <td>0.40</td>\n","      <td>6.9</td>\n","      <td>0.050</td>\n","      <td>30.0</td>\n","      <td>97.0</td>\n","      <td>0.99510</td>\n","      <td>3.26</td>\n","      <td>0.44</td>\n","      <td>10.1</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>white</td>\n","      <td>7.2</td>\n","      <td>0.230</td>\n","      <td>0.32</td>\n","      <td>8.5</td>\n","      <td>0.058</td>\n","      <td>47.0</td>\n","      <td>186.0</td>\n","      <td>0.99560</td>\n","      <td>3.19</td>\n","      <td>0.40</td>\n","      <td>9.9</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>white</td>\n","      <td>7.2</td>\n","      <td>0.230</td>\n","      <td>0.32</td>\n","      <td>8.5</td>\n","      <td>0.058</td>\n","      <td>47.0</td>\n","      <td>186.0</td>\n","      <td>0.99560</td>\n","      <td>3.19</td>\n","      <td>0.40</td>\n","      <td>9.9</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>6492</th>\n","      <td>red</td>\n","      <td>6.2</td>\n","      <td>0.600</td>\n","      <td>0.08</td>\n","      <td>2.0</td>\n","      <td>0.090</td>\n","      <td>32.0</td>\n","      <td>44.0</td>\n","      <td>0.99490</td>\n","      <td>3.45</td>\n","      <td>0.58</td>\n","      <td>10.5</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>6493</th>\n","      <td>red</td>\n","      <td>5.9</td>\n","      <td>0.550</td>\n","      <td>0.10</td>\n","      <td>2.2</td>\n","      <td>0.062</td>\n","      <td>39.0</td>\n","      <td>51.0</td>\n","      <td>0.99512</td>\n","      <td>3.52</td>\n","      <td>NaN</td>\n","      <td>11.2</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>6494</th>\n","      <td>red</td>\n","      <td>6.3</td>\n","      <td>0.510</td>\n","      <td>0.13</td>\n","      <td>2.3</td>\n","      <td>0.076</td>\n","      <td>29.0</td>\n","      <td>40.0</td>\n","      <td>0.99574</td>\n","      <td>3.42</td>\n","      <td>0.75</td>\n","      <td>11.0</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>6495</th>\n","      <td>red</td>\n","      <td>5.9</td>\n","      <td>0.645</td>\n","      <td>0.12</td>\n","      <td>2.0</td>\n","      <td>0.075</td>\n","      <td>32.0</td>\n","      <td>44.0</td>\n","      <td>0.99547</td>\n","      <td>3.57</td>\n","      <td>0.71</td>\n","      <td>10.2</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>6496</th>\n","      <td>red</td>\n","      <td>6.0</td>\n","      <td>0.310</td>\n","      <td>0.47</td>\n","      <td>3.6</td>\n","      <td>0.067</td>\n","      <td>18.0</td>\n","      <td>42.0</td>\n","      <td>0.99549</td>\n","      <td>3.39</td>\n","      <td>0.66</td>\n","      <td>11.0</td>\n","      <td>6</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>6497 rows × 13 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fc91e50f-a201-4bb2-9f2e-cce2a12830f4')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-fc91e50f-a201-4bb2-9f2e-cce2a12830f4 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-fc91e50f-a201-4bb2-9f2e-cce2a12830f4');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","source":["##**Preview & Preprocess**"],"metadata":{"id":"Ywh-yjO2-L6x"}},{"cell_type":"markdown","source":["Information about Data"],"metadata":{"id":"q9IcgwVaE67w"}},{"cell_type":"code","source":["train.info()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RchZBlDtE-Ao","executionInfo":{"status":"ok","timestamp":1655961463157,"user_tz":-330,"elapsed":497,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"48bf01f1-c547-4a1a-8c9a-a017c3ae9016"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 6497 entries, 0 to 6496\n","Data columns (total 13 columns):\n"," #   Column                Non-Null Count  Dtype  \n","---  ------                --------------  -----  \n"," 0   type                  6497 non-null   object \n"," 1   fixed acidity         6487 non-null   float64\n"," 2   volatile acidity      6489 non-null   float64\n"," 3   citric acid           6494 non-null   float64\n"," 4   residual sugar        6495 non-null   float64\n"," 5   chlorides             6495 non-null   float64\n"," 6   free sulfur dioxide   6497 non-null   float64\n"," 7   total sulfur dioxide  6497 non-null   float64\n"," 8   density               6497 non-null   float64\n"," 9   pH                    6488 non-null   float64\n"," 10  sulphates             6493 non-null   float64\n"," 11  alcohol               6497 non-null   float64\n"," 12  quality               6497 non-null   int64  \n","dtypes: float64(11), int64(1), object(1)\n","memory usage: 660.0+ KB\n"]}]},{"cell_type":"markdown","source":["Col with Missing Values"],"metadata":{"id":"OCR4bOKnBL1X"}},{"cell_type":"code","source":["null_train=train.columns[train.isnull().any()]\n","null_train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vgOUzwA1BjXu","executionInfo":{"status":"ok","timestamp":1655961512935,"user_tz":-330,"elapsed":490,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"89f14f90-198a-4a25-9bf1-03c6eb4dcee8"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Index(['fixed acidity', 'volatile acidity', 'citric acid', 'residual sugar',\n","       'chlorides', 'pH', 'sulphates'],\n","      dtype='object')"]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","source":["**Handle Missing Values**"],"metadata":{"id":"qMWTGKy8ELZ1"}},{"cell_type":"code","source":["from sklearn.impute import SimpleImputer\n","\n","imp = SimpleImputer(strategy='most_frequent')\n","\n","train[null_train] = imp.fit_transform(train[null_train])\n","\n","train.isnull().sum().sum()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0M_Kdry5EvcZ","executionInfo":{"status":"ok","timestamp":1655961528495,"user_tz":-330,"elapsed":489,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"108f3867-c4f0-4126-cf60-9fddd8f4fd9b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":9}]},{"cell_type":"markdown","source":["Seperate Cols w.r.t Datatypes"],"metadata":{"id":"6IVcQ227Byzl"}},{"cell_type":"code","source":["num_train = train.select_dtypes(include=['int64','float64','UInt32'])\n","cat_train = train.select_dtypes(include=['object','string'])\n","# num_train\n","cat_train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"qWuRN84NB6GF","executionInfo":{"status":"ok","timestamp":1655961578052,"user_tz":-330,"elapsed":479,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"eed5120a-9d59-4a5c-ee36-07ba8f827473"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       type\n","0     white\n","1     white\n","2     white\n","3     white\n","4     white\n","...     ...\n","6492    red\n","6493    red\n","6494    red\n","6495    red\n","6496    red\n","\n","[6497 rows x 1 columns]"],"text/html":["\n","  <div id=\"df-c164b701-4237-41aa-a9a2-ae0c212fda29\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>type</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>white</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>white</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>white</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>white</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>white</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>6492</th>\n","      <td>red</td>\n","    </tr>\n","    <tr>\n","      <th>6493</th>\n","      <td>red</td>\n","    </tr>\n","    <tr>\n","      <th>6494</th>\n","      <td>red</td>\n","    </tr>\n","    <tr>\n","      <th>6495</th>\n","      <td>red</td>\n","    </tr>\n","    <tr>\n","      <th>6496</th>\n","      <td>red</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>6497 rows × 1 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c164b701-4237-41aa-a9a2-ae0c212fda29')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-c164b701-4237-41aa-a9a2-ae0c212fda29 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-c164b701-4237-41aa-a9a2-ae0c212fda29');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":["**Handle Categorical Columns**"],"metadata":{"id":"jyHWk3gVFb9f"}},{"cell_type":"code","source":["# ds, info = tfds.load('wine_quality/white', split='train', with_info=True)\n","\n","# tfds.as_dataframe(ds.take(5), info)\n","\n","from sklearn.preprocessing import LabelEncoder\n","\n","le = LabelEncoder()\n","\n","for cat in cat_train:\n","    train[cat]=le.fit_transform(train[cat])\n","    \n","train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":502},"id":"F-13_6hl7kY5","executionInfo":{"status":"ok","timestamp":1655961640151,"user_tz":-330,"elapsed":566,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"69453278-f1b5-43dd-e45d-a6380960377a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      type  fixed acidity  volatile acidity  citric acid  residual sugar  \\\n","0        1            7.0             0.270         0.36            20.7   \n","1        1            6.3             0.300         0.34             1.6   \n","2        1            8.1             0.280         0.40             6.9   \n","3        1            7.2             0.230         0.32             8.5   \n","4        1            7.2             0.230         0.32             8.5   \n","...    ...            ...               ...          ...             ...   \n","6492     0            6.2             0.600         0.08             2.0   \n","6493     0            5.9             0.550         0.10             2.2   \n","6494     0            6.3             0.510         0.13             2.3   \n","6495     0            5.9             0.645         0.12             2.0   \n","6496     0            6.0             0.310         0.47             3.6   \n","\n","      chlorides  free sulfur dioxide  total sulfur dioxide  density    pH  \\\n","0         0.045                 45.0                 170.0  1.00100  3.00   \n","1         0.049                 14.0                 132.0  0.99400  3.30   \n","2         0.050                 30.0                  97.0  0.99510  3.26   \n","3         0.058                 47.0                 186.0  0.99560  3.19   \n","4         0.058                 47.0                 186.0  0.99560  3.19   \n","...         ...                  ...                   ...      ...   ...   \n","6492      0.090                 32.0                  44.0  0.99490  3.45   \n","6493      0.062                 39.0                  51.0  0.99512  3.52   \n","6494      0.076                 29.0                  40.0  0.99574  3.42   \n","6495      0.075                 32.0                  44.0  0.99547  3.57   \n","6496      0.067                 18.0                  42.0  0.99549  3.39   \n","\n","      sulphates  alcohol  quality  \n","0          0.45      8.8        6  \n","1          0.49      9.5        6  \n","2          0.44     10.1        6  \n","3          0.40      9.9        6  \n","4          0.40      9.9        6  \n","...         ...      ...      ...  \n","6492       0.58     10.5        5  \n","6493       0.50     11.2        6  \n","6494       0.75     11.0        6  \n","6495       0.71     10.2        5  \n","6496       0.66     11.0        6  \n","\n","[6497 rows x 13 columns]"],"text/html":["\n","  <div id=\"df-09933eb7-9fc9-42ed-8d63-ebf677903871\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>type</th>\n","      <th>fixed acidity</th>\n","      <th>volatile acidity</th>\n","      <th>citric acid</th>\n","      <th>residual sugar</th>\n","      <th>chlorides</th>\n","      <th>free sulfur dioxide</th>\n","      <th>total sulfur dioxide</th>\n","      <th>density</th>\n","      <th>pH</th>\n","      <th>sulphates</th>\n","      <th>alcohol</th>\n","      <th>quality</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>7.0</td>\n","      <td>0.270</td>\n","      <td>0.36</td>\n","      <td>20.7</td>\n","      <td>0.045</td>\n","      <td>45.0</td>\n","      <td>170.0</td>\n","      <td>1.00100</td>\n","      <td>3.00</td>\n","      <td>0.45</td>\n","      <td>8.8</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>6.3</td>\n","      <td>0.300</td>\n","      <td>0.34</td>\n","      <td>1.6</td>\n","      <td>0.049</td>\n","      <td>14.0</td>\n","      <td>132.0</td>\n","      <td>0.99400</td>\n","      <td>3.30</td>\n","      <td>0.49</td>\n","      <td>9.5</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>8.1</td>\n","      <td>0.280</td>\n","      <td>0.40</td>\n","      <td>6.9</td>\n","      <td>0.050</td>\n","      <td>30.0</td>\n","      <td>97.0</td>\n","      <td>0.99510</td>\n","      <td>3.26</td>\n","      <td>0.44</td>\n","      <td>10.1</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>7.2</td>\n","      <td>0.230</td>\n","      <td>0.32</td>\n","      <td>8.5</td>\n","      <td>0.058</td>\n","      <td>47.0</td>\n","      <td>186.0</td>\n","      <td>0.99560</td>\n","      <td>3.19</td>\n","      <td>0.40</td>\n","      <td>9.9</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>7.2</td>\n","      <td>0.230</td>\n","      <td>0.32</td>\n","      <td>8.5</td>\n","      <td>0.058</td>\n","      <td>47.0</td>\n","      <td>186.0</td>\n","      <td>0.99560</td>\n","      <td>3.19</td>\n","      <td>0.40</td>\n","      <td>9.9</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>6492</th>\n","      <td>0</td>\n","      <td>6.2</td>\n","      <td>0.600</td>\n","      <td>0.08</td>\n","      <td>2.0</td>\n","      <td>0.090</td>\n","      <td>32.0</td>\n","      <td>44.0</td>\n","      <td>0.99490</td>\n","      <td>3.45</td>\n","      <td>0.58</td>\n","      <td>10.5</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>6493</th>\n","      <td>0</td>\n","      <td>5.9</td>\n","      <td>0.550</td>\n","      <td>0.10</td>\n","      <td>2.2</td>\n","      <td>0.062</td>\n","      <td>39.0</td>\n","      <td>51.0</td>\n","      <td>0.99512</td>\n","      <td>3.52</td>\n","      <td>0.50</td>\n","      <td>11.2</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>6494</th>\n","      <td>0</td>\n","      <td>6.3</td>\n","      <td>0.510</td>\n","      <td>0.13</td>\n","      <td>2.3</td>\n","      <td>0.076</td>\n","      <td>29.0</td>\n","      <td>40.0</td>\n","      <td>0.99574</td>\n","      <td>3.42</td>\n","      <td>0.75</td>\n","      <td>11.0</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>6495</th>\n","      <td>0</td>\n","      <td>5.9</td>\n","      <td>0.645</td>\n","      <td>0.12</td>\n","      <td>2.0</td>\n","      <td>0.075</td>\n","      <td>32.0</td>\n","      <td>44.0</td>\n","      <td>0.99547</td>\n","      <td>3.57</td>\n","      <td>0.71</td>\n","      <td>10.2</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>6496</th>\n","      <td>0</td>\n","      <td>6.0</td>\n","      <td>0.310</td>\n","      <td>0.47</td>\n","      <td>3.6</td>\n","      <td>0.067</td>\n","      <td>18.0</td>\n","      <td>42.0</td>\n","      <td>0.99549</td>\n","      <td>3.39</td>\n","      <td>0.66</td>\n","      <td>11.0</td>\n","      <td>6</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>6497 rows × 13 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-09933eb7-9fc9-42ed-8d63-ebf677903871')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-09933eb7-9fc9-42ed-8d63-ebf677903871 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-09933eb7-9fc9-42ed-8d63-ebf677903871');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","source":["Drop the ID Coluj"],"metadata":{"id":"rSoD5NueLMCo"}},{"cell_type":"markdown","source":["##**Visualize the data**"],"metadata":{"id":"AkAmRPDsJCjK"}},{"cell_type":"code","source":["# train_batch = ds.batch(32)\n","\n","# features, labels = next(iter(train_batch))\n","\n","# print(features)\n","# print(labels)\n","\n","plt.figure(figsize=(10,7))\n","plt.scatter(x=\"alcohol\",y=\"fixed acidity\",data =train,marker= 'o',c=\"m\")\n","plt.xlabel(\"alcohol\",fontsize=15)\n","plt.ylabel(\"fixed_acidity\",fontsize=15)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"68WXGnDjJPBi","executionInfo":{"status":"ok","timestamp":1655961787406,"user_tz":-330,"elapsed":763,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"793b07fb-56ef-4e79-adb5-54e2e5e96a43"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x504 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"dark"}}]},{"cell_type":"code","source":["plt.pie(train.quality,data=train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"EW19hODdZNMt","executionInfo":{"status":"ok","timestamp":1655961961988,"user_tz":-330,"elapsed":11524,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"fdd7ae9e-601c-4025-99b0-4e0da4b0bda3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["([<matplotlib.patches.Wedge at 0x7f689859e090>,\n","  <matplotlib.patches.Wedge at 0x7f689859efd0>,\n","  <matplotlib.patches.Wedge at 0x7f689858de50>,\n","  <matplotlib.patches.Wedge at 0x7f689858db90>,\n","  <matplotlib.patches.Wedge at 0x7f6898589910>,\n","  <matplotlib.patches.Wedge at 0x7f6898589d90>,\n","  <matplotlib.patches.Wedge at 0x7f689859abd0>,\n","  <matplotlib.patches.Wedge at 0x7f689859ab10>,\n","  <matplotlib.patches.Wedge at 0x7f6898589e10>,\n","  <matplotlib.patches.Wedge at 0x7f6898589210>,\n","  <matplotlib.patches.Wedge at 0x7f689859ee10>,\n","  <matplotlib.patches.Wedge at 0x7f68985a0190>,\n","  <matplotlib.patches.Wedge at 0x7f6898594850>,\n","  <matplotlib.patches.Wedge at 0x7f68985947d0>,\n","  <matplotlib.patches.Wedge at 0x7f689862c150>,\n","  <matplotlib.patches.Wedge at 0x7f689862cd10>,\n","  <matplotlib.patches.Wedge at 0x7f68984fa290>,\n","  <matplotlib.patches.Wedge at 0x7f68984fa2d0>,\n","  <matplotlib.patches.Wedge at 0x7f68984fa810>,\n","  <matplotlib.patches.Wedge at 0x7f6898505290>,\n","  <matplotlib.patches.Wedge at 0x7f68985052d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898505810>,\n","  <matplotlib.patches.Wedge at 0x7f6898513290>,\n","  <matplotlib.patches.Wedge at 0x7f68985132d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898513810>,\n","  <matplotlib.patches.Wedge at 0x7f6898520290>,\n","  <matplotlib.patches.Wedge at 0x7f68985202d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898520810>,\n","  <matplotlib.patches.Wedge at 0x7f689852d290>,\n","  <matplotlib.patches.Wedge at 0x7f689852d2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689852d810>,\n","  <matplotlib.patches.Wedge at 0x7f6898537290>,\n","  <matplotlib.patches.Wedge at 0x7f68985372d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898537810>,\n","  <matplotlib.patches.Wedge at 0x7f68984c4290>,\n","  <matplotlib.patches.Wedge at 0x7f68984c42d0>,\n","  <matplotlib.patches.Wedge at 0x7f68984c4810>,\n","  <matplotlib.patches.Wedge at 0x7f68984d2290>,\n","  <matplotlib.patches.Wedge at 0x7f68984d22d0>,\n","  <matplotlib.patches.Wedge at 0x7f68984d2810>,\n","  <matplotlib.patches.Wedge at 0x7f68984df290>,\n","  <matplotlib.patches.Wedge at 0x7f68984df2d0>,\n","  <matplotlib.patches.Wedge at 0x7f68984df810>,\n","  <matplotlib.patches.Wedge at 0x7f68984ec290>,\n","  <matplotlib.patches.Wedge at 0x7f68984ec2d0>,\n","  <matplotlib.patches.Wedge at 0x7f68984ec810>,\n","  <matplotlib.patches.Wedge at 0x7f6898479250>,\n","  <matplotlib.patches.Wedge at 0x7f6898479310>,\n","  <matplotlib.patches.Wedge at 0x7f6898479850>,\n","  <matplotlib.patches.Wedge at 0x7f68984822d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898482310>,\n","  <matplotlib.patches.Wedge at 0x7f6898482850>,\n","  <matplotlib.patches.Wedge at 0x7f689848f2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689848f310>,\n","  <matplotlib.patches.Wedge at 0x7f689848f850>,\n","  <matplotlib.patches.Wedge at 0x7f689849c2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689849c310>,\n","  <matplotlib.patches.Wedge at 0x7f689849c850>,\n","  <matplotlib.patches.Wedge at 0x7f68984a82d0>,\n","  <matplotlib.patches.Wedge at 0x7f68984a8310>,\n","  <matplotlib.patches.Wedge at 0x7f68984a8850>,\n","  <matplotlib.patches.Wedge at 0x7f68984b52d0>,\n","  <matplotlib.patches.Wedge at 0x7f68984b5310>,\n","  <matplotlib.patches.Wedge at 0x7f68984b5850>,\n","  <matplotlib.patches.Wedge at 0x7f68984422d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898442310>,\n","  <matplotlib.patches.Wedge at 0x7f6898442850>,\n","  <matplotlib.patches.Wedge at 0x7f689844d2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689844d310>,\n","  <matplotlib.patches.Wedge at 0x7f689844d850>,\n","  <matplotlib.patches.Wedge at 0x7f689845a2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689845a310>,\n","  <matplotlib.patches.Wedge at 0x7f689845a850>,\n","  <matplotlib.patches.Wedge at 0x7f68984672d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898467310>,\n","  <matplotlib.patches.Wedge at 0x7f6898467850>,\n","  <matplotlib.patches.Wedge at 0x7f68984742d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898474310>,\n","  <matplotlib.patches.Wedge at 0x7f6898474850>,\n","  <matplotlib.patches.Wedge at 0x7f68984012d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898401310>,\n","  <matplotlib.patches.Wedge at 0x7f6898401850>,\n","  <matplotlib.patches.Wedge at 0x7f689840d2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689840d310>,\n","  <matplotlib.patches.Wedge at 0x7f689840d850>,\n","  <matplotlib.patches.Wedge at 0x7f689841a2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689841a310>,\n","  <matplotlib.patches.Wedge at 0x7f689841a850>,\n","  <matplotlib.patches.Wedge at 0x7f68984262d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898426310>,\n","  <matplotlib.patches.Wedge at 0x7f6898426850>,\n","  <matplotlib.patches.Wedge at 0x7f68984312d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898431310>,\n","  <matplotlib.patches.Wedge at 0x7f6898431850>,\n","  <matplotlib.patches.Wedge at 0x7f68983bf2d0>,\n","  <matplotlib.patches.Wedge at 0x7f68983bf310>,\n","  <matplotlib.patches.Wedge at 0x7f68983bf850>,\n","  <matplotlib.patches.Wedge at 0x7f68983cb2d0>,\n","  <matplotlib.patches.Wedge at 0x7f68983cb310>,\n","  <matplotlib.patches.Wedge at 0x7f68983cb850>,\n","  <matplotlib.patches.Wedge at 0x7f68983da2d0>,\n","  <matplotlib.patches.Wedge at 0x7f68983da310>,\n","  <matplotlib.patches.Wedge at 0x7f68983da850>,\n","  <matplotlib.patches.Wedge at 0x7f68983e42d0>,\n","  <matplotlib.patches.Wedge at 0x7f68983e4310>,\n","  <matplotlib.patches.Wedge at 0x7f68983e4850>,\n","  <matplotlib.patches.Wedge at 0x7f68983f22d0>,\n","  <matplotlib.patches.Wedge at 0x7f68983f2310>,\n","  <matplotlib.patches.Wedge at 0x7f68983f2850>,\n","  <matplotlib.patches.Wedge at 0x7f689837d2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689837d310>,\n","  <matplotlib.patches.Wedge at 0x7f689837d850>,\n","  <matplotlib.patches.Wedge at 0x7f689838b2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689838b310>,\n","  <matplotlib.patches.Wedge at 0x7f689838b850>,\n","  <matplotlib.patches.Wedge at 0x7f68983962d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898396310>,\n","  <matplotlib.patches.Wedge at 0x7f6898396850>,\n","  <matplotlib.patches.Wedge at 0x7f68983a42d0>,\n","  <matplotlib.patches.Wedge at 0x7f68983a4310>,\n","  <matplotlib.patches.Wedge at 0x7f68983a4850>,\n","  <matplotlib.patches.Wedge at 0x7f68983af2d0>,\n","  <matplotlib.patches.Wedge at 0x7f68983af310>,\n","  <matplotlib.patches.Wedge at 0x7f68983af850>,\n","  <matplotlib.patches.Wedge at 0x7f68982fd2d0>,\n","  <matplotlib.patches.Wedge at 0x7f68982fd310>,\n","  <matplotlib.patches.Wedge at 0x7f68982fd850>,\n","  <matplotlib.patches.Wedge at 0x7f689830a2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689830a310>,\n","  <matplotlib.patches.Wedge at 0x7f689830a850>,\n","  <matplotlib.patches.Wedge at 0x7f68983162d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898316310>,\n","  <matplotlib.patches.Wedge at 0x7f6898316850>,\n","  <matplotlib.patches.Wedge at 0x7f68983222d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898322310>,\n","  <matplotlib.patches.Wedge at 0x7f6898322850>,\n","  <matplotlib.patches.Wedge at 0x7f689832f2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689832f310>,\n","  <matplotlib.patches.Wedge at 0x7f689832f850>,\n","  <matplotlib.patches.Wedge at 0x7f68982bb2d0>,\n","  <matplotlib.patches.Wedge at 0x7f68982bb310>,\n","  <matplotlib.patches.Wedge at 0x7f68982bb850>,\n","  <matplotlib.patches.Wedge at 0x7f68982c82d0>,\n","  <matplotlib.patches.Wedge at 0x7f68982c8310>,\n","  <matplotlib.patches.Wedge at 0x7f68982c8850>,\n","  <matplotlib.patches.Wedge at 0x7f68982d32d0>,\n","  <matplotlib.patches.Wedge at 0x7f68982d3310>,\n","  <matplotlib.patches.Wedge at 0x7f68982d3850>,\n","  <matplotlib.patches.Wedge at 0x7f68982e22d0>,\n","  <matplotlib.patches.Wedge at 0x7f68982e2310>,\n","  <matplotlib.patches.Wedge at 0x7f68982e2850>,\n","  <matplotlib.patches.Wedge at 0x7f68982ee2d0>,\n","  <matplotlib.patches.Wedge at 0x7f68982ee310>,\n","  <matplotlib.patches.Wedge at 0x7f68982ee850>,\n","  <matplotlib.patches.Wedge at 0x7f689827a2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689827a310>,\n","  <matplotlib.patches.Wedge at 0x7f689827a850>,\n","  <matplotlib.patches.Wedge at 0x7f68982862d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898286310>,\n","  <matplotlib.patches.Wedge at 0x7f6898286850>,\n","  <matplotlib.patches.Wedge at 0x7f68982932d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898293310>,\n","  <matplotlib.patches.Wedge at 0x7f6898293850>,\n","  <matplotlib.patches.Wedge at 0x7f68982a02d0>,\n","  <matplotlib.patches.Wedge at 0x7f68982a0310>,\n","  <matplotlib.patches.Wedge at 0x7f68982a0850>,\n","  <matplotlib.patches.Wedge at 0x7f68982ad2d0>,\n","  <matplotlib.patches.Wedge at 0x7f68982ad310>,\n","  <matplotlib.patches.Wedge at 0x7f68982ad850>,\n","  <matplotlib.patches.Wedge at 0x7f68982392d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898239310>,\n","  <matplotlib.patches.Wedge at 0x7f6898239850>,\n","  <matplotlib.patches.Wedge at 0x7f68982462d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898246310>,\n","  <matplotlib.patches.Wedge at 0x7f6898246850>,\n","  <matplotlib.patches.Wedge at 0x7f68982512d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898251310>,\n","  <matplotlib.patches.Wedge at 0x7f6898251850>,\n","  <matplotlib.patches.Wedge at 0x7f689825e2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689825e310>,\n","  <matplotlib.patches.Wedge at 0x7f689825e850>,\n","  <matplotlib.patches.Wedge at 0x7f689826b2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689826b310>,\n","  <matplotlib.patches.Wedge at 0x7f689826b850>,\n","  <matplotlib.patches.Wedge at 0x7f68981f82d0>,\n","  <matplotlib.patches.Wedge at 0x7f68981f8310>,\n","  <matplotlib.patches.Wedge at 0x7f68981f8850>,\n","  <matplotlib.patches.Wedge at 0x7f68982042d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898204310>,\n","  <matplotlib.patches.Wedge at 0x7f6898204850>,\n","  <matplotlib.patches.Wedge at 0x7f68982132d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898213310>,\n","  <matplotlib.patches.Wedge at 0x7f6898213850>,\n","  <matplotlib.patches.Wedge at 0x7f689821d2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689821d310>,\n","  <matplotlib.patches.Wedge at 0x7f689821d850>,\n","  <matplotlib.patches.Wedge at 0x7f689822a2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689822a310>,\n","  <matplotlib.patches.Wedge at 0x7f689822a850>,\n","  <matplotlib.patches.Wedge at 0x7f68982352d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898235310>,\n","  <matplotlib.patches.Wedge at 0x7f6898235850>,\n","  <matplotlib.patches.Wedge at 0x7f68981032d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898103310>,\n","  <matplotlib.patches.Wedge at 0x7f6898103850>,\n","  <matplotlib.patches.Wedge at 0x7f68981102d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898110310>,\n","  <matplotlib.patches.Wedge at 0x7f6898110850>,\n","  <matplotlib.patches.Wedge at 0x7f689811c2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689811c310>,\n","  <matplotlib.patches.Wedge at 0x7f689811c850>,\n","  <matplotlib.patches.Wedge at 0x7f68981292d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898129310>,\n","  <matplotlib.patches.Wedge at 0x7f6898129850>,\n","  <matplotlib.patches.Wedge at 0x7f68981352d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898135310>,\n","  <matplotlib.patches.Wedge at 0x7f6898135850>,\n","  <matplotlib.patches.Wedge at 0x7f68980c22d0>,\n","  <matplotlib.patches.Wedge at 0x7f68980c2310>,\n","  <matplotlib.patches.Wedge at 0x7f68980c2850>,\n","  <matplotlib.patches.Wedge at 0x7f68980cf2d0>,\n","  <matplotlib.patches.Wedge at 0x7f68980cf310>,\n","  <matplotlib.patches.Wedge at 0x7f68980cf850>,\n","  <matplotlib.patches.Wedge at 0x7f68980db2d0>,\n","  <matplotlib.patches.Wedge at 0x7f68980db310>,\n","  <matplotlib.patches.Wedge at 0x7f68980db850>,\n","  <matplotlib.patches.Wedge at 0x7f68980e72d0>,\n","  <matplotlib.patches.Wedge at 0x7f68980e7310>,\n","  <matplotlib.patches.Wedge at 0x7f68980e7850>,\n","  <matplotlib.patches.Wedge at 0x7f68980f32d0>,\n","  <matplotlib.patches.Wedge at 0x7f68980f3310>,\n","  <matplotlib.patches.Wedge at 0x7f68980f3850>,\n","  <matplotlib.patches.Wedge at 0x7f68980812d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898081310>,\n","  <matplotlib.patches.Wedge at 0x7f6898081850>,\n","  <matplotlib.patches.Wedge at 0x7f689808d2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689808d310>,\n","  <matplotlib.patches.Wedge at 0x7f689808d850>,\n","  <matplotlib.patches.Wedge at 0x7f68980992d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898099310>,\n","  <matplotlib.patches.Wedge at 0x7f6898099850>,\n","  <matplotlib.patches.Wedge at 0x7f68980a62d0>,\n","  <matplotlib.patches.Wedge at 0x7f68980a6310>,\n","  <matplotlib.patches.Wedge at 0x7f68980a6850>,\n","  <matplotlib.patches.Wedge at 0x7f68980b52d0>,\n","  <matplotlib.patches.Wedge at 0x7f68980b5310>,\n","  <matplotlib.patches.Wedge at 0x7f68980b5850>,\n","  <matplotlib.patches.Wedge at 0x7f689803f2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689803f310>,\n","  <matplotlib.patches.Wedge at 0x7f689803f850>,\n","  <matplotlib.patches.Wedge at 0x7f689804c2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689804c310>,\n","  <matplotlib.patches.Wedge at 0x7f689804c850>,\n","  <matplotlib.patches.Wedge at 0x7f68980582d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898058310>,\n","  <matplotlib.patches.Wedge at 0x7f6898058850>,\n","  <matplotlib.patches.Wedge at 0x7f68980652d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898065310>,\n","  <matplotlib.patches.Wedge at 0x7f6898065850>,\n","  <matplotlib.patches.Wedge at 0x7f68980712d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898071310>,\n","  <matplotlib.patches.Wedge at 0x7f6898071850>,\n","  <matplotlib.patches.Wedge at 0x7f6897ffe2d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897ffe310>,\n","  <matplotlib.patches.Wedge at 0x7f6897ffe850>,\n","  <matplotlib.patches.Wedge at 0x7f68980092d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898009310>,\n","  <matplotlib.patches.Wedge at 0x7f6898009850>,\n","  <matplotlib.patches.Wedge at 0x7f68980182d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898018310>,\n","  <matplotlib.patches.Wedge at 0x7f6898018850>,\n","  <matplotlib.patches.Wedge at 0x7f68980232d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898023310>,\n","  <matplotlib.patches.Wedge at 0x7f6898023850>,\n","  <matplotlib.patches.Wedge at 0x7f68980322d0>,\n","  <matplotlib.patches.Wedge at 0x7f6898032310>,\n","  <matplotlib.patches.Wedge at 0x7f6898032850>,\n","  <matplotlib.patches.Wedge at 0x7f6897fbd2d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897fbd310>,\n","  <matplotlib.patches.Wedge at 0x7f6897fbd850>,\n","  <matplotlib.patches.Wedge at 0x7f6897fca2d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897fca310>,\n","  <matplotlib.patches.Wedge at 0x7f6897fca850>,\n","  <matplotlib.patches.Wedge at 0x7f6897fd52d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897fd5310>,\n","  <matplotlib.patches.Wedge at 0x7f6897fd5850>,\n","  <matplotlib.patches.Wedge at 0x7f6897fe32d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897fe3310>,\n","  <matplotlib.patches.Wedge at 0x7f6897fe3850>,\n","  <matplotlib.patches.Wedge at 0x7f6897fee2d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897fee310>,\n","  <matplotlib.patches.Wedge at 0x7f6897fee850>,\n","  <matplotlib.patches.Wedge at 0x7f6897f3b2d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897f3b310>,\n","  <matplotlib.patches.Wedge at 0x7f6897f3b850>,\n","  <matplotlib.patches.Wedge at 0x7f6897f492d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897f49310>,\n","  <matplotlib.patches.Wedge at 0x7f6897f49850>,\n","  <matplotlib.patches.Wedge at 0x7f6897f562d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897f56310>,\n","  <matplotlib.patches.Wedge at 0x7f6897f56850>,\n","  <matplotlib.patches.Wedge at 0x7f6897f612d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897f61310>,\n","  <matplotlib.patches.Wedge at 0x7f6897f61850>,\n","  <matplotlib.patches.Wedge at 0x7f6897f6d2d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897f6d310>,\n","  <matplotlib.patches.Wedge at 0x7f6897f6d850>,\n","  <matplotlib.patches.Wedge at 0x7f6897efb2d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897efb310>,\n","  <matplotlib.patches.Wedge at 0x7f6897efb850>,\n","  <matplotlib.patches.Wedge at 0x7f6897f072d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897f07310>,\n","  <matplotlib.patches.Wedge at 0x7f6897f07850>,\n","  <matplotlib.patches.Wedge at 0x7f6897f132d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897f13310>,\n","  <matplotlib.patches.Wedge at 0x7f6897f13850>,\n","  <matplotlib.patches.Wedge at 0x7f6897f212d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897f21310>,\n","  <matplotlib.patches.Wedge at 0x7f6897f21850>,\n","  <matplotlib.patches.Wedge at 0x7f6897f2c2d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897f2c310>,\n","  <matplotlib.patches.Wedge at 0x7f6897f2c850>,\n","  <matplotlib.patches.Wedge at 0x7f6897eb92d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897eb9310>,\n","  <matplotlib.patches.Wedge at 0x7f6897eb9850>,\n","  <matplotlib.patches.Wedge at 0x7f6897ec52d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897ec5310>,\n","  <matplotlib.patches.Wedge at 0x7f6897ec5850>,\n","  <matplotlib.patches.Wedge at 0x7f6897ed32d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897ed3310>,\n","  <matplotlib.patches.Wedge at 0x7f6897ed3850>,\n","  <matplotlib.patches.Wedge at 0x7f6897edf2d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897edf310>,\n","  <matplotlib.patches.Wedge at 0x7f6897edf850>,\n","  <matplotlib.patches.Wedge at 0x7f6897eec2d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897eec310>,\n","  <matplotlib.patches.Wedge at 0x7f6897eec850>,\n","  <matplotlib.patches.Wedge at 0x7f6897e782d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897e78310>,\n","  <matplotlib.patches.Wedge at 0x7f6897e78850>,\n","  <matplotlib.patches.Wedge at 0x7f6897e842d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897e84310>,\n","  <matplotlib.patches.Wedge at 0x7f6897e84850>,\n","  <matplotlib.patches.Wedge at 0x7f6897e902d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897e90310>,\n","  <matplotlib.patches.Wedge at 0x7f6897e90850>,\n","  <matplotlib.patches.Wedge at 0x7f6897e9e2d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897e9e310>,\n","  <matplotlib.patches.Wedge at 0x7f6897e9e850>,\n","  <matplotlib.patches.Wedge at 0x7f6897eaa2d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897eaa310>,\n","  <matplotlib.patches.Wedge at 0x7f6897eaa850>,\n","  <matplotlib.patches.Wedge at 0x7f6897eb72d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897eb7310>,\n","  <matplotlib.patches.Wedge at 0x7f6897eb7850>,\n","  <matplotlib.patches.Wedge at 0x7f6897e432d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897e43310>,\n","  <matplotlib.patches.Wedge at 0x7f6897e43850>,\n","  <matplotlib.patches.Wedge at 0x7f6897e57250>,\n","  <matplotlib.patches.Wedge at 0x7f6897e57290>,\n","  <matplotlib.patches.Wedge at 0x7f6897e577d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897e62250>,\n","  <matplotlib.patches.Wedge at 0x7f6897e62290>,\n","  <matplotlib.patches.Wedge at 0x7f6897e627d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897e6f250>,\n","  <matplotlib.patches.Wedge at 0x7f6897e6f290>,\n","  <matplotlib.patches.Wedge at 0x7f6897e6f7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897dfc250>,\n","  <matplotlib.patches.Wedge at 0x7f6897dfc290>,\n","  <matplotlib.patches.Wedge at 0x7f6897dfc7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897e09250>,\n","  <matplotlib.patches.Wedge at 0x7f6897e09290>,\n","  <matplotlib.patches.Wedge at 0x7f6897e097d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897e14250>,\n","  <matplotlib.patches.Wedge at 0x7f6897e14290>,\n","  <matplotlib.patches.Wedge at 0x7f6897e147d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897e21250>,\n","  <matplotlib.patches.Wedge at 0x7f6897e21290>,\n","  <matplotlib.patches.Wedge at 0x7f6897e217d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897e2f250>,\n","  <matplotlib.patches.Wedge at 0x7f6897e2f290>,\n","  <matplotlib.patches.Wedge at 0x7f6897e2f7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897dbc250>,\n","  <matplotlib.patches.Wedge at 0x7f6897dbc290>,\n","  <matplotlib.patches.Wedge at 0x7f6897dbc7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897dc7250>,\n","  <matplotlib.patches.Wedge at 0x7f6897dc7290>,\n","  <matplotlib.patches.Wedge at 0x7f6897dc77d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897dd3250>,\n","  <matplotlib.patches.Wedge at 0x7f6897dd3290>,\n","  <matplotlib.patches.Wedge at 0x7f6897dd37d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897de1250>,\n","  <matplotlib.patches.Wedge at 0x7f6897de1290>,\n","  <matplotlib.patches.Wedge at 0x7f6897de17d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897ded250>,\n","  <matplotlib.patches.Wedge at 0x7f6897ded290>,\n","  <matplotlib.patches.Wedge at 0x7f6897ded7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897d78250>,\n","  <matplotlib.patches.Wedge at 0x7f6897d78290>,\n","  <matplotlib.patches.Wedge at 0x7f6897d787d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897d86250>,\n","  <matplotlib.patches.Wedge at 0x7f6897d86290>,\n","  <matplotlib.patches.Wedge at 0x7f6897d867d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897d92250>,\n","  <matplotlib.patches.Wedge at 0x7f6897d92290>,\n","  <matplotlib.patches.Wedge at 0x7f6897d927d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897d9f250>,\n","  <matplotlib.patches.Wedge at 0x7f6897d9f290>,\n","  <matplotlib.patches.Wedge at 0x7f6897d9f7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897dac250>,\n","  <matplotlib.patches.Wedge at 0x7f6897dac290>,\n","  <matplotlib.patches.Wedge at 0x7f6897dac7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897d38250>,\n","  <matplotlib.patches.Wedge at 0x7f6897d38290>,\n","  <matplotlib.patches.Wedge at 0x7f6897d387d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897d45250>,\n","  <matplotlib.patches.Wedge at 0x7f6897d45290>,\n","  <matplotlib.patches.Wedge at 0x7f6897d457d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897d51250>,\n","  <matplotlib.patches.Wedge at 0x7f6897d51290>,\n","  <matplotlib.patches.Wedge at 0x7f6897d517d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897d5e250>,\n","  <matplotlib.patches.Wedge at 0x7f6897d5e290>,\n","  <matplotlib.patches.Wedge at 0x7f6897d5e7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897d6b250>,\n","  <matplotlib.patches.Wedge at 0x7f6897d6b290>,\n","  <matplotlib.patches.Wedge at 0x7f6897d6b7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897d76250>,\n","  <matplotlib.patches.Wedge at 0x7f6897d76290>,\n","  <matplotlib.patches.Wedge at 0x7f6897d767d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897d03250>,\n","  <matplotlib.patches.Wedge at 0x7f6897d03290>,\n","  <matplotlib.patches.Wedge at 0x7f6897d037d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897d0f250>,\n","  <matplotlib.patches.Wedge at 0x7f6897d0f290>,\n","  <matplotlib.patches.Wedge at 0x7f6897d0f7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897d1d250>,\n","  <matplotlib.patches.Wedge at 0x7f6897d1d290>,\n","  <matplotlib.patches.Wedge at 0x7f6897d1d7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897d29250>,\n","  <matplotlib.patches.Wedge at 0x7f6897d29290>,\n","  <matplotlib.patches.Wedge at 0x7f6897d297d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897d37250>,\n","  <matplotlib.patches.Wedge at 0x7f6897d37290>,\n","  <matplotlib.patches.Wedge at 0x7f6897d377d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897cc3250>,\n","  <matplotlib.patches.Wedge at 0x7f6897cc3290>,\n","  <matplotlib.patches.Wedge at 0x7f6897cc37d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897ccf250>,\n","  <matplotlib.patches.Wedge at 0x7f6897ccf290>,\n","  <matplotlib.patches.Wedge at 0x7f6897ccf7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897cda250>,\n","  <matplotlib.patches.Wedge at 0x7f6897cda290>,\n","  <matplotlib.patches.Wedge at 0x7f6897cda7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897ce9250>,\n","  <matplotlib.patches.Wedge at 0x7f6897ce9290>,\n","  <matplotlib.patches.Wedge at 0x7f6897ce97d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897cf4250>,\n","  <matplotlib.patches.Wedge at 0x7f6897cf4290>,\n","  <matplotlib.patches.Wedge at 0x7f6897cf47d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897c40250>,\n","  <matplotlib.patches.Wedge at 0x7f6897c40290>,\n","  <matplotlib.patches.Wedge at 0x7f6897c407d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897c4f250>,\n","  <matplotlib.patches.Wedge at 0x7f6897c4f290>,\n","  <matplotlib.patches.Wedge at 0x7f6897c4f7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897c5a250>,\n","  <matplotlib.patches.Wedge at 0x7f6897c5a290>,\n","  <matplotlib.patches.Wedge at 0x7f6897c5a7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897c67250>,\n","  <matplotlib.patches.Wedge at 0x7f6897c67290>,\n","  <matplotlib.patches.Wedge at 0x7f6897c677d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897c73250>,\n","  <matplotlib.patches.Wedge at 0x7f6897c73290>,\n","  <matplotlib.patches.Wedge at 0x7f6897c737d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897bff250>,\n","  <matplotlib.patches.Wedge at 0x7f6897bff290>,\n","  <matplotlib.patches.Wedge at 0x7f6897bff7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897c0d250>,\n","  <matplotlib.patches.Wedge at 0x7f6897c0d290>,\n","  <matplotlib.patches.Wedge at 0x7f6897c0d7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897c19250>,\n","  <matplotlib.patches.Wedge at 0x7f6897c19290>,\n","  <matplotlib.patches.Wedge at 0x7f6897c197d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897c25250>,\n","  <matplotlib.patches.Wedge at 0x7f6897c25290>,\n","  <matplotlib.patches.Wedge at 0x7f6897c257d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897c31250>,\n","  <matplotlib.patches.Wedge at 0x7f6897c31290>,\n","  <matplotlib.patches.Wedge at 0x7f6897c317d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897bbe250>,\n","  <matplotlib.patches.Wedge at 0x7f6897bbe290>,\n","  <matplotlib.patches.Wedge at 0x7f6897bbe7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897bcc250>,\n","  <matplotlib.patches.Wedge at 0x7f6897bcc290>,\n","  <matplotlib.patches.Wedge at 0x7f6897bcc7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897bd9250>,\n","  <matplotlib.patches.Wedge at 0x7f6897bd9290>,\n","  <matplotlib.patches.Wedge at 0x7f6897bd97d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897be4250>,\n","  <matplotlib.patches.Wedge at 0x7f6897be4290>,\n","  <matplotlib.patches.Wedge at 0x7f6897be47d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897bf0250>,\n","  <matplotlib.patches.Wedge at 0x7f6897bf0290>,\n","  <matplotlib.patches.Wedge at 0x7f6897bf07d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897b7d250>,\n","  <matplotlib.patches.Wedge at 0x7f6897b7d290>,\n","  <matplotlib.patches.Wedge at 0x7f6897b7d7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897b8a250>,\n","  <matplotlib.patches.Wedge at 0x7f6897b8a290>,\n","  <matplotlib.patches.Wedge at 0x7f6897b8a7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897b96250>,\n","  <matplotlib.patches.Wedge at 0x7f6897b96290>,\n","  <matplotlib.patches.Wedge at 0x7f6897b967d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897ba2250>,\n","  <matplotlib.patches.Wedge at 0x7f6897ba2290>,\n","  <matplotlib.patches.Wedge at 0x7f6897ba27d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897bb0250>,\n","  <matplotlib.patches.Wedge at 0x7f6897bb0290>,\n","  <matplotlib.patches.Wedge at 0x7f6897bb07d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897b3d250>,\n","  <matplotlib.patches.Wedge at 0x7f6897b3d290>,\n","  <matplotlib.patches.Wedge at 0x7f6897b3d7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897b48250>,\n","  <matplotlib.patches.Wedge at 0x7f6897b48290>,\n","  <matplotlib.patches.Wedge at 0x7f6897b487d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897b56250>,\n","  <matplotlib.patches.Wedge at 0x7f6897b56290>,\n","  <matplotlib.patches.Wedge at 0x7f6897b567d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897b61250>,\n","  <matplotlib.patches.Wedge at 0x7f6897b61290>,\n","  <matplotlib.patches.Wedge at 0x7f6897b617d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897b70250>,\n","  <matplotlib.patches.Wedge at 0x7f6897b70290>,\n","  <matplotlib.patches.Wedge at 0x7f6897b707d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897afb250>,\n","  <matplotlib.patches.Wedge at 0x7f6897afb290>,\n","  <matplotlib.patches.Wedge at 0x7f6897afb7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897b07250>,\n","  <matplotlib.patches.Wedge at 0x7f6897b07290>,\n","  <matplotlib.patches.Wedge at 0x7f6897b077d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897b13250>,\n","  <matplotlib.patches.Wedge at 0x7f6897b13290>,\n","  <matplotlib.patches.Wedge at 0x7f6897b137d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897b1f250>,\n","  <matplotlib.patches.Wedge at 0x7f6897b1f290>,\n","  <matplotlib.patches.Wedge at 0x7f6897b1f7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897b2e250>,\n","  <matplotlib.patches.Wedge at 0x7f6897b2e290>,\n","  <matplotlib.patches.Wedge at 0x7f6897b2e7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897abb250>,\n","  <matplotlib.patches.Wedge at 0x7f6897abb290>,\n","  <matplotlib.patches.Wedge at 0x7f6897abb7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897ac6250>,\n","  <matplotlib.patches.Wedge at 0x7f6897ac6290>,\n","  <matplotlib.patches.Wedge at 0x7f6897ac67d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897ad2250>,\n","  <matplotlib.patches.Wedge at 0x7f6897ad2290>,\n","  <matplotlib.patches.Wedge at 0x7f6897ad27d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897ae0250>,\n","  <matplotlib.patches.Wedge at 0x7f6897ae0290>,\n","  <matplotlib.patches.Wedge at 0x7f6897ae07d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897aec250>,\n","  <matplotlib.patches.Wedge at 0x7f6897aec290>,\n","  <matplotlib.patches.Wedge at 0x7f6897aec7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897a78250>,\n","  <matplotlib.patches.Wedge at 0x7f6897a78290>,\n","  <matplotlib.patches.Wedge at 0x7f6897a787d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897a85250>,\n","  <matplotlib.patches.Wedge at 0x7f6897a85290>,\n","  <matplotlib.patches.Wedge at 0x7f6897a857d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897a91250>,\n","  <matplotlib.patches.Wedge at 0x7f6897a91290>,\n","  <matplotlib.patches.Wedge at 0x7f6897a917d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897a9e250>,\n","  <matplotlib.patches.Wedge at 0x7f6897a9e290>,\n","  <matplotlib.patches.Wedge at 0x7f6897a9e7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897aaa250>,\n","  <matplotlib.patches.Wedge at 0x7f6897aaa290>,\n","  <matplotlib.patches.Wedge at 0x7f6897aaa7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897a38250>,\n","  <matplotlib.patches.Wedge at 0x7f6897a38290>,\n","  <matplotlib.patches.Wedge at 0x7f6897a387d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897a43250>,\n","  <matplotlib.patches.Wedge at 0x7f6897a43290>,\n","  <matplotlib.patches.Wedge at 0x7f6897a437d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897a51250>,\n","  <matplotlib.patches.Wedge at 0x7f6897a51290>,\n","  <matplotlib.patches.Wedge at 0x7f6897a517d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897a5e250>,\n","  <matplotlib.patches.Wedge at 0x7f6897a5e290>,\n","  <matplotlib.patches.Wedge at 0x7f6897a5e7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897a69250>,\n","  <matplotlib.patches.Wedge at 0x7f6897a69290>,\n","  <matplotlib.patches.Wedge at 0x7f6897a697d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897a75250>,\n","  <matplotlib.patches.Wedge at 0x7f6897a75290>,\n","  <matplotlib.patches.Wedge at 0x7f6897a757d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897a02250>,\n","  <matplotlib.patches.Wedge at 0x7f6897a02290>,\n","  <matplotlib.patches.Wedge at 0x7f6897a027d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897a0f250>,\n","  <matplotlib.patches.Wedge at 0x7f6897a0f290>,\n","  <matplotlib.patches.Wedge at 0x7f6897a0f7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897a1d250>,\n","  <matplotlib.patches.Wedge at 0x7f6897a1d290>,\n","  <matplotlib.patches.Wedge at 0x7f6897a1d7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897a28250>,\n","  <matplotlib.patches.Wedge at 0x7f6897a28290>,\n","  <matplotlib.patches.Wedge at 0x7f6897a287d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897a35250>,\n","  <matplotlib.patches.Wedge at 0x7f6897a35290>,\n","  <matplotlib.patches.Wedge at 0x7f6897a357d0>,\n","  <matplotlib.patches.Wedge at 0x7f68979c1250>,\n","  <matplotlib.patches.Wedge at 0x7f68979c1290>,\n","  <matplotlib.patches.Wedge at 0x7f68979c17d0>,\n","  <matplotlib.patches.Wedge at 0x7f68979ce250>,\n","  <matplotlib.patches.Wedge at 0x7f68979ce290>,\n","  <matplotlib.patches.Wedge at 0x7f68979ce7d0>,\n","  <matplotlib.patches.Wedge at 0x7f68979da250>,\n","  <matplotlib.patches.Wedge at 0x7f68979da290>,\n","  <matplotlib.patches.Wedge at 0x7f68979da7d0>,\n","  <matplotlib.patches.Wedge at 0x7f68979e7250>,\n","  <matplotlib.patches.Wedge at 0x7f68979e7290>,\n","  <matplotlib.patches.Wedge at 0x7f68979e77d0>,\n","  <matplotlib.patches.Wedge at 0x7f68979f3250>,\n","  <matplotlib.patches.Wedge at 0x7f68979f3290>,\n","  <matplotlib.patches.Wedge at 0x7f68979f37d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897980250>,\n","  <matplotlib.patches.Wedge at 0x7f6897980290>,\n","  <matplotlib.patches.Wedge at 0x7f68979807d0>,\n","  <matplotlib.patches.Wedge at 0x7f689798d250>,\n","  <matplotlib.patches.Wedge at 0x7f689798d290>,\n","  <matplotlib.patches.Wedge at 0x7f689798d7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897999250>,\n","  <matplotlib.patches.Wedge at 0x7f6897999290>,\n","  <matplotlib.patches.Wedge at 0x7f68979997d0>,\n","  <matplotlib.patches.Wedge at 0x7f68979a6250>,\n","  <matplotlib.patches.Wedge at 0x7f68979a6290>,\n","  <matplotlib.patches.Wedge at 0x7f68979a67d0>,\n","  <matplotlib.patches.Wedge at 0x7f68979b2250>,\n","  <matplotlib.patches.Wedge at 0x7f68979b2290>,\n","  <matplotlib.patches.Wedge at 0x7f68979b27d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897940250>,\n","  <matplotlib.patches.Wedge at 0x7f6897940290>,\n","  <matplotlib.patches.Wedge at 0x7f68979407d0>,\n","  <matplotlib.patches.Wedge at 0x7f689794b250>,\n","  <matplotlib.patches.Wedge at 0x7f689794b290>,\n","  <matplotlib.patches.Wedge at 0x7f689794b7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897957250>,\n","  <matplotlib.patches.Wedge at 0x7f6897957290>,\n","  <matplotlib.patches.Wedge at 0x7f68979577d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897965250>,\n","  <matplotlib.patches.Wedge at 0x7f6897965290>,\n","  <matplotlib.patches.Wedge at 0x7f68979657d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897971250>,\n","  <matplotlib.patches.Wedge at 0x7f6897971290>,\n","  <matplotlib.patches.Wedge at 0x7f68979717d0>,\n","  <matplotlib.patches.Wedge at 0x7f68978fd250>,\n","  <matplotlib.patches.Wedge at 0x7f68978fd290>,\n","  <matplotlib.patches.Wedge at 0x7f68978fd7d0>,\n","  <matplotlib.patches.Wedge at 0x7f689790a250>,\n","  <matplotlib.patches.Wedge at 0x7f689790a290>,\n","  <matplotlib.patches.Wedge at 0x7f689790a7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897917250>,\n","  <matplotlib.patches.Wedge at 0x7f6897917290>,\n","  <matplotlib.patches.Wedge at 0x7f68979177d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897923250>,\n","  <matplotlib.patches.Wedge at 0x7f6897923290>,\n","  <matplotlib.patches.Wedge at 0x7f68979237d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897930250>,\n","  <matplotlib.patches.Wedge at 0x7f6897930290>,\n","  <matplotlib.patches.Wedge at 0x7f68979307d0>,\n","  <matplotlib.patches.Wedge at 0x7f68978bc250>,\n","  <matplotlib.patches.Wedge at 0x7f68978bc290>,\n","  <matplotlib.patches.Wedge at 0x7f68978bc7d0>,\n","  <matplotlib.patches.Wedge at 0x7f68978ca250>,\n","  <matplotlib.patches.Wedge at 0x7f68978ca290>,\n","  <matplotlib.patches.Wedge at 0x7f68978ca7d0>,\n","  <matplotlib.patches.Wedge at 0x7f68978d5250>,\n","  <matplotlib.patches.Wedge at 0x7f68978d5290>,\n","  <matplotlib.patches.Wedge at 0x7f68978d57d0>,\n","  <matplotlib.patches.Wedge at 0x7f68978e1250>,\n","  <matplotlib.patches.Wedge at 0x7f68978e1290>,\n","  <matplotlib.patches.Wedge at 0x7f68978e17d0>,\n","  <matplotlib.patches.Wedge at 0x7f68978ee250>,\n","  <matplotlib.patches.Wedge at 0x7f68978ee290>,\n","  <matplotlib.patches.Wedge at 0x7f68978ee7d0>,\n","  <matplotlib.patches.Wedge at 0x7f689787c250>,\n","  <matplotlib.patches.Wedge at 0x7f689787c290>,\n","  <matplotlib.patches.Wedge at 0x7f689787c7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897888250>,\n","  <matplotlib.patches.Wedge at 0x7f6897888290>,\n","  <matplotlib.patches.Wedge at 0x7f68978887d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897895250>,\n","  <matplotlib.patches.Wedge at 0x7f6897895290>,\n","  <matplotlib.patches.Wedge at 0x7f68978957d0>,\n","  <matplotlib.patches.Wedge at 0x7f68978a1250>,\n","  <matplotlib.patches.Wedge at 0x7f68978a1290>,\n","  <matplotlib.patches.Wedge at 0x7f68978a17d0>,\n","  <matplotlib.patches.Wedge at 0x7f68978ad250>,\n","  <matplotlib.patches.Wedge at 0x7f68978ad290>,\n","  <matplotlib.patches.Wedge at 0x7f68978ad7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897839250>,\n","  <matplotlib.patches.Wedge at 0x7f6897839290>,\n","  <matplotlib.patches.Wedge at 0x7f68978397d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897847250>,\n","  <matplotlib.patches.Wedge at 0x7f6897847290>,\n","  <matplotlib.patches.Wedge at 0x7f68978477d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897852250>,\n","  <matplotlib.patches.Wedge at 0x7f6897852290>,\n","  <matplotlib.patches.Wedge at 0x7f68978527d0>,\n","  <matplotlib.patches.Wedge at 0x7f689785f250>,\n","  <matplotlib.patches.Wedge at 0x7f689785f290>,\n","  <matplotlib.patches.Wedge at 0x7f689785f7d0>,\n","  <matplotlib.patches.Wedge at 0x7f689786e250>,\n","  <matplotlib.patches.Wedge at 0x7f689786e290>,\n","  <matplotlib.patches.Wedge at 0x7f689786e7d0>,\n","  <matplotlib.patches.Wedge at 0x7f68977f9250>,\n","  <matplotlib.patches.Wedge at 0x7f68977f9290>,\n","  <matplotlib.patches.Wedge at 0x7f68977f97d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897804250>,\n","  <matplotlib.patches.Wedge at 0x7f6897804290>,\n","  <matplotlib.patches.Wedge at 0x7f68978047d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897812250>,\n","  <matplotlib.patches.Wedge at 0x7f6897812290>,\n","  <matplotlib.patches.Wedge at 0x7f68978127d0>,\n","  <matplotlib.patches.Wedge at 0x7f689781f250>,\n","  <matplotlib.patches.Wedge at 0x7f689781f290>,\n","  <matplotlib.patches.Wedge at 0x7f689781f7d0>,\n","  <matplotlib.patches.Wedge at 0x7f689782c250>,\n","  <matplotlib.patches.Wedge at 0x7f689782c290>,\n","  <matplotlib.patches.Wedge at 0x7f689782c7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897837250>,\n","  <matplotlib.patches.Wedge at 0x7f6897837290>,\n","  <matplotlib.patches.Wedge at 0x7f68978377d0>,\n","  <matplotlib.patches.Wedge at 0x7f68977c3250>,\n","  <matplotlib.patches.Wedge at 0x7f68977c3290>,\n","  <matplotlib.patches.Wedge at 0x7f68977c37d0>,\n","  <matplotlib.patches.Wedge at 0x7f68977d0250>,\n","  <matplotlib.patches.Wedge at 0x7f68977d0290>,\n","  <matplotlib.patches.Wedge at 0x7f68977d07d0>,\n","  <matplotlib.patches.Wedge at 0x7f68977dd250>,\n","  <matplotlib.patches.Wedge at 0x7f68977dd290>,\n","  <matplotlib.patches.Wedge at 0x7f68977dd7d0>,\n","  <matplotlib.patches.Wedge at 0x7f68977ea250>,\n","  <matplotlib.patches.Wedge at 0x7f68977ea290>,\n","  <matplotlib.patches.Wedge at 0x7f68977ea7d0>,\n","  <matplotlib.patches.Wedge at 0x7f68977f7250>,\n","  <matplotlib.patches.Wedge at 0x7f68977f7290>,\n","  <matplotlib.patches.Wedge at 0x7f68977f77d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897782250>,\n","  <matplotlib.patches.Wedge at 0x7f6897782290>,\n","  <matplotlib.patches.Wedge at 0x7f68977827d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897790250>,\n","  <matplotlib.patches.Wedge at 0x7f6897790290>,\n","  <matplotlib.patches.Wedge at 0x7f68977907d0>,\n","  <matplotlib.patches.Wedge at 0x7f689779c250>,\n","  <matplotlib.patches.Wedge at 0x7f689779c290>,\n","  <matplotlib.patches.Wedge at 0x7f689779c7d0>,\n","  <matplotlib.patches.Wedge at 0x7f68977a8250>,\n","  <matplotlib.patches.Wedge at 0x7f68977a8290>,\n","  <matplotlib.patches.Wedge at 0x7f68977a87d0>,\n","  <matplotlib.patches.Wedge at 0x7f68977b4250>,\n","  <matplotlib.patches.Wedge at 0x7f68977b4290>,\n","  <matplotlib.patches.Wedge at 0x7f68977b47d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897742250>,\n","  <matplotlib.patches.Wedge at 0x7f6897742290>,\n","  <matplotlib.patches.Wedge at 0x7f68977427d0>,\n","  <matplotlib.patches.Wedge at 0x7f689774f250>,\n","  <matplotlib.patches.Wedge at 0x7f689774f290>,\n","  <matplotlib.patches.Wedge at 0x7f689774f7d0>,\n","  <matplotlib.patches.Wedge at 0x7f689775b250>,\n","  <matplotlib.patches.Wedge at 0x7f689775b290>,\n","  <matplotlib.patches.Wedge at 0x7f689775b7d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897766250>,\n","  <matplotlib.patches.Wedge at 0x7f6897766290>,\n","  <matplotlib.patches.Wedge at 0x7f68977667d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897774250>,\n","  <matplotlib.patches.Wedge at 0x7f6897774290>,\n","  <matplotlib.patches.Wedge at 0x7f68977747d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897701290>,\n","  <matplotlib.patches.Wedge at 0x7f68977012d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897701950>,\n","  <matplotlib.patches.Wedge at 0x7f68977092d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897709310>,\n","  <matplotlib.patches.Wedge at 0x7f6897709850>,\n","  <matplotlib.patches.Wedge at 0x7f68977152d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897715310>,\n","  <matplotlib.patches.Wedge at 0x7f6897715850>,\n","  <matplotlib.patches.Wedge at 0x7f68977212d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897721310>,\n","  <matplotlib.patches.Wedge at 0x7f6897721850>,\n","  <matplotlib.patches.Wedge at 0x7f689772c2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689772c310>,\n","  <matplotlib.patches.Wedge at 0x7f689772c850>,\n","  <matplotlib.patches.Wedge at 0x7f68976ba2d0>,\n","  <matplotlib.patches.Wedge at 0x7f68976ba310>,\n","  <matplotlib.patches.Wedge at 0x7f68976ba850>,\n","  <matplotlib.patches.Wedge at 0x7f68976c72d0>,\n","  <matplotlib.patches.Wedge at 0x7f68976c7310>,\n","  <matplotlib.patches.Wedge at 0x7f68976c7850>,\n","  <matplotlib.patches.Wedge at 0x7f68976d32d0>,\n","  <matplotlib.patches.Wedge at 0x7f68976d3310>,\n","  <matplotlib.patches.Wedge at 0x7f68976d3850>,\n","  <matplotlib.patches.Wedge at 0x7f68976df2d0>,\n","  <matplotlib.patches.Wedge at 0x7f68976df310>,\n","  <matplotlib.patches.Wedge at 0x7f68976df850>,\n","  <matplotlib.patches.Wedge at 0x7f68976ea2d0>,\n","  <matplotlib.patches.Wedge at 0x7f68976ea310>,\n","  <matplotlib.patches.Wedge at 0x7f68976ea850>,\n","  <matplotlib.patches.Wedge at 0x7f68976782d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897678310>,\n","  <matplotlib.patches.Wedge at 0x7f6897678850>,\n","  <matplotlib.patches.Wedge at 0x7f68976852d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897685310>,\n","  <matplotlib.patches.Wedge at 0x7f6897685850>,\n","  <matplotlib.patches.Wedge at 0x7f68976902d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897690310>,\n","  <matplotlib.patches.Wedge at 0x7f6897690850>,\n","  <matplotlib.patches.Wedge at 0x7f689769e2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689769e310>,\n","  <matplotlib.patches.Wedge at 0x7f689769e850>,\n","  <matplotlib.patches.Wedge at 0x7f68976aa2d0>,\n","  <matplotlib.patches.Wedge at 0x7f68976aa310>,\n","  <matplotlib.patches.Wedge at 0x7f68976aa850>,\n","  <matplotlib.patches.Wedge at 0x7f68976b62d0>,\n","  <matplotlib.patches.Wedge at 0x7f68976b6310>,\n","  <matplotlib.patches.Wedge at 0x7f68976b6850>,\n","  <matplotlib.patches.Wedge at 0x7f68976432d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897643310>,\n","  <matplotlib.patches.Wedge at 0x7f6897643850>,\n","  <matplotlib.patches.Wedge at 0x7f68976502d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897650310>,\n","  <matplotlib.patches.Wedge at 0x7f6897650850>,\n","  <matplotlib.patches.Wedge at 0x7f689765c2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689765c310>,\n","  <matplotlib.patches.Wedge at 0x7f689765c850>,\n","  <matplotlib.patches.Wedge at 0x7f68976692d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897669310>,\n","  <matplotlib.patches.Wedge at 0x7f6897669850>,\n","  <matplotlib.patches.Wedge at 0x7f68976762d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897676310>,\n","  <matplotlib.patches.Wedge at 0x7f6897676850>,\n","  <matplotlib.patches.Wedge at 0x7f68976022d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897602310>,\n","  <matplotlib.patches.Wedge at 0x7f6897602850>,\n","  <matplotlib.patches.Wedge at 0x7f689760d2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689760d310>,\n","  <matplotlib.patches.Wedge at 0x7f689760d850>,\n","  <matplotlib.patches.Wedge at 0x7f689761a2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689761a310>,\n","  <matplotlib.patches.Wedge at 0x7f689761a850>,\n","  <matplotlib.patches.Wedge at 0x7f68976282d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897628310>,\n","  <matplotlib.patches.Wedge at 0x7f6897628850>,\n","  <matplotlib.patches.Wedge at 0x7f68976352d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897635310>,\n","  <matplotlib.patches.Wedge at 0x7f6897635850>,\n","  <matplotlib.patches.Wedge at 0x7f68975c12d0>,\n","  <matplotlib.patches.Wedge at 0x7f68975c1310>,\n","  <matplotlib.patches.Wedge at 0x7f68975c1850>,\n","  <matplotlib.patches.Wedge at 0x7f68975cd2d0>,\n","  <matplotlib.patches.Wedge at 0x7f68975cd310>,\n","  <matplotlib.patches.Wedge at 0x7f68975cd850>,\n","  <matplotlib.patches.Wedge at 0x7f68975d92d0>,\n","  <matplotlib.patches.Wedge at 0x7f68975d9310>,\n","  <matplotlib.patches.Wedge at 0x7f68975d9850>,\n","  <matplotlib.patches.Wedge at 0x7f68975e72d0>,\n","  <matplotlib.patches.Wedge at 0x7f68975e7310>,\n","  <matplotlib.patches.Wedge at 0x7f68975e7850>,\n","  <matplotlib.patches.Wedge at 0x7f68975f22d0>,\n","  <matplotlib.patches.Wedge at 0x7f68975f2310>,\n","  <matplotlib.patches.Wedge at 0x7f68975f2850>,\n","  <matplotlib.patches.Wedge at 0x7f68975802d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897580310>,\n","  <matplotlib.patches.Wedge at 0x7f6897580850>,\n","  <matplotlib.patches.Wedge at 0x7f689758b2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689758b310>,\n","  <matplotlib.patches.Wedge at 0x7f689758b850>,\n","  <matplotlib.patches.Wedge at 0x7f68975982d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897598310>,\n","  <matplotlib.patches.Wedge at 0x7f6897598850>,\n","  <matplotlib.patches.Wedge at 0x7f68975a62d0>,\n","  <matplotlib.patches.Wedge at 0x7f68975a6310>,\n","  <matplotlib.patches.Wedge at 0x7f68975a6850>,\n","  <matplotlib.patches.Wedge at 0x7f68975b22d0>,\n","  <matplotlib.patches.Wedge at 0x7f68975b2310>,\n","  <matplotlib.patches.Wedge at 0x7f68975b2850>,\n","  <matplotlib.patches.Wedge at 0x7f689753e2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689753e310>,\n","  <matplotlib.patches.Wedge at 0x7f689753e850>,\n","  <matplotlib.patches.Wedge at 0x7f689754c2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689754c310>,\n","  <matplotlib.patches.Wedge at 0x7f689754c850>,\n","  <matplotlib.patches.Wedge at 0x7f68975582d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897558310>,\n","  <matplotlib.patches.Wedge at 0x7f6897558850>,\n","  <matplotlib.patches.Wedge at 0x7f68975632d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897563310>,\n","  <matplotlib.patches.Wedge at 0x7f6897563850>,\n","  <matplotlib.patches.Wedge at 0x7f689756f2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689756f310>,\n","  <matplotlib.patches.Wedge at 0x7f689756f850>,\n","  <matplotlib.patches.Wedge at 0x7f68974fc2d0>,\n","  <matplotlib.patches.Wedge at 0x7f68974fc310>,\n","  <matplotlib.patches.Wedge at 0x7f68974fc850>,\n","  <matplotlib.patches.Wedge at 0x7f689750a2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689750a310>,\n","  <matplotlib.patches.Wedge at 0x7f689750a850>,\n","  <matplotlib.patches.Wedge at 0x7f68975162d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897516310>,\n","  <matplotlib.patches.Wedge at 0x7f6897516850>,\n","  <matplotlib.patches.Wedge at 0x7f68975232d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897523310>,\n","  <matplotlib.patches.Wedge at 0x7f6897523850>,\n","  <matplotlib.patches.Wedge at 0x7f689752f2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689752f310>,\n","  <matplotlib.patches.Wedge at 0x7f689752f850>,\n","  <matplotlib.patches.Wedge at 0x7f68974bb2d0>,\n","  <matplotlib.patches.Wedge at 0x7f68974bb310>,\n","  <matplotlib.patches.Wedge at 0x7f68974bb850>,\n","  <matplotlib.patches.Wedge at 0x7f68974c92d0>,\n","  <matplotlib.patches.Wedge at 0x7f68974c9310>,\n","  <matplotlib.patches.Wedge at 0x7f68974c9850>,\n","  <matplotlib.patches.Wedge at 0x7f68974d52d0>,\n","  <matplotlib.patches.Wedge at 0x7f68974d5310>,\n","  <matplotlib.patches.Wedge at 0x7f68974d5850>,\n","  <matplotlib.patches.Wedge at 0x7f68974e12d0>,\n","  <matplotlib.patches.Wedge at 0x7f68974e1310>,\n","  <matplotlib.patches.Wedge at 0x7f68974e1850>,\n","  <matplotlib.patches.Wedge at 0x7f68974ee2d0>,\n","  <matplotlib.patches.Wedge at 0x7f68974ee310>,\n","  <matplotlib.patches.Wedge at 0x7f68974ee850>,\n","  <matplotlib.patches.Wedge at 0x7f689747a2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689747a310>,\n","  <matplotlib.patches.Wedge at 0x7f689747a850>,\n","  <matplotlib.patches.Wedge at 0x7f68974872d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897487310>,\n","  <matplotlib.patches.Wedge at 0x7f6897487850>,\n","  <matplotlib.patches.Wedge at 0x7f68974942d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897494310>,\n","  <matplotlib.patches.Wedge at 0x7f6897494850>,\n","  <matplotlib.patches.Wedge at 0x7f689749f2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689749f310>,\n","  <matplotlib.patches.Wedge at 0x7f689749f850>,\n","  <matplotlib.patches.Wedge at 0x7f68974ae2d0>,\n","  <matplotlib.patches.Wedge at 0x7f68974ae310>,\n","  <matplotlib.patches.Wedge at 0x7f68974ae850>,\n","  <matplotlib.patches.Wedge at 0x7f689743a2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689743a310>,\n","  <matplotlib.patches.Wedge at 0x7f689743a850>,\n","  <matplotlib.patches.Wedge at 0x7f68974452d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897445310>,\n","  <matplotlib.patches.Wedge at 0x7f6897445850>,\n","  <matplotlib.patches.Wedge at 0x7f68974512d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897451310>,\n","  <matplotlib.patches.Wedge at 0x7f6897451850>,\n","  <matplotlib.patches.Wedge at 0x7f689745f2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689745f310>,\n","  <matplotlib.patches.Wedge at 0x7f689745f850>,\n","  <matplotlib.patches.Wedge at 0x7f689746c2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689746c310>,\n","  <matplotlib.patches.Wedge at 0x7f689746c850>,\n","  <matplotlib.patches.Wedge at 0x7f68973f82d0>,\n","  <matplotlib.patches.Wedge at 0x7f68973f8310>,\n","  <matplotlib.patches.Wedge at 0x7f68973f8850>,\n","  <matplotlib.patches.Wedge at 0x7f68974052d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897405310>,\n","  <matplotlib.patches.Wedge at 0x7f6897405850>,\n","  <matplotlib.patches.Wedge at 0x7f68974122d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897412310>,\n","  <matplotlib.patches.Wedge at 0x7f6897412850>,\n","  <matplotlib.patches.Wedge at 0x7f689741d2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689741d310>,\n","  <matplotlib.patches.Wedge at 0x7f689741d850>,\n","  <matplotlib.patches.Wedge at 0x7f689742b2d0>,\n","  <matplotlib.patches.Wedge at 0x7f689742b310>,\n","  <matplotlib.patches.Wedge at 0x7f689742b850>,\n","  <matplotlib.patches.Wedge at 0x7f68974372d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897437310>,\n","  <matplotlib.patches.Wedge at 0x7f6897437850>,\n","  <matplotlib.patches.Wedge at 0x7f68973c32d0>,\n","  <matplotlib.patches.Wedge at 0x7f68973c3310>,\n","  <matplotlib.patches.Wedge at 0x7f68973c3850>,\n","  <matplotlib.patches.Wedge at 0x7f68973d02d0>,\n","  <matplotlib.patches.Wedge at 0x7f68973d0310>,\n","  <matplotlib.patches.Wedge at 0x7f68973d0850>,\n","  <matplotlib.patches.Wedge at 0x7f68973dc2d0>,\n","  <matplotlib.patches.Wedge at 0x7f68973dc310>,\n","  <matplotlib.patches.Wedge at 0x7f68973dc850>,\n","  <matplotlib.patches.Wedge at 0x7f68973e82d0>,\n","  <matplotlib.patches.Wedge at 0x7f68973e8310>,\n","  <matplotlib.patches.Wedge at 0x7f68973e8850>,\n","  <matplotlib.patches.Wedge at 0x7f68973f52d0>,\n","  <matplotlib.patches.Wedge at 0x7f68973f5310>,\n","  <matplotlib.patches.Wedge at 0x7f68973f5850>,\n","  <matplotlib.patches.Wedge at 0x7f68973822d0>,\n","  <matplotlib.patches.Wedge at 0x7f6897382310>,\n","  <matplotlib.patches.Wedge at 0x7f6897382850>,\n","  ...],\n"," [Text(1.0999998632474783, 0.0005485029891934628, ''),\n","  Text(1.0999987692275084, 0.0016455084220592083, ''),\n","  Text(1.0999965811886563, 0.0027425122183619556, ''),\n","  Text(1.0999932991330987, 0.0038395132870615136, ''),\n","  Text(1.0999889230640993, 0.004936510537120404, ''),\n","  Text(1.0999834529860106, 0.006033502877504949, ''),\n","  Text(1.0999768889042731, 0.007130489217186351, ''),\n","  Text(1.0999692308254152, 0.008227468465141781, ''),\n","  Text(1.099960478757053, 0.009324439530355461, ''),\n","  Text(1.099950632707891, 0.010421401321819757, ''),\n","  Text(1.0999406461392518, 0.011426940568903067, ''),\n","  Text(1.0999307697600622, 0.012341058910694579, ''),\n","  Text(1.099920133692428, 0.013255168728895237, ''),\n","  Text(1.0999063676327692, 0.014352088380715812, ''),\n","  Text(1.0998915076460272, 0.015448993758468485, ''),\n","  Text(1.0998755537469818, 0.01654588377121085, ''),\n","  Text(1.0998570359254678, 0.01773416265979996, ''),\n","  Text(1.0998356579423032, 0.019013824408076842, ''),\n","  Text(1.099812791098694, 0.02029346041711636, ''),\n","  Text(1.0997937798318465, 0.021298869528230287, ''),\n","  Text(1.0997701270057225, 0.022487057295629262, ''),\n","  Text(1.099741240172209, 0.023858010488964472, ''),\n","  Text(1.0997106443343487, 0.025228926606811246, ''),\n","  Text(1.099682745583832, 0.026417022262261516, ''),\n","  Text(1.0996581363851516, 0.027422309930701928, ''),\n","  Text(1.099630241877651, 0.02851896120301594, ''),\n","  Text(1.0996012537177922, 0.029615584111405444, ''),\n","  Text(1.0995711719344061, 0.030712177565209074, ''),\n","  Text(1.0995399965574109, 0.03180874047379474, ''),\n","  Text(1.099504989177304, 0.03299664792394322, ''),\n","  Text(1.099468698420783, 0.03418451685937816, ''),\n","  Text(1.099434060207027, 0.03528097584664782, ''),\n","  Text(1.0993983285360278, 0.03637739974473846, ''),\n","  Text(1.0993615034433233, 0.03747378746318662, ''),\n","  Text(1.0993267865984233, 0.03847877684106991, ''),\n","  Text(1.099294428594085, 0.039392375683681265, ''),\n","  Text(1.0992613113408036, 0.04030594731918702, ''),\n","  Text(1.0992240054577347, 0.04131084392086627, ''),\n","  Text(1.0991857809423458, 0.04231570599866666, ''),\n","  Text(1.0991502342487707, 0.0432291863313731, ''),\n","  Text(1.0991102560701058, 0.044233980168042426, ''),\n","  Text(1.099065595925543, 0.04533007669121194, ''),\n","  Text(1.0990198426901987, 0.04642612813073117, ''),\n","  Text(1.0989729964095771, 0.04752213339650712, ''),\n","  Text(1.0989250571302702, 0.04861809139849268, ''),\n","  Text(1.0988718895461727, 0.049805324667392015, ''),\n","  Text(1.0988258997639175, 0.05080986132649164, ''),\n","  Text(1.0987875887261176, 0.05163172340184217, ''),\n","  Text(1.0987399293384428, 0.05263618220724163, ''),\n","  Text(1.098691351722995, 0.05364059702406557, ''),\n","  Text(1.0986418559203712, 0.05464496701291463, ''),\n","  Text(1.0985821771583113, 0.055831890798226556, ''),\n","  Text(1.0985164736719972, 0.057110043523363165, ''),\n","  Text(1.0984541317525585, 0.05829683040897527, ''),\n","  Text(1.098395447362575, 0.05939226560057216, ''),\n","  Text(1.0983356705483154, 0.06048764172277568, ''),\n","  Text(1.0982748013692312, 0.06158295768616446, ''),\n","  Text(1.0982128398858613, 0.06267821240137697, ''),\n","  Text(1.0981497861598297, 0.06377340477911259, ''),\n","  Text(1.098085640253848, 0.06486853373013271, ''),\n","  Text(1.0980204022317126, 0.06596359816526179, ''),\n","  Text(1.0979540721583076, 0.06705859699538844, ''),\n","  Text(1.0978923103095999, 0.06806228737743973, ''),\n","  Text(1.097829630941483, 0.06906592087916757, ''),\n","  Text(1.097760207084635, 0.07016072791454733, ''),\n","  Text(1.0976956094370285, 0.07116423977441833, ''),\n","  Text(1.0976240930361723, 0.0722589121598183, ''),\n","  Text(1.097551484978101, 0.07335351267911829, ''),\n","  Text(1.0974715944288806, 0.07453924752592236, ''),\n","  Text(1.0973904228766878, 0.07572489536819879, ''),\n","  Text(1.0973207387798756, 0.07672806685684345, ''),\n","  Text(1.097250137641322, 0.07773117422308747, ''),\n","  Text(1.0971851590563948, 0.07864303368000305, ''),\n","  Text(1.0971128073662582, 0.07964601630293949, ''),\n","  Text(1.0970193973566436, 0.0809224432606112, ''),\n","  Text(1.0969313297623675, 0.08210759883082915, ''),\n","  Text(1.0968489001694226, 0.08320150357492509, ''),\n","  Text(1.0967513535571667, 0.08447762112253789, ''),\n","  Text(1.0966665604824306, 0.08557134520173958, ''),\n","  Text(1.09659506640652, 0.08648271696055987, ''),\n","  Text(1.0965155481473488, 0.08748515686171927, ''),\n","  Text(1.0964277558444449, 0.08857864423163603, ''),\n","  Text(1.0963463216180518, 0.08958093030644193, ''),\n","  Text(1.0962639711642475, 0.0905831415175827, ''),\n","  Text(1.0961807045518528, 0.09158527702750058, ''),\n","  Text(1.0960965218504544, 0.09258733599870106, ''),\n","  Text(1.0960036414647245, 0.09368040294567334, ''),\n","  Text(1.0959096710335219, 0.0947733767215144, ''),\n","  Text(1.0958225739752596, 0.09577518658941354, ''),\n","  Text(1.095734561127287, 0.09677691641704662, ''),\n","  Text(1.0956375027450131, 0.09786962030513663, ''),\n","  Text(1.095547575302606, 0.09887118007074235, ''),\n","  Text(1.0954484284455988, 0.09996369649061634, ''),\n","  Text(1.0953313801200617, 0.10123817325634292, ''),\n","  Text(1.095212849031457, 0.10251251297475482, ''),\n","  Text(1.0951014569139577, 0.10369570417778974, ''),\n","  Text(1.0949974988914304, 0.10478777324436422, ''),\n","  Text(1.0948836487435911, 0.10597073045855974, ''),\n","  Text(1.0947863158091167, 0.10697159771220205, ''),\n","  Text(1.094697037381899, 0.10788139945001496, ''),\n","  Text(1.094597957848566, 0.10888209528544776, ''),\n","  Text(1.0945070917360635, 0.10979173985079418, ''),\n","  Text(1.0944154696810846, 0.11070130858635353, ''),\n","  Text(1.09432309174691, 0.11161080086391455, ''),\n","  Text(1.0942299579973418, 0.11252021605531888, ''),\n","  Text(1.0941266379849006, 0.11352048296170296, ''),\n","  Text(1.0940224036000594, 0.11452065499790219, ''),\n","  Text(1.0939172549299283, 0.11552073132806286, ''),\n","  Text(1.0938015046564051, 0.11661161353563432, ''),\n","  Text(1.0936944445837191, 0.11761148705254258, ''),\n","  Text(1.0935864704998213, 0.11861126228037358, ''),\n","  Text(1.093477582494947, 0.11961093838360527, ''),\n","  Text(1.0933778004022396, 0.12051964813905006, ''),\n","  Text(1.0932772631470227, 0.12142827465527055, ''),\n","  Text(1.0931759707987343, 0.12233681730470633, ''),\n","  Text(1.0930841621390721, 0.12315443345946836, ''),\n","  Text(1.0929814353099574, 0.12406281500830886, ''),\n","  Text(1.0928571666693456, 0.1251527596957023, ''),\n","  Text(1.0927422989182232, 0.1261517663567062, ''),\n","  Text(1.0926370812255524, 0.12705986278485387, ''),\n","  Text(1.092531108881964, 0.12796787145665164, ''),\n","  Text(1.09242438196065, 0.12887579174496577, ''),\n","  Text(1.0923169005353235, 0.12978362302272356, ''),\n","  Text(1.092197799606335, 0.13078213385275603, ''),\n","  Text(1.0920668303262961, 0.1318712936960769, ''),\n","  Text(1.091934774916194, 0.13296032238499167, ''),\n","  Text(1.091812770098621, 0.1339584825592458, ''),\n","  Text(1.09167863330107, 0.13504725689146135, ''),\n","  Text(1.0915207681191084, 0.13631732378781453, ''),\n","  Text(1.0913728559613591, 0.13749650639469535, ''),\n","  Text(1.0912467045281087, 0.138494150983147, ''),\n","  Text(1.0911080446893366, 0.13958235853506917, ''),\n","  Text(1.0909682996739754, 0.14067042726342704, ''),\n","  Text(1.090851016641486, 0.14157704436891078, ''),\n","  Text(1.0907329801916592, 0.1424835636914725, ''),\n","  Text(1.090614190406019, 0.14338998460500724, ''),\n","  Text(1.090482651639526, 0.14438693318035484, ''),\n","  Text(1.0903502015459485, 0.14538376109012127, ''),\n","  Text(1.0902046712958249, 0.1464710711531887, ''),\n","  Text(1.090045789954486, 0.14764882594352263, ''),\n","  Text(1.0899103581138103, 0.14864525312375673, ''),\n","  Text(1.0897864478471788, 0.14955098825694346, ''),\n","  Text(1.0896492772121535, 0.15054717755916713, ''),\n","  Text(1.0894985979554364, 0.15163378598827662, ''),\n","  Text(1.089346835122927, 0.1527202436079219, ''),\n","  Text(1.0891939888655626, 0.1538065493375517, ''),\n","  Text(1.0890400593353593, 0.1548927020967656, ''),\n","  Text(1.0889109573360003, 0.15579771177265606, ''),\n","  Text(1.0887680764861476, 0.1567930981410037, ''),\n","  Text(1.0885980442248409, 0.1579692948324185, ''),\n","  Text(1.0884267413180453, 0.15914530713716007, ''),\n","  Text(1.088254167965711, 0.16032113368255027, ''),\n","  Text(1.0880937420509682, 0.16140634593943629, ''),\n","  Text(1.0879457342922505, 0.16240098286431762, ''),\n","  Text(1.0877968173265746, 0.16339548406909915, ''),\n","  Text(1.0876333256571418, 0.1644802386914183, ''),\n","  Text(1.087468752267049, 0.1655648297276573, ''),\n","  Text(1.087289243920846, 0.1667396175299534, ''),\n","  Text(1.087080541907345, 0.1680949000012586, ''),\n","  Text(1.086856064420803, 0.16954024664286538, ''),\n","  Text(1.086643871486697, 0.17089498693760155, ''),\n","  Text(1.086472901293233, 0.17197858807265798, ''),\n","  Text(1.0863296006932293, 0.17288145839762395, ''),\n","  Text(1.0861711034500436, 0.17387447779969048, ''),\n","  Text(1.0860116984829764, 0.17486735189314462, ''),\n","  Text(1.085865997291436, 0.17576983793095863, ''),\n","  Text(1.0857048597675036, 0.17676243231304986, ''),\n","  Text(1.0855132547340092, 0.1779353078980629, ''),\n","  Text(1.085335263944983, 0.17901777799278631, ''),\n","  Text(1.085186113712739, 0.1799197004361744, ''),\n","  Text(1.0850211827865592, 0.18091167155398355, ''),\n","  Text(1.0848402239883077, 0.1819936493864515, ''),\n","  Text(1.0846886007883283, 0.18289515936694084, ''),\n","  Text(1.084520949985858, 0.18388667445405651, ''),\n","  Text(1.0843370245228514, 0.1849681519854951, ''),\n","  Text(1.0841674788005664, 0.18595934478058238, ''),\n","  Text(1.0840125600819432, 0.1868602942965454, ''),\n","  Text(1.0838724930955919, 0.18767103855082742, ''),\n","  Text(1.0837318197452783, 0.18848167781401928, ''),\n","  Text(1.0835748049541951, 0.189382264397905, ''),\n","  Text(1.0833853993389875, 0.19046279557725365, ''),\n","  Text(1.0832108309673605, 0.1914531161276844, ''),\n","  Text(1.0830513468931715, 0.19235326873460487, ''),\n","  Text(1.0828750504443072, 0.1933432831138418, ''),\n","  Text(1.0826978490261054, 0.1943331359141941, ''),\n","  Text(1.0825359716451224, 0.19523286120515332, ''),\n","  Text(1.0823570429700278, 0.19622240323973647, ''),\n","  Text(1.0821772097584994, 0.1972117812893259, ''),\n","  Text(1.081963513623294, 0.19838083372124607, ''),\n","  Text(1.0817651347292314, 0.19945975354503898, ''),\n","  Text(1.0815989971219104, 0.2003587018945716, ''),\n","  Text(1.0814153829404816, 0.20134738523182186, ''),\n","  Text(1.0812308650095739, 0.20233590030108056, ''),\n","  Text(1.0810454434833907, 0.20332424627623602, ''),\n","  Text(1.080876094474969, 0.20422259520566827, ''),\n","  Text(1.0806889483341768, 0.20521061607132077, ''),\n","  Text(1.0805008990509943, 0.20619846544044174, ''),\n","  Text(1.080329161567373, 0.20709636082543095, ''),\n","  Text(1.0801566779335368, 0.207994113175316, ''),\n","  Text(1.0799834482686146, 0.2088917218700469, ''),\n","  Text(1.079809472692251, 0.20978918628967289, ''),\n","  Text(1.0796347513246056, 0.2106865058143427, ''),\n","  Text(1.0794592842863533, 0.21158367982430537, ''),\n","  Text(1.079265409443267, 0.21257040240649164, ''),\n","  Text(1.0790883768967223, 0.2134672687940644, ''),\n","  Text(1.0789284103722208, 0.2142743225206252, ''),\n","  Text(1.078749961868627, 0.21517090827627303, ''),\n","  Text(1.0785887211869754, 0.2159777084058574, ''),\n","  Text(1.078426877097326, 0.2167843877084073, ''),\n","  Text(1.0782282483463215, 0.21777016432014668, ''),\n","  Text(1.0780287185093576, 0.21875575893921642, ''),\n","  Text(1.0778100221010574, 0.21983074457072285, ''),\n","  Text(1.0775902537419002, 0.22090551156652338, ''),\n","  Text(1.0773878579261968, 0.22189052163894082, ''),\n","  Text(1.0771475020565724, 0.22305438532628452, ''),\n","  Text(1.0769245191605985, 0.22412849000230628, ''),\n","  Text(1.0767378818942908, 0.22502340699090956, ''),\n","  Text(1.0765505009581549, 0.22591816856274777, ''),\n","  Text(1.0763623764816088, 0.2268127740998365, ''),\n","  Text(1.0761735085945847, 0.22770722298429924, ''),\n","  Text(1.0759838974275278, 0.22860151459836753, ''),\n","  Text(1.0757744668158398, 0.2295850529696912, ''),\n","  Text(1.0755257988351172, 0.23074716908357296, ''),\n","  Text(1.0752758754672374, 0.2319090158621835, ''),\n","  Text(1.0750440629836662, 0.23298124955363192, ''),\n","  Text(1.0748306289354927, 0.23396392692492857, ''),\n","  Text(1.0746162966407842, 0.2349464087702687, ''),\n","  Text(1.0743814553599689, 0.23601798316779865, ''),\n","  Text(1.0741455455383229, 0.23708932283040232, ''),\n","  Text(1.0739283563817843, 0.23807117708601258, ''),\n","  Text(1.0737499885957074, 0.23887436444859173, ''),\n","  Text(1.0735510976494695, 0.23976663807881873, ''),\n","  Text(1.07331144978953, 0.24083714777977572, ''),\n","  Text(1.0730707344529484, 0.24190741795284004, ''),\n","  Text(1.0728289518791319, 0.24297744753355976, ''),\n","  Text(1.0725861023085481, 0.24404723545772228, ''),\n","  Text(1.072342185982727, 0.2451167806613554, ''),\n","  Text(1.0720972031442584, 0.24618608208072815, ''),\n","  Text(1.071830601814432, 0.24734421564716813, ''),\n","  Text(1.071562749410597, 0.24850206050574805, ''),\n","  Text(1.0713351281329229, 0.2494815488736872, ''),\n","  Text(1.071127422754308, 0.25037181195916247, ''),\n","  Text(1.070877199781121, 0.25143989935757055, ''),\n","  Text(1.0706049230203418, 0.2525967117850279, ''),\n","  Text(1.0703735589290932, 0.25357532282433765, ''),\n","  Text(1.0701413003161269, 0.2545537219482543, ''),\n","  Text(1.0698656598590404, 0.25570973750403087, ''),\n","  Text(1.0695674197267613, 0.25695434353020385, ''),\n","  Text(1.0692677317083934, 0.2581986017142375, ''),\n","  Text(1.0690097041741071, 0.2592648305914017, ''),\n","  Text(1.0688154857883543, 0.2600643330774218, ''),\n","  Text(1.0686640136500323, 0.2606860677700362, ''),\n","  Text(1.0684904597800293, 0.2613965136704426, ''),\n","  Text(1.068316433606934, 0.26210684402617507, ''),\n","  Text(1.068120089712707, 0.2629058271551222, ''),\n","  Text(1.0678134781882012, 0.26414839730654516, ''),\n","  Text(1.0674833617682988, 0.2654793256505132, ''),\n","  Text(1.06717375642026, 0.2667211532816092, ''),\n","  Text(1.0668849721903648, 0.26787395564773453, ''),\n","  Text(1.0666619830672308, 0.2687605139879794, ''),\n","  Text(1.0664382572334232, 0.26964688670359116, ''),\n","  Text(1.0661913080979866, 0.27062168157097877, ''),\n","  Text(1.065966035669124, 0.27150766250669917, ''),\n","  Text(1.0657173856626623, 0.2724820249050215, ''),\n","  Text(1.0654451153614928, 0.27354470594828795, ''),\n","  Text(1.0651946033654898, 0.27451859128488393, ''),\n","  Text(1.0649432011758728, 0.2754922472035912, ''),\n","  Text(1.0646909090027412, 0.27646567289071616, ''),\n","  Text(1.0644377270569385, 0.27743886753275726, ''),\n","  Text(1.0641605140418287, 0.27850026993565186, ''),\n","  Text(1.063882242651266, 0.2795613953522784, ''),\n","  Text(1.0636262310218916, 0.28053384944096493, ''),\n","  Text(1.0633927218220134, 0.2814176952076221, ''),\n","  Text(1.0631584781694, 0.2823013466077092, ''),\n","  Text(1.0629235002258355, 0.2831848030309152, ''),\n","  Text(1.062664176580774, 0.28415637915047043, ''),\n","  Text(1.0623802652208112, 0.2852160094899288, ''),\n","  Text(1.0621190849315363, 0.28618708815073457, ''),\n","  Text(1.0619047317390076, 0.28698142920807046, ''),\n","  Text(1.0616419377453312, 0.2879520724362623, ''),\n","  Text(1.061282152519369, 0.2892752888579581, ''),\n","  Text(1.0608965638031906, 0.29068622414999823, ''),\n","  Text(1.06060614124455, 0.2917440884651234, ''),\n","  Text(1.0603876320690162, 0.29253729634879855, ''),\n","  Text(1.0601441483416811, 0.29341844648367255, ''),\n","  Text(1.0598999324053004, 0.29429939396342564, ''),\n","  Text(1.0596304493805595, 0.2952682013789394, ''),\n","  Text(1.059310827763607, 0.29641283741225166, ''),\n","  Text(1.0589652370835536, 0.2976451354357623, ''),\n","  Text(1.0586182128697115, 0.29887703053352643, ''),\n","  Text(1.0582697555918512, 0.30010852103791297, ''),\n","  Text(1.0579449053624892, 0.30125168417380543, ''),\n","  Text(1.057669067568578, 0.30221870145412066, ''),\n","  Text(1.0573671455213758, 0.3032733413473363, ''),\n","  Text(1.0571147404847618, 0.3041519775537138, ''),\n","  Text(1.056886951705394, 0.30494257051923807, ''),\n","  Text(1.0566077402501726, 0.30590861910613787, ''),\n","  Text(1.0563021388567433, 0.30696219872594976, ''),\n","  Text(1.0559698851682913, 0.30810323207922663, ''),\n","  Text(1.0556620954667686, 0.30915617444054233, ''),\n","  Text(1.055353255842012, 0.3102088093263393, ''),\n","  Text(1.0550433666011816, 0.3112611356897049, ''),\n","  Text(1.0547324280524824, 0.3123131524840335, ''),\n","  Text(1.0544204405051625, 0.3133648586630275, ''),\n","  Text(1.0541074042695135, 0.3144162531806979, ''),\n","  Text(1.0537933196568696, 0.3154673349913658, ''),\n","  Text(1.0535044880538296, 0.3164305510699605, ''),\n","  Text(1.0532147760267199, 0.31739350270442923, ''),\n","  Text(1.0528712543205425, 0.31853119443076167, ''),\n","  Text(1.0525265036702964, 0.3196685143575787, ''),\n","  Text(1.0521805244783855, 0.3208054611573652, ''),\n","  Text(1.0517797916524714, 0.32211685747797214, ''),\n","  Text(1.0514042996876942, 0.3233403757624922, ''),\n","  Text(1.0510813165877944, 0.3243887573885215, ''),\n","  Text(1.0507843304072189, 0.3253494905031403, ''),\n","  Text(1.0504864660758364, 0.32630995171998783, ''),\n","  Text(1.0501605219394734, 0.32735741653399697, ''),\n","  Text(1.0498608222798516, 0.3283173066438536, ''),\n","  Text(1.0495328765485723, 0.3293641465668048, ''),\n","  Text(1.049176424092637, 0.3304978534396064, ''),\n","  Text(1.0488187470053536, 0.3316311745450364, ''),\n","  Text(1.0484874969444486, 0.3326769735812279, ''),\n","  Text(1.0481829349960672, 0.3336353320363876, ''),\n","  Text(1.0478496865642977, 0.3346804959466618, ''),\n","  Text(1.047543293319233, 0.33563827049652045, ''),\n","  Text(1.0472639943119137, 0.3365087312654102, ''),\n","  Text(1.0469559299908238, 0.3374659696281232, ''),\n","  Text(1.046618861958479, 0.3385099079683463, ''),\n","  Text(1.0462807529969722, 0.33955350963889186, ''),\n","  Text(1.045969905636895, 0.34050984787806826, ''),\n","  Text(1.0456014136169722, 0.3416396988673733, ''),\n","  Text(1.045231701138565, 0.3427691510841979, ''),\n","  Text(1.0449179145688363, 0.34372452896631367, ''),\n","  Text(1.0446032547509223, 0.3446796195944576, ''),\n","  Text(1.0443164428091682, 0.34554763387759635, ''),\n","  Text(1.044000116611895, 0.3465021738955613, ''),\n","  Text(1.0436540384413582, 0.3475431599744762, ''),\n","  Text(1.043306922290365, 0.3485838003995686, ''),\n","  Text(1.0429878209377952, 0.34953741627389434, ''),\n","  Text(1.0426387162740631, 0.3505773913508598, ''),\n","  Text(1.042230116905658, 0.35179025486050414, ''),\n","  Text(1.041849439891017, 0.35291605885645727, ''),\n","  Text(1.0414969663633618, 0.3539548969232025, ''),\n","  Text(1.0411729556633254, 0.35490685594292976, ''),\n","  Text(1.0408480748448024, 0.35585851836350446, ''),\n","  Text(1.0404926673648633, 0.35689635632764904, ''),\n","  Text(1.040106474811136, 0.3580202802299778, ''),\n","  Text(1.0397190682127877, 0.3591437862399022, ''),\n","  Text(1.0393603849687802, 0.36018049663682367, ''),\n","  Text(1.039030683895233, 0.36113049985317597, ''),\n","  Text(1.038670019671135, 0.36216652279906303, ''),\n","  Text(1.0382479391384123, 0.3633747609216136, ''),\n","  Text(1.0378547487265715, 0.36449625587337064, ''),\n","  Text(1.0374603468983938, 0.36561732537376324, ''),\n","  Text(1.0370647341142383, 0.36673796811424425, ''),\n","  Text(1.0366984786793818, 0.3677720276256143, ''),\n","  Text(1.0363311921818166, 0.3688057213642636, ''),\n","  Text(1.0359628749868326, 0.3698390483021181, ''),\n","  Text(1.0355935274607446, 0.37087200741146825, ''),\n","  Text(1.0352231499708924, 0.3719045976649703, ''),\n","  Text(1.0348517428856399, 0.37293681803564743, ''),\n","  Text(1.0345103822296335, 0.3738826942492764, ''),\n","  Text(1.0341681570231187, 0.37482825800545777, ''),\n","  Text(1.0337938347602464, 0.3758594248009544, ''),\n","  Text(1.0333871587100383, 0.3769761003209544, ''),\n","  Text(1.0329478509423597, 0.3781781818581828, ''),\n","  Text(1.0325386702366024, 0.3792939420370815, ''),\n","  Text(1.0321598952554343, 0.38032348156048873, ''),\n","  Text(1.0317800937254675, 0.3813526428279545, ''),\n","  Text(1.0314310408451641, 0.38229570751064074, ''),\n","  Text(1.0310811259877886, 0.38323845270504153, ''),\n","  Text(1.03069841795757, 0.38426653669004607, ''),\n","  Text(1.0303467017303105, 0.38520861131790757, ''),\n","  Text(1.0299941244321715, 0.38615036402314135, ''),\n","  Text(1.0295763324278877, 0.38726292838889137, ''),\n","  Text(1.029125058607345, 0.3884605691012007, ''),\n","  Text(1.028672391648017, 0.38965768394983485, ''),\n","  Text(1.0282183321626834, 0.3908542713142453, ''),\n","  Text(1.0277954591660612, 0.3919649143962064, ''),\n","  Text(1.0273713864946183, 0.3930750999645306, ''),\n","  Text(1.026913351756979, 0.39427017130800923, ''),\n","  Text(1.0264867890364178, 0.39537940251574166, ''),\n","  Text(1.0260919753882707, 0.39640289863193034, ''),\n","  Text(1.0256961412262586, 0.3974260005001727, ''),\n","  Text(1.0252661697070078, 0.3985339148106738, ''),\n","  Text(1.0248017851121571, 0.39972653305846034, ''),\n","  Text(1.0243360132309873, 0.40091861019170283, ''),\n","  Text(1.0239356765038428, 0.4019399586786787, ''),\n","  Text(1.023567806562423, 0.40287584361561146, ''),\n","  Text(1.0231319483590497, 0.40398145532563107, ''),\n","  Text(1.0226612270442028, 0.40517158673881065, ''),\n","  Text(1.0222566497495973, 0.4061912628832988, ''),\n","  Text(1.0218848940883087, 0.40712561112527185, ''),\n","  Text(1.0214783684927224, 0.4081445120315183, ''),\n","  Text(1.0211048275517935, 0.4090781479747146, ''),\n","  Text(1.0207645043551496, 0.4099266112959558, ''),\n","  Text(1.0204234761477728, 0.41077479149346036, ''),\n","  Text(1.0200475311209187, 0.4117074619849855, ''),\n","  Text(1.0196707336303037, 0.4126397884085326, ''),\n","  Text(1.0192930839908205, 0.4135717699849473, ''),\n","  Text(1.018880131071433, 0.4145880829303464, ''),\n","  Text(1.0185007006868365, 0.4155193409462707, ''),\n","  Text(1.018155025338779, 0.41636563784417985, ''),\n","  Text(1.0178086467822751, 0.41721164717111414, ''),\n","  Text(1.017426818457551, 0.4181419245702896, ''),\n","  Text(1.0170441398592212, 0.4190718525241432, ''),\n","  Text(1.0166257029274632, 0.4200859199583357, ''),\n","  Text(1.016206254896559, 0.4210995695902693, ''),\n","  Text(1.015820873013243, 0.42202838050374414, ''),\n","  Text(1.0154346421984255, 0.4229568387239477, ''),\n","  Text(1.0150475627748838, 0.4238849434749583, ''),\n","  Text(1.0146243268652912, 0.424897017326734, ''),\n","  Text(1.0142354741242157, 0.42582438049978755, ''),\n","  Text(1.0138812360903162, 0.4266671291580509, ''),\n","  Text(1.0134907654738248, 0.4275938122789908, ''),\n","  Text(1.0130638315649947, 0.42860433172665496, ''),\n","  Text(1.0126358900996184, 0.4296144248999952, ''),\n","  Text(1.0122427256695123, 0.43053996832948804, ''),\n","  Text(1.0118487152981979, 0.4314651519524919, ''),\n","  Text(1.0114179214038945, 0.43247403189443134, ''),\n","  Text(1.0109500928663324, 0.4335664997823908, ''),\n","  Text(1.010481084316385, 0.43465846159804944, ''),\n","  Text(1.0100471064846013, 0.43566597604367135, ''),\n","  Text(1.009612124096597, 0.43667305719171395, ''),\n","  Text(1.0091397600509089, 0.4377635716735625, ''),\n","  Text(1.008666218105912, 0.43885357518415724, ''),\n","  Text(1.0082280574819813, 0.43985927761741134, ''),\n","  Text(1.0078255293405711, 0.4407807872507581, ''),\n","  Text(1.00745886377251, 0.4416182036626249, ''),\n","  Text(1.0070915023835132, 0.44245531506234426, ''),\n","  Text(1.0067234454273064, 0.4432921208717489, ''),\n","  Text(1.0063546931580953, 0.44412862051288277, ''),\n","  Text(1.0059112729764372, 0.4451320151358737, ''),\n","  Text(1.005503925606152, 0.446051404650426, ''),\n","  Text(1.0050585883073038, 0.44705394984244334, ''),\n","  Text(1.004500511047775, 0.4483065059808513, ''),\n","  Text(1.004052925274554, 0.44930804939107316, ''),\n","  Text(1.003566913823056, 0.4503925504264774, ''),\n","  Text(1.0030046758314972, 0.451643244453134, ''),\n","  Text(1.0025537631459778, 0.4526432944403779, ''),\n","  Text(1.0021018533567543, 0.45364289424497595, ''),\n","  Text(1.0016111597445654, 0.4547252848425595, ''),\n","  Text(1.001081413026265, 0.45589034261907413, ''),\n","  Text(1.0005503111323009, 0.4570547832514787, ''),\n","  Text(1.0000940028791894, 0.45805238281781735, ''),\n","  Text(0.9997511189206961, 0.4588002835840626, ''),\n","  Text(0.9994458636286154, 0.4594648688155071, ''),\n","  Text(0.9990254162827146, 0.460378341824579, ''),\n","  Text(0.9985657942759322, 0.46137441899402815, ''),\n","  Text(0.998066749707627, 0.4624529847758076, ''),\n","  Text(0.9976050591605325, 0.46344810490205984, ''),\n","  Text(0.9972195591052438, 0.46427701960999906, ''),\n","  Text(0.9967560499094774, 0.4652712939445711, ''),\n","  Text(0.996214036269491, 0.46643069575195134, ''),\n","  Text(0.9956706740427599, 0.4675894661465722, ''),\n","  Text(0.9951649165232282, 0.46866490045800985, ''),\n","  Text(0.9946579974162599, 0.4697397877292019, ''),\n","  Text(0.9941890415953892, 0.4707315047579052, ''),\n","  Text(0.9937582968077591, 0.4716401674218832, ''),\n","  Text(0.9933267215265397, 0.4725484359315313, ''),\n","  Text(0.9929336599811521, 0.4733737919196983, ''),\n","  Text(0.9925399126469421, 0.47419882096310706, ''),\n","  Text(0.9921454797958584, 0.4750235224919353, ''),\n","  Text(0.9917108122215311, 0.4759303151963648, ''),\n","  Text(0.9912753158647176, 0.4768367101611457, ''),\n","  Text(0.9908786911926813, 0.47766035981676247, ''),\n","  Text(0.9904416136259592, 0.47856599335724465, ''),\n","  Text(0.9899638577423063, 0.4795535010444308, ''),\n","  Text(0.989525049901955, 0.4804582974791189, ''),\n","  Text(0.9891254160595038, 0.48128049129911105, ''),\n","  Text(0.9886850298040993, 0.48218452053261457, ''),\n","  Text(0.9882438172948848, 0.48308814679976847, ''),\n","  Text(0.9878017789005856, 0.4839913693454035, ''),\n","  Text(0.9872783056108085, 0.48505829265177103, ''),\n","  Text(0.9867536799390922, 0.4861246497830157, ''),\n","  Text(0.9863088662827414, 0.48702650881862036, ''),\n","  Text(0.9858226749456573, 0.48800989084545093, ''),\n","  Text(0.9852948612624108, 0.48907467361322937, ''),\n","  Text(0.9848066278621149, 0.4900570433315391, ''),\n","  Text(0.9843174150088633, 0.4910389256568868, ''),\n","  Text(0.9838681098792047, 0.49193855547489, ''),\n","  Text(0.9834179825212834, 0.49283777417500074, ''),\n","  Text(0.9829670333112751, 0.493736581005733, ''),\n","  Text(0.9825563666154491, 0.49455332010153097, ''),\n","  Text(0.9821450212980787, 0.49536971762452015, ''),\n","  Text(0.9816917579892539, 0.4962673596923018, ''),\n","  Text(0.9811963532728537, 0.49724613253805566, ''),\n","  Text(0.9806999726941458, 0.49822441084083985, ''),\n","  Text(0.9802026167468124, 0.49920219362769425, ''),\n","  Text(0.9797042859255055, 0.5001794799261515, ''),\n","  Text(0.9792049807258473, 0.5011562687642382, ''),\n","  Text(0.9786629677613196, 0.5022138942050556, ''),\n","  Text(0.9781198124709428, 0.5032709334461984, ''),\n","  Text(0.9776174250205127, 0.5042461405863831, ''),\n","  Text(0.9771140652672472, 0.505220846221644, ''),\n","  Text(0.9766097337117696, 0.506195049382574, ''),\n","  Text(0.9761887154246066, 0.5070065008238619, ''),\n","  Text(0.9757670229138775, 0.5078176020913303, ''),\n","  Text(0.9753023827679892, 0.5087094083728774, ''),\n","  Text(0.9749216163755422, 0.509438751886525, ''),\n","  Text(0.9744979029434585, 0.5102487992722783, ''),\n","  Text(0.9739885584217967, 0.5112203908916687, ''),\n","  Text(0.9734782452064386, 0.5121914740697988, ''),\n","  Text(0.9730096075474941, 0.5130811861881818, ''),\n","  Text(0.9725401567348444, 0.5139704695195674, ''),\n","  Text(0.9720271016467311, 0.5149401068709405, ''),\n","  Text(0.9715559518721789, 0.5158284912466009, ''),\n","  Text(0.9710410442856041, 0.516797146192511, ''),\n","  Text(0.9704821379234992, 0.5178459423143474, ''),\n","  Text(0.9699220987844644, 0.5188941339902966, ''),\n","  Text(0.9693609275221947, 0.519941719996877, ''),\n","  Text(0.9688419190180929, 0.5209081838033832, ''),\n","  Text(0.9683219469389558, 0.521874129533502, ''),\n","  Text(0.9678010118019286, 0.5228395562265382, ''),\n","  Text(0.9672355792043674, 0.5238848483409232, ''),\n","  Text(0.9666690176193604, 0.5249295289606223, ''),\n","  Text(0.9661887380379905, 0.525813010954042, ''),\n","  Text(0.9657076510031828, 0.5266960535203535, ''),\n","  Text(0.9651819083673037, 0.5276588706356126, ''),\n","  Text(0.9646991343207534, 0.5285409920155572, ''),\n","  Text(0.9642595492019969, 0.529342537278804, ''),\n","  Text(0.9638192980987466, 0.5301437169413967, ''),\n","  Text(0.96333425304571, 0.5310245916234617, ''),\n","  Text(0.962804194834091, 0.5319850396485583, ''),\n","  Text(0.962317466920342, 0.5328649855826676, ''),\n","  Text(0.9618299347884147, 0.5337444861962641, ''),\n","  Text(0.9613860262302765, 0.5345436451489797, ''),\n","  Text(0.960941453672335, 0.535342434908816, ''),\n","  Text(0.9604070905603309, 0.5363004945004625, ''),\n","  Text(0.9598717722622659, 0.5372580207070873, ''),\n","  Text(0.959335499310548, 0.5382150125763697, ''),\n","  Text(0.9588430775820505, 0.5390917849244061, ''),\n","  Text(0.9583498545389558, 0.5399681067481323, ''),\n","  Text(0.9578108796347697, 0.5409235794946166, ''),\n","  Text(0.9572709521266201, 0.5418785142581265, ''),\n","  Text(0.9567751821917032, 0.5427533977250013, ''),\n","  Text(0.9563237883749275, 0.5435483527601083, ''),\n","  Text(0.9558264923168953, 0.5444223696590546, ''),\n","  Text(0.955328397465256, 0.5452959315788684, ''),\n","  Text(0.9548295042362727, 0.5461690377895051, ''),\n","  Text(0.9543752724846427, 0.546962374638205, ''),\n","  Text(0.9539659003106363, 0.5476760548394618, ''),\n","  Text(0.9534648318099505, 0.5485479144993836, ''),\n","  Text(0.9529173028811555, 0.5494985112534012, ''),\n","  Text(0.9523688262153708, 0.5504485614961285, ''),\n","  Text(0.9518194023580911, 0.55139806428268, ''),\n","  Text(0.9512690318557538, 0.5523470186687142, ''),\n","  Text(0.9507177152557376, 0.5532954237104358, ''),\n","  Text(0.9501193885798489, 0.5543222415208092, ''),\n","  Text(0.9495661026797734, 0.5552694991097082, ''),\n","  Text(0.9490118723756038, 0.5562162044476507, ''),\n","  Text(0.9483640774634192, 0.5573199947758543, ''),\n","  Text(0.9477149987395459, 0.5584230306533772, ''),\n","  Text(0.9470646370826498, 0.5595253105870271, ''),\n","  Text(0.9464129933731329, 0.5606268330846345, ''),\n","  Text(0.9457600684931332, 0.5617275966550551, ''),\n","  Text(0.9451993995624899, 0.5626705031070216, ''),\n","  Text(0.9446846272265488, 0.5635343424156478, ''),\n","  Text(0.9441690654083672, 0.5643977107730778, ''),\n","  Text(0.9436527145388048, 0.565260607457786, ''),\n","  Text(0.9430414649866126, 0.5662797853675371, ''),\n","  Text(0.9424762576098448, 0.5672199783520866, ''),\n","  Text(0.9419573274108343, 0.568081326340726, ''),\n","  Text(0.9413430313870214, 0.5690986709342182, ''),\n","  Text(0.9407750136420574, 0.570037168706381, ''),\n","  Text(0.9402535087585783, 0.5708969602889669, ''),\n","  Text(0.9396836981869943, 0.5718343705668749, ''),\n","  Text(0.9391605508086724, 0.5726931637489235, ''),\n","  Text(0.9386366185646349, 0.5735514783256584, ''),\n","  Text(0.9380641615045611, 0.5744872747944424, ''),\n","  Text(0.937538589593336, 0.5753445863335629, ''),\n","  Text(0.9369643448257102, 0.5762792869133226, ''),\n","  Text(0.9363891681872429, 0.5772134143465513, ''),\n","  Text(0.9358130602499838, 0.578146967704199, ''),\n","  Text(0.9351397580250348, 0.5792353864888434, ''),\n","  Text(0.9345134153059105, 0.5802453589760826, ''),\n","  Text(0.9339342846360679, 0.5811770401360642, ''),\n","  Text(0.9333058448878927, 0.5821857091153104, ''),\n","  Text(0.9326278453205392, 0.5832712080437099, ''),\n","  Text(0.931948583243821, 0.5843559173909639, ''),\n","  Text(0.931365354453034, 0.5852850386987305, ''),\n","  Text(0.9308786228485068, 0.5860588618250455, ''),\n","  Text(0.9303424755238597, 0.586909599713735, ''),\n","  Text(0.9297567008272211, 0.5878371179730671, ''),\n","  Text(0.9291210680720133, 0.5888412696684237, ''),\n","  Text(0.9284843508178028, 0.5898447340499393, ''),\n","  Text(0.927895649900163, 0.5907703977827207, ''),\n","  Text(0.9272568491609338, 0.5917725371155185, ''),\n","  Text(0.9265676994994381, 0.5928509916027122, ''),\n","  Text(0.9259266516938225, 0.5938516950241591, ''),\n","  Text(0.925383382451786, 0.5946979027053079, ''),\n","  Text(0.9248393398577489, 0.5955436133915663, ''),\n","  Text(0.9242945243663733, 0.5963888263761654, ''),\n","  Text(0.9237985672331834, 0.5971567693478136, ''),\n","  Text(0.9233019720606588, 0.5979242998815975, ''),\n","  Text(0.9227052161191833, 0.5988447913662199, ''),\n","  Text(0.9221075424884797, 0.5997646872614767, ''),\n","  Text(0.9215588693528534, 0.6006074011507773, ''),\n","  Text(0.9208594442904675, 0.6016792200675136, ''),\n","  Text(0.9201086769821444, 0.6028266936211171, ''),\n","  Text(0.9194568553518708, 0.6038204129925132, ''),\n","  Text(0.9188542212857628, 0.604737066852475, ''),\n","  Text(0.9183010039014733, 0.6055768045702762, ''),\n","  Text(0.9177974130299968, 0.606339763363286, ''),\n","  Text(0.9172427309477074, 0.6071785343073255, ''),\n","  Text(0.9166367490020063, 0.6080929783997123, ''),\n","  Text(0.9160804646653558, 0.6089306875651005, ''),\n","  Text(0.9155740872655871, 0.6096917997872262, ''),\n","  Text(0.9150670775068799, 0.6104524909139271, ''),\n","  Text(0.9145086368268542, 0.6112887641443191, ''),\n","  Text(0.9137967888668542, 0.6123523729492897, ''),\n","  Text(0.913083703889411, 0.6134151528056627, ''),\n","  Text(0.9125225556568617, 0.6142496116543094, ''),\n","  Text(0.912011759113559, 0.6150077651856047, ''),\n","  Text(0.9115003326717084, 0.6157654939499007, ''),\n","  Text(0.9109882766845364, 0.6165227974238574, ''),\n","  Text(0.9103729789924464, 0.6174309994812529, ''),\n","  Text(0.9097053847777978, 0.6184141920317474, ''),\n","  Text(0.9090882015055893, 0.619321113707044, ''),\n","  Text(0.9084701140872257, 0.6202274194280218, ''),\n","  Text(0.9079027402019838, 0.6210576578174761, ''),\n","  Text(0.9073862873244681, 0.6218119696303038, ''),\n","  Text(0.9068174653413554, 0.6226412165540278, ''),\n","  Text(0.9062478855219619, 0.6234699431303591, ''),\n","  Text(0.9057294284497797, 0.6242228788181636, ''),\n","  Text(0.905054499103741, 0.6252010505845912, ''),\n","  Text(0.904430549745039, 0.6261033306794388, ''),\n","  Text(0.903909904798276, 0.6268547551128345, ''),\n","  Text(0.9032843068198639, 0.6277558928858876, ''),\n","  Text(0.9026578104676399, 0.6286564063156969, ''),\n","  Text(0.9020827334708836, 0.6294813277403063, ''),\n","  Text(0.9015592819850942, 0.6302307998396472, ''),\n","  Text(0.9009827661815568, 0.6310547163628762, ''),\n","  Text(0.9004054974178543, 0.6318781055074678, ''),\n","  Text(0.8998274761764156, 0.6327009665853075, ''),\n","  Text(0.899196049929813, 0.6335980301347389, ''),\n","  Text(0.898510995628206, 0.6345691378685306, ''),\n","  Text(0.8978777069210221, 0.6354648876328631, ''),\n","  Text(0.8973492841595475, 0.6362108630150447, ''),\n","  Text(0.8968202416264465, 0.6369563989858978, ''),\n","  Text(0.8961845729968511, 0.6378504614111775, ''),\n","  Text(0.8956010937465478, 0.6386694613647872, ''),\n","  Text(0.8950700085764794, 0.6394135436060933, ''),\n","  Text(0.8944851008811902, 0.6402315239829786, ''),\n","  Text(0.8939527179061639, 0.6409746782425828, ''),\n","  Text(0.8934197175054158, 0.6417173898006374, ''),\n","  Text(0.8929394895529351, 0.6423854512650048, ''),\n","  Text(0.8924053170725613, 0.6431273202567448, ''),\n","  Text(0.8918170154616786, 0.6439428630965828, ''),\n","  Text(0.8911743818725555, 0.6448319324398172, ''),\n","  Text(0.8904235225028634, 0.6458683693862031, ''),\n","  Text(0.8896714577562986, 0.6469039320129247, ''),\n","  Text(0.8889181886509402, 0.6479386189181284, ''),\n","  Text(0.8882176469972259, 0.6488986142400918, ''),\n","  Text(0.8875160685882536, 0.6498578521474142, ''),\n","  Text(0.8868134542429275, 0.6508163315204433, ''),\n","  Text(0.8861639684123584, 0.6517004074631692, ''),\n","  Text(0.8855678321368248, 0.652510241057169, ''),\n","  Text(0.8850252478279534, 0.6532459802456266, ''),\n","  Text(0.8845363993151475, 0.6539077597693685, ''),\n","  Text(0.8840470559553927, 0.6545691734695447, ''),\n","  Text(0.8833938288436821, 0.6554504887181788, ''),\n","  Text(0.8827942654929789, 0.6562577883825168, ''),\n","  Text(0.8823031648964106, 0.6569178983813557, ''),\n","  Text(0.8817022605522453, 0.6577242003583726, ''),\n","  Text(0.881100619360823, 0.6585299526688018, ''),\n","  Text(0.8804982418249412, 0.6593351546392682, ''),\n","  Text(0.8798402634996051, 0.6602129283230871, ''),\n","  Text(0.8791814101170525, 0.6610900453830713, ''),\n","  Text(0.8785766930191344, 0.6618934917972542, ''),\n","  Text(0.8779712416860267, 0.6626963850605317, ''),\n","  Text(0.8773099125360417, 0.6635716369511305, ''),\n","  Text(0.8765372591027669, 0.6645919299875744, ''),\n","  Text(0.8757634190907119, 0.6656113233581189, ''),\n","  Text(0.8751545701972132, 0.6664116432528255, ''),\n","  Text(0.8745449899284268, 0.6672114062207632, ''),\n","  Text(0.8738791597508095, 0.6680832389404926, ''),\n","  Text(0.8731568629380548, 0.6690269745714108, ''),\n","  Text(0.8723778650489948, 0.6700424319194703, ''),\n","  Text(0.8715976862116823, 0.6710569822231507, ''),\n","  Text(0.8709280223604965, 0.6719258737890917, ''),\n","  Text(0.870369307452416, 0.6726494396376184, ''),\n","  Text(0.869754026767033, 0.6734448254478844, ''),\n","  Text(0.8691380192196495, 0.6742396484536818, ''),\n","  Text(0.8685773820323358, 0.6749617258940347, ''),\n","  Text(0.8680161449452661, 0.6756833371590265, ''),\n","  Text(0.8673418691127303, 0.6765486546317535, ''),\n","  Text(0.8667230251253841, 0.6773412712344515, ''),\n","  Text(0.8661598111370907, 0.6780613405665887, ''),\n","  Text(0.865426738642725, 0.6789967305092247, ''),\n","  Text(0.8648056574941905, 0.6797875953311013, ''),\n","  Text(0.8642404111134957, 0.6805060703611513, ''),\n","  Text(0.8636179506806239, 0.6812958500256697, ''),\n","  Text(0.863051451236685, 0.682013337492935, ''),\n","  Text(0.862427613399859, 0.682802029614312, ''),\n","  Text(0.8618030548237879, 0.6835901511113126, ''),\n","  Text(0.8611777760304223, 0.6843777013252959, ''),\n","  Text(0.8605517775423134, 0.6851646795980985, ''),\n","  Text(0.859982063907978, 0.6858796175398235, ''),\n","  Text(0.8594117563104094, 0.6865940817655347, ''),\n","  Text(0.8588408551435014, 0.6873080717817734, ''),\n","  Text(0.8581549907806005, 0.6881642331582974, ''),\n","  Text(0.8575255320000618, 0.6889484465241295, ''),\n","  Text(0.8569526748699029, 0.6896608681325328, ''),\n","  Text(0.8562644650852913, 0.6905151452591031, ''),\n","  Text(0.8556328579734493, 0.6912976293581422, ''),\n","  Text(0.8550580491572549, 0.692008477239542, ''),\n","  Text(0.8544250773878721, 0.6927898578434365, ''),\n","  Text(0.8537337483874684, 0.6936416126965588, ''),\n","  Text(0.8530992842054392, 0.6944217819799198, ''),\n","  Text(0.8525218798899509, 0.6951305232176935, ''),\n","  Text(0.8518860550946317, 0.6959095840231736, ''),\n","  Text(0.8511916161224335, 0.6967588052137411, ''),\n","  Text(0.8505543033538555, 0.6975366492495129, ''),\n","  Text(0.8499162797686749, 0.6983139103470414, ''),\n","  Text(0.8491613361909852, 0.699231739209785, ''),\n","  Text(0.8484054014457779, 0.7001487519074989, ''),\n","  Text(0.8477649908485271, 0.7009240474485071, ''),\n","  Text(0.8470655530793298, 0.7017691563373308, ''),\n","  Text(0.8462484776153483, 0.7027542345185162, ''),\n","  Text(0.8455472153948312, 0.7035978301118098, ''),\n","  Text(0.8449621877939355, 0.7043002919199214, ''),\n","  Text(0.8443179834155788, 0.7050724380381428, ''),\n","  Text(0.8434970665049364, 0.7060543171722464, ''),\n","  Text(0.8426162455746727, 0.707105269881114, ''),\n","  Text(0.8419106459681895, 0.7079452409653066, ''),\n","  Text(0.8412042090278349, 0.7087845079527731, ''),\n","  Text(0.8404969354562056, 0.7096230700088091, ''),\n","  Text(0.8399069022327225, 0.7103213326247722, ''),\n","  Text(0.8393162889113044, 0.7110191046435785, ''),\n","  Text(0.8386659447445085, 0.7117860866340401, ''),\n","  Text(0.8379556790590544, 0.7126221158037963, ''),\n","  Text(0.8371852840977758, 0.713527014267944, ''),\n","  Text(0.8364139119478, 0.7144310798811723, ''),\n","  Text(0.8357604498630016, 0.715195407175405, ''),\n","  Text(0.8351062893249697, 0.7159591367737967, ''),\n","  Text(0.8343918637184111, 0.7167916139021974, ''),\n","  Text(0.833736244545433, 0.7175540917110558, ''),\n","  Text(0.8330202289738001, 0.7183852017688267, ''),\n","  Text(0.8322436105439432, 0.719284764685574, ''),\n","  Text(0.8317053825345947, 0.719907047238033, ''),\n","  Text(0.8311666892342239, 0.7205289270441676, ''),\n","  Text(0.8304477082352812, 0.7213574730234446, ''),\n","  Text(0.8297879167317663, 0.7221163432896083, ''),\n","  Text(0.8291875044830151, 0.722805701699447, ''),\n","  Text(0.8285263895765937, 0.7235634193180129, ''),\n","  Text(0.8278043836581224, 0.7243893306754292, ''),\n","  Text(0.8270815544354333, 0.7252145215814887, ''),\n","  Text(0.8263579026274263, 0.7260389912154865, ''),\n","  Text(0.8256334289538189, 0.7268627387574353, ''),\n","  Text(0.8249081341351464, 0.7276857633880653, ''),\n","  Text(0.8241820188927611, 0.7285080642888262, ''),\n","  Text(0.8234550839488305, 0.7293296406418874, ''),\n","  Text(0.8227273300263379, 0.7301504916301389, ''),\n","  Text(0.8220595034211572, 0.730902300471794, ''),\n","  Text(0.8213301817801001, 0.7317217589337274, ''),\n","  Text(0.8206000432737566, 0.7325404896516703, ''),\n","  Text(0.8199300326892188, 0.7332903527895732, ''),\n","  Text(0.8191373186042636, 0.7341757645617412, ''),\n","  Text(0.8182825572455011, 0.7351283265578625, ''),\n","  Text(0.8174878584035926, 0.7360119573503598, ''),\n","  Text(0.8167534433207956, 0.736826854032631, ''),\n","  Text(0.8160795158711037, 0.7375731989271201, ''),\n","  Text(0.8154049064157285, 0.7383189274244276, ''),\n","  Text(0.8146681916781561, 0.7391317456772125, ''),\n","  Text(0.8139306667011459, 0.7399438288163692, ''),\n","  Text(0.8132538909812196, 0.7406875919062684, ''),\n","  Text(0.8125764356170124, 0.7414307359962571, ''),\n","  Text(0.8117749310795586, 0.7423081983049752, ''),\n","  Text(0.8109107126903116, 0.7432521887247229, ''),\n","  Text(0.8100453965616247, 0.7441951729951762, ''),\n","  Text(0.8091789838648866, 0.7451371498398061, ''),\n","  Text(0.8083114757729704, 0.7460781179834475, ''),\n","  Text(0.807567026458349, 0.746883858292051, ''),\n","  Text(0.8066974871778693, 0.7478229497554295, ''),\n","  Text(0.8057646261689818, 0.748827995747195, ''),\n","  Text(0.8050174357623057, 0.7496311947342388, ''),\n","  Text(0.8043318078522635, 0.7503668055538636, ''),\n","  Text(0.8035830835025363, 0.7511685748941819, ''),\n","  Text(0.802646054265692, 0.7521697358786221, ''),\n","  Text(0.8018955327485713, 0.752969823138939, ''),\n","  Text(0.801269488898802, 0.7536359904886794, ''),\n","  Text(0.8004548045919884, 0.7545012298237836, ''),\n","  Text(0.7995136233065983, 0.7554984885141433, ''),\n","  Text(0.7986969278104612, 0.7563618297522232, ''),\n","  Text(0.7980051495862628, 0.7570916597307136, ''),\n","  Text(0.7972497218676281, 0.7578871162528031, ''),\n","  Text(0.796493501233334, 0.7586818190078534, ''),\n","  Text(0.7956733682787336, 0.759541895494893, ''),\n","  Text(0.794852306589435, 0.7604010854210134, ''),\n","  Text(0.7940935800210919, 0.761193396036307, ''),\n","  Text(0.7932707349981282, 0.7620508782197745, ''),\n","  Text(0.7925103638792721, 0.7628416107842728, ''),\n","  Text(0.7917492045582779, 0.7636315846541016, ''),\n","  Text(0.7909872577921673, 0.7644207990435815, ''),\n","  Text(0.7903517011856912, 0.7650778969705531, ''),\n","  Text(0.7896519584676949, 0.765800094338029, ''),\n","  Text(0.7888878501723697, 0.7665872160755207, ''),\n","  Text(0.7881229572777995, 0.7673735753931693, ''),\n","  Text(0.787229591591102, 0.7682900299517801, ''),\n","  Text(0.7863351602224623, 0.7692054444671558, ''),\n","  Text(0.7856316458962038, 0.7699239683023396, ''),\n","  Text(0.7849915176472716, 0.7705766134667166, ''),\n","  Text(0.7842226481166096, 0.771359085109505, ''),\n","  Text(0.7833888260011544, 0.7722058969578859, ''),\n","  Text(0.7826183324541017, 0.7729867694254289, ''),\n","  Text(0.7819113629011474, 0.7737018938622745, ''),\n","  Text(0.7812037398971715, 0.7744163717088325, ''),\n","  Text(0.7804310429787994, 0.7751950639387635, ''),\n","  Text(0.779657569872016, 0.7759729851877981, ''),\n","  Text(0.7789478716426659, 0.7766854017318474, ''),\n","  Text(0.7782375224389128, 0.7773971691922623, ''),\n","  Text(0.7773971803637714, 0.7782375112794667, ''),\n","  Text(0.7765559308864667, 0.7790769449836475, ''),\n","  Text(0.7757785883919933, 0.779850999738108, ''),\n","  Text(0.7750653466128274, 0.7805598686071029, ''),\n","  Text(0.7744163828872075, 0.7812037288159178, ''),\n","  Text(0.7737668842959458, 0.7818470494712791, ''),\n","  Text(0.7731168512876305, 0.7824898301288649, ''),\n","  Text(0.7724662843112202, 0.7831320703447263, ''),\n","  Text(0.7715545943190962, 0.7840302978744476, ''),\n","  Text(0.7705766246275179, 0.7849915066914175, ''),\n","  Text(0.7698586857166831, 0.7856956179250215, ''),\n","  Text(0.7691401034273678, 0.7863990725450648, ''),\n","  Text(0.768420878360098, 0.7871018699636634, ''),\n","  Text(0.7677010111159372, 0.7878040095934824, ''),\n","  Text(0.7669149697149817, 0.7885692291911147, ''),\n","  Text(0.7659313454080767, 0.7895246507369948, ''),\n","  Text(0.7648808342301515, 0.7905424146922085, ''),\n","  Text(0.7639605275030635, 0.7914318116030218, ''),\n","  Text(0.7631050309495027, 0.7922567208547736, ''),\n","  Text(0.762446350526584, 0.7928906372058466, ''),\n","  Text(0.7616552389385285, 0.7936506139337973, ''),\n","  Text(0.7607313180690716, 0.7945362557548228, ''),\n","  Text(0.7599385662127736, 0.7952945212828227, ''),\n","  Text(0.7590127338338675, 0.7961781646579104, ''),\n","  Text(0.7579533816050519, 0.7971867229912116, ''),\n","  Text(0.7568926892288043, 0.7981938718080895, ''),\n","  Text(0.7558306585805492, 0.7991996093277908, ''),\n","  Text(0.7548337910811262, 0.8001412049395374, ''),\n","  Text(0.7539023230480308, 0.8010189057087121, ''),\n","  Text(0.7529698344484282, 0.801895522129103, ''),\n","  Text(0.752036326544639, 0.8027710530140242, ''),\n","  Text(0.751101800600364, 0.8036454971782592, ''),\n","  Text(0.750099394542699, 0.8045811943531097, ''),\n","  Text(0.7490288766523387, 0.8055778931555506, ''),\n","  Text(0.7481581056052998, 0.8063866622266821, ''),\n","  Text(0.7474876874247476, 0.807008151847553, ''),\n","  Text(0.7466825041692717, 0.8077532036256531, ''),\n","  Text(0.7458093843198091, 0.808559436442682, ''),\n","  Text(0.7449353939384408, 0.8093647254839934, ''),\n","  Text(0.7441278617929338, 0.8101072307438546, ''),\n","  Text(0.7433195895647748, 0.8108489303003703, ''),\n","  Text(0.7425105780578426, 0.8115898234158735, ''),\n","  Text(0.7417008280767505, 0.8123299093534982, ''),\n","  Text(0.7407551874844547, 0.8131923217879461, ''),\n","  Text(0.7399438402397807, 0.81393065631613, ''),\n","  Text(0.7392671553456633, 0.8145453167424948, ''),\n","  Text(0.7384544595287449, 0.8152821666160187, ''),\n","  Text(0.7376410292717354, 0.8160182056393932, ''),\n","  Text(0.7367589853186131, 0.8168146653631336, ''),\n","  Text(0.7357401737535214, 0.8177324725881553, ''),\n","  Text(0.7348562788422579, 0.8185268776565068, ''),\n","  Text(0.7340396145328028, 0.8192593266460472, ''),\n","  Text(0.7332903642222167, 0.8199300224646302, ''),\n","  Text(0.7325405010936561, 0.8206000330596236, ''),\n","  Text(0.7316535099817681, 0.821390979577545, ''),\n","  Text(0.7306289975618913, 0.8223024187740822, ''),\n","  Text(0.7296033497402605, 0.8232125801078306, ''),\n","  Text(0.7287135377870969, 0.8240003518481127, ''),\n","  Text(0.7279599555915647, 0.8246661767376708, ''),\n","  Text(0.7272743529194983, 0.8252708740683421, ''),\n","  Text(0.7265196098500382, 0.8259353827651099, ''),\n","  Text(0.7259016411687569, 0.8264785583114093, ''),\n","  Text(0.725351994727511, 0.8269609928798463, ''),\n","  Text(0.7245269239486416, 0.8276839592945603, ''),\n","  Text(0.7234257087910375, 0.8286466338917846, ''),\n","  Text(0.7223921578838226, 0.8295478106944496, ''),\n","  Text(0.7215645088380698, 0.8302678240093828, ''),\n","  Text(0.7205980113102517, 0.8311067958425744, ''),\n","  Text(0.7195613957684848, 0.8320044457331405, ''),\n","  Text(0.7186620910802556, 0.8327813631705231, ''),\n","  Text(0.7178312191385274, 0.8334976549637652, ''),\n","  Text(0.7169996332679026, 0.834213117790468, ''),\n","  Text(0.7161673342954462, 0.8349277509390587, ''),\n","  Text(0.7152648732942917, 0.8357009997788091, ''),\n","  Text(0.7143615774137348, 0.8364732731623652, ''),\n","  Text(0.7134574477081306, 0.8372445701883056, ''),\n","  Text(0.7125524852328073, 0.838014889956348, ''),\n","  Text(0.7116466910440655, 0.8387842315673517, ''),\n","  Text(0.7107400661991762, 0.839552594123317, ''),\n","  Text(0.70983261175638, 0.8403199767273871, ''),\n","  Text(0.7089942260732047, 0.8410274593584074, ''),\n","  Text(0.7081551352500207, 0.8417341055339418, ''),\n","  Text(0.707175305844653, 0.8425574679530895, ''),\n","  Text(0.7062646070630739, 0.8433209974914901, ''),\n","  Text(0.7054232303405511, 0.8440249203050239, ''),\n","  Text(0.704581152029667, 0.8447280036819825, ''),\n","  Text(0.7037383729679224, 0.8454302469231045, ''),\n","  Text(0.7028948939935148, 0.8461316493299643, ''),\n","  Text(0.7019803362197451, 0.8468905522916251, ''),\n","  Text(0.7010649590726977, 0.8476484667362979, ''),\n","  Text(0.7002897699958401, 0.8482890061996403, ''),\n","  Text(0.6995139956799296, 0.8489288367395111, ''),\n","  Text(0.6985258011569523, 0.8497421403684992, ''),\n","  Text(0.6976780245985865, 0.8504383422636906, ''),\n","  Text(0.697112454682438, 0.850902007005875, ''),\n","  Text(0.6962635221173527, 0.8515967988248542, ''),\n","  Text(0.6954138970737881, 0.8522907436765034, ''),\n","  Text(0.6947762243555374, 0.8528106460816869, ''),\n","  Text(0.6940672432566101, 0.8533877558520334, ''),\n","  Text(0.693357782786727, 0.853964276213633, ''),\n","  Text(0.6926478434358907, 0.8545402067683006, ''),\n","  Text(0.6919374256944347, 0.8551155471182588, ''),\n","  Text(0.6912976411125825, 0.8556328484765994, ''),\n","  Text(0.690657469789689, 0.8561496711578561, ''),\n","  Text(0.6898033070346344, 0.8568380229682165, ''),\n","  Text(0.688877189900752, 0.8575827757333069, ''),\n","  Text(0.6880215988664504, 0.8582693513654402, ''),\n","  Text(0.6870939363873275, 0.8590121783652239, ''),\n","  Text(0.6860940183545009, 0.8598110245735244, ''),\n","  Text(0.6851646914004431, 0.8605517681453777, ''),\n","  Text(0.6843061413013715, 0.8612346399078638, ''),\n","  Text(0.6834469106162296, 0.8619166551176114, ''),\n","  Text(0.6824436157586886, 0.8627112560470087, ''),\n","  Text(0.681511157569814, 0.8634480540877096, ''),\n","  Text(0.680793340673179, 0.8640141360504775, ''),\n","  Text(0.6799313397648986, 0.8646926466701971, ''),\n","  Text(0.6790686626215048, 0.8653702972978915, ''),\n","  Text(0.6783492490590939, 0.8659343487245228, ''),\n","  Text(0.6774853343801998, 0.8666104209503537, ''),\n","  Text(0.6766207458989008, 0.8672856312768104, ''),\n","  Text(0.6758276152985523, 0.8679038163298237, ''),\n","  Text(0.6750339199024141, 0.8685212760670755, ''),\n","  Text(0.6743118890648401, 0.8690819732716857, ''),\n","  Text(0.6735893925007272, 0.8696420702280343, ''),\n","  Text(0.6728664307090823, 0.8702015665492794, ''),\n","  Text(0.6721430041892323, 0.8707604618489942, ''),\n","  Text(0.6713466988685952, 0.8713745520258437, ''),\n","  Text(0.6704048874650063, 0.8720993560730524, ''),\n","  Text(0.6695348285099836, 0.8727675024954281, ''),\n","  Text(0.6687366894996777, 0.8733792075135588, ''),\n","  Text(0.6677927138205323, 0.8741011905770457, ''),\n","  Text(0.666775252921404, 0.8748775697728214, ''),\n","  Text(0.6657568894007156, 0.8756527646364646, ''),\n","  Text(0.6647376246370376, 0.876426774118585, ''),\n","  Text(0.6638632528610655, 0.8770892665519999, ''),\n","  Text(0.6631341053232032, 0.8776406772462151, ''),\n","  Text(0.662477480933322, 0.8781364286124566, ''),\n","  Text(0.6618204859256122, 0.8786316887121627, ''),\n","  Text(0.6610900572399544, 0.8791814012014096, ''),\n","  Text(0.6602860583544595, 0.8797853835696132, ''),\n","  Text(0.6594083393648236, 0.8804434348532141, ''),\n","  Text(0.6586031874667521, 0.8810458793153932, ''),\n","  Text(0.6577974851675149, 0.8816475874788595, ''),\n","  Text(0.6569912331404453, 0.8822485588407596, ''),\n","  Text(0.656257800267945, 0.8827942566575059, ''),\n","  Text(0.6553770825580505, 0.8834482891814882, ''),\n","  Text(0.6543487547970781, 0.8842102165749463, ''),\n","  Text(0.6533930858602045, 0.8849166488150619, ''),\n","  Text(0.6525102530001812, 0.8855678233368913, ''),\n","  Text(0.6515531183989277, 0.886272268495767, ''),\n","  Text(0.6505952232846134, 0.886975679170091, ''),\n","  Text(0.6497103383901633, 0.8876240624211016, ''),\n","  Text(0.648824807317374, 0.8882715628734112, ''),\n","  Text(0.6480125035895664, 0.8888643289004134, ''),\n","  Text(0.6471996583113319, 0.8894563520947476, ''),\n","  Text(0.646312301184807, 0.8901013477897893, ''),\n","  Text(0.6453502722510405, 0.8907990941315039, ''),\n","  Text(0.6443133986811084, 0.8915493504456157, ''),\n","  Text(0.6432756528964944, 0.892298399858808, ''),\n","  Text(0.6422370363020071, 0.8930462413570837, ''),\n","  Text(0.6412718281291441, 0.8937395831269339, ''),\n","  Text(0.6403058714438622, 0.8944318816961504, ''),\n","  Text(0.6393391673736558, 0.895123136256661, ''),\n","  Text(0.6385206040958423, 0.8957072279182975, ''),\n","  Text(0.6377015072000756, 0.8962905710285878, ''),\n","  Text(0.636881877370883, 0.8968731651000267, ''),\n","  Text(0.6359871287094494, 0.897507867439562, ''),\n","  Text(0.6350917475182253, 0.8981416771502406, ''),\n","  Text(0.6342704265509357, 0.8987218846800685, ''),\n","  Text(0.6332990911502051, 0.8994066161355077, ''),\n","  Text(0.632327016543082, 0.9000902977755759, ''),\n","  Text(0.6314290618119656, 0.900720456023544, ''),\n","  Text(0.6306053849288047, 0.9012973141526576, ''),\n","  Text(0.629781181042517, 0.901873419058735, ''),\n","  Text(0.6288814493097034, 0.9025010375141557, ''),\n","  Text(0.6279810921142078, 0.9031277583747755, ''),\n","  Text(0.6271552159844175, 0.9037014634620987, ''),\n","  Text(0.6262536624475699, 0.9043264622198144, ''),\n","  Text(0.625276276626616, 0.9050025292163308, ''),\n","  Text(0.6245239446963226, 0.9055218619674209, ''),\n","  Text(0.6238464771344667, 0.9059887267327973, ''),\n","  Text(0.6231686605665941, 0.906455084649889, ''),\n","  Text(0.6224151221960336, 0.9069726653332485, ''),\n","  Text(0.6215103087599063, 0.9075929352441908, ''),\n","  Text(0.6206803533961958, 0.908160723059511, ''),\n","  Text(0.6198498793238051, 0.9087277519159765, ''),\n","  Text(0.6189433168540225, 0.9093454626937671, ''),\n","  Text(0.6179605128489779, 0.91001362877675, ''),\n","  ...])"]},"metadata":{},"execution_count":16},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plt.figure(figsize=(10,7))\n","plt.scatter(x=\"type\",y=\"alcohol\",data =train,marker= 'o',c=\"m\")\n","plt.xlabel(\"type\",fontsize=15)\n","plt.ylabel(\"alcohol\",fontsize=15)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"iDzKz95_MF_z","executionInfo":{"status":"ok","timestamp":1655962355256,"user_tz":-330,"elapsed":529,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"d851e59e-7289-48c4-fd83-6d85320f41ee"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x504 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"dark"}}]},{"cell_type":"code","source":["plt.figure(figsize=(10,7))\n","plt.scatter(x=\"volatile acidity\",y=\"alcohol\",data =train,marker= 'o',c=\"m\")\n","plt.xlabel(\"volatile_acidity\",fontsize=15)\n","plt.ylabel(\"alcohol\",fontsize=15)\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":449},"id":"MwwR_tzBCDs0","executionInfo":{"status":"ok","timestamp":1655962154907,"user_tz":-330,"elapsed":961,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"6e906c1f-c682-4ec0-e293-12530b15e6bf"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 720x504 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"dark"}}]},{"cell_type":"markdown","source":["##**Train-Val Split**"],"metadata":{"id":"9zL0NJkRLz15"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","train,val=train_test_split(train,test_size=0.2,shuffle=True,stratify=train['quality'])\n","# train\n","val"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":502},"id":"D-Lch2nEMKlI","executionInfo":{"status":"ok","timestamp":1655962467769,"user_tz":-330,"elapsed":587,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"a9fa0894-3931-4667-a3fd-22e885569098"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      type  fixed acidity  volatile acidity  citric acid  residual sugar  \\\n","6207     0            7.0              0.62         0.10             1.4   \n","657      1            7.3              0.34         0.21             3.2   \n","3249     1            6.4              0.23         0.35             4.6   \n","202      1            6.9              0.54         0.32            13.2   \n","1825     1            7.1              0.32         0.40             1.5   \n","...    ...            ...               ...          ...             ...   \n","4078     1            5.8              0.23         0.21             1.5   \n","2435     1            6.4              0.35         0.35             5.6   \n","5585     0            9.1              0.64         0.23             3.1   \n","6075     0            7.1              0.66         0.00             2.4   \n","4        1            7.2              0.23         0.32             8.5   \n","\n","      chlorides  free sulfur dioxide  total sulfur dioxide  density    pH  \\\n","6207      0.071                 27.0                  63.0  0.99600  3.28   \n","657       0.050                 14.0                 136.0  0.99360  3.25   \n","3249      0.039                 43.0                 147.0  0.99216  3.18   \n","202       0.050                 53.0                 236.0  0.99730  3.20   \n","1825      0.034                 13.0                  84.0  0.99440  3.42   \n","...         ...                  ...                   ...      ...   ...   \n","4078      0.044                 21.0                 110.0  0.99138  3.30   \n","2435      0.034                  9.0                 148.0  0.99441  3.17   \n","5585      0.095                 13.0                  38.0  0.99980  3.28   \n","6075      0.052                  6.0                  11.0  0.99318  3.35   \n","4         0.058                 47.0                 186.0  0.99560  3.19   \n","\n","      sulphates  alcohol  quality  \n","6207       0.61      9.2        5  \n","657        0.44     10.2        5  \n","3249       0.40     11.0        7  \n","202        0.50      9.6        5  \n","1825       0.60     10.4        5  \n","...         ...      ...      ...  \n","4078       0.57     11.0        6  \n","2435       0.50      9.8        4  \n","5585       0.59      9.7        5  \n","6075       0.66     12.7        7  \n","4          0.40      9.9        6  \n","\n","[1040 rows x 13 columns]"],"text/html":["\n","  <div id=\"df-8c130deb-a37e-4534-a8fa-148db8984722\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>type</th>\n","      <th>fixed acidity</th>\n","      <th>volatile acidity</th>\n","      <th>citric acid</th>\n","      <th>residual sugar</th>\n","      <th>chlorides</th>\n","      <th>free sulfur dioxide</th>\n","      <th>total sulfur dioxide</th>\n","      <th>density</th>\n","      <th>pH</th>\n","      <th>sulphates</th>\n","      <th>alcohol</th>\n","      <th>quality</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>6207</th>\n","      <td>0</td>\n","      <td>7.0</td>\n","      <td>0.62</td>\n","      <td>0.10</td>\n","      <td>1.4</td>\n","      <td>0.071</td>\n","      <td>27.0</td>\n","      <td>63.0</td>\n","      <td>0.99600</td>\n","      <td>3.28</td>\n","      <td>0.61</td>\n","      <td>9.2</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>657</th>\n","      <td>1</td>\n","      <td>7.3</td>\n","      <td>0.34</td>\n","      <td>0.21</td>\n","      <td>3.2</td>\n","      <td>0.050</td>\n","      <td>14.0</td>\n","      <td>136.0</td>\n","      <td>0.99360</td>\n","      <td>3.25</td>\n","      <td>0.44</td>\n","      <td>10.2</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>3249</th>\n","      <td>1</td>\n","      <td>6.4</td>\n","      <td>0.23</td>\n","      <td>0.35</td>\n","      <td>4.6</td>\n","      <td>0.039</td>\n","      <td>43.0</td>\n","      <td>147.0</td>\n","      <td>0.99216</td>\n","      <td>3.18</td>\n","      <td>0.40</td>\n","      <td>11.0</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>202</th>\n","      <td>1</td>\n","      <td>6.9</td>\n","      <td>0.54</td>\n","      <td>0.32</td>\n","      <td>13.2</td>\n","      <td>0.050</td>\n","      <td>53.0</td>\n","      <td>236.0</td>\n","      <td>0.99730</td>\n","      <td>3.20</td>\n","      <td>0.50</td>\n","      <td>9.6</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>1825</th>\n","      <td>1</td>\n","      <td>7.1</td>\n","      <td>0.32</td>\n","      <td>0.40</td>\n","      <td>1.5</td>\n","      <td>0.034</td>\n","      <td>13.0</td>\n","      <td>84.0</td>\n","      <td>0.99440</td>\n","      <td>3.42</td>\n","      <td>0.60</td>\n","      <td>10.4</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>4078</th>\n","      <td>1</td>\n","      <td>5.8</td>\n","      <td>0.23</td>\n","      <td>0.21</td>\n","      <td>1.5</td>\n","      <td>0.044</td>\n","      <td>21.0</td>\n","      <td>110.0</td>\n","      <td>0.99138</td>\n","      <td>3.30</td>\n","      <td>0.57</td>\n","      <td>11.0</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>2435</th>\n","      <td>1</td>\n","      <td>6.4</td>\n","      <td>0.35</td>\n","      <td>0.35</td>\n","      <td>5.6</td>\n","      <td>0.034</td>\n","      <td>9.0</td>\n","      <td>148.0</td>\n","      <td>0.99441</td>\n","      <td>3.17</td>\n","      <td>0.50</td>\n","      <td>9.8</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>5585</th>\n","      <td>0</td>\n","      <td>9.1</td>\n","      <td>0.64</td>\n","      <td>0.23</td>\n","      <td>3.1</td>\n","      <td>0.095</td>\n","      <td>13.0</td>\n","      <td>38.0</td>\n","      <td>0.99980</td>\n","      <td>3.28</td>\n","      <td>0.59</td>\n","      <td>9.7</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>6075</th>\n","      <td>0</td>\n","      <td>7.1</td>\n","      <td>0.66</td>\n","      <td>0.00</td>\n","      <td>2.4</td>\n","      <td>0.052</td>\n","      <td>6.0</td>\n","      <td>11.0</td>\n","      <td>0.99318</td>\n","      <td>3.35</td>\n","      <td>0.66</td>\n","      <td>12.7</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>7.2</td>\n","      <td>0.23</td>\n","      <td>0.32</td>\n","      <td>8.5</td>\n","      <td>0.058</td>\n","      <td>47.0</td>\n","      <td>186.0</td>\n","      <td>0.99560</td>\n","      <td>3.19</td>\n","      <td>0.40</td>\n","      <td>9.9</td>\n","      <td>6</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1040 rows × 13 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8c130deb-a37e-4534-a8fa-148db8984722')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-8c130deb-a37e-4534-a8fa-148db8984722 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-8c130deb-a37e-4534-a8fa-148db8984722');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":22}]},{"cell_type":"markdown","source":["##**Splitting X & y**"],"metadata":{"id":"fnhrCtwkFnn4"}},{"cell_type":"code","source":["y=train['quality']\n","# print(y)\n","X=train.drop(['quality'],axis=1)\n","X"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":502},"id":"Y06GGaPdFv3P","executionInfo":{"status":"ok","timestamp":1655962488707,"user_tz":-330,"elapsed":550,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"c6b1d0f9-9398-4025-ebbe-5d3ba522c51e"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      type  fixed acidity  volatile acidity  citric acid  residual sugar  \\\n","2745     1            6.7             0.440         0.22             4.3   \n","3256     1            7.4             0.190         0.31            14.5   \n","667      1            7.1             0.170         0.38             7.4   \n","3720     1            6.3             0.340         0.27             2.5   \n","2085     1            7.9             0.170         0.32             1.6   \n","...    ...            ...               ...          ...             ...   \n","4635     1            5.8             0.345         0.15            10.8   \n","6084     0            6.6             0.800         0.03             7.8   \n","4920     0            7.9             0.430         0.21             1.6   \n","3994     1            6.7             0.280         0.34             8.9   \n","6371     0            6.1             0.600         0.08             1.8   \n","\n","      chlorides  free sulfur dioxide  total sulfur dioxide  density    pH  \\\n","2745      0.032                 19.0                  99.0  0.99015  3.26   \n","3256      0.045                 39.0                 193.0  0.99860  3.10   \n","667       0.052                 49.0                 182.0  0.99580  3.35   \n","3720      0.024                 40.0                 152.0  0.99095  3.35   \n","2085      0.053                 47.0                 150.0  0.99480  3.29   \n","...         ...                  ...                   ...      ...   ...   \n","4635      0.033                 26.0                 120.0  0.99494  3.25   \n","6084      0.079                  6.0                  12.0  0.99630  3.52   \n","4920      0.106                 10.0                  37.0  0.99660  3.17   \n","3994      0.048                 32.0                 111.0  0.99455  3.25   \n","6371      0.071                 14.0                  45.0  0.99336  3.38   \n","\n","      sulphates  alcohol  \n","2745       0.53     12.8  \n","3256       0.50      9.2  \n","667        0.52      9.6  \n","3720       0.60     11.9  \n","2085       0.76      9.6  \n","...         ...      ...  \n","4635       0.49     10.0  \n","6084       0.50     12.2  \n","4920       0.91      9.5  \n","3994       0.54     11.0  \n","6371       0.54     11.0  \n","\n","[4157 rows x 12 columns]"],"text/html":["\n","  <div id=\"df-4baf83d2-506c-40de-be47-f3c7408a5b38\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>type</th>\n","      <th>fixed acidity</th>\n","      <th>volatile acidity</th>\n","      <th>citric acid</th>\n","      <th>residual sugar</th>\n","      <th>chlorides</th>\n","      <th>free sulfur dioxide</th>\n","      <th>total sulfur dioxide</th>\n","      <th>density</th>\n","      <th>pH</th>\n","      <th>sulphates</th>\n","      <th>alcohol</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2745</th>\n","      <td>1</td>\n","      <td>6.7</td>\n","      <td>0.440</td>\n","      <td>0.22</td>\n","      <td>4.3</td>\n","      <td>0.032</td>\n","      <td>19.0</td>\n","      <td>99.0</td>\n","      <td>0.99015</td>\n","      <td>3.26</td>\n","      <td>0.53</td>\n","      <td>12.8</td>\n","    </tr>\n","    <tr>\n","      <th>3256</th>\n","      <td>1</td>\n","      <td>7.4</td>\n","      <td>0.190</td>\n","      <td>0.31</td>\n","      <td>14.5</td>\n","      <td>0.045</td>\n","      <td>39.0</td>\n","      <td>193.0</td>\n","      <td>0.99860</td>\n","      <td>3.10</td>\n","      <td>0.50</td>\n","      <td>9.2</td>\n","    </tr>\n","    <tr>\n","      <th>667</th>\n","      <td>1</td>\n","      <td>7.1</td>\n","      <td>0.170</td>\n","      <td>0.38</td>\n","      <td>7.4</td>\n","      <td>0.052</td>\n","      <td>49.0</td>\n","      <td>182.0</td>\n","      <td>0.99580</td>\n","      <td>3.35</td>\n","      <td>0.52</td>\n","      <td>9.6</td>\n","    </tr>\n","    <tr>\n","      <th>3720</th>\n","      <td>1</td>\n","      <td>6.3</td>\n","      <td>0.340</td>\n","      <td>0.27</td>\n","      <td>2.5</td>\n","      <td>0.024</td>\n","      <td>40.0</td>\n","      <td>152.0</td>\n","      <td>0.99095</td>\n","      <td>3.35</td>\n","      <td>0.60</td>\n","      <td>11.9</td>\n","    </tr>\n","    <tr>\n","      <th>2085</th>\n","      <td>1</td>\n","      <td>7.9</td>\n","      <td>0.170</td>\n","      <td>0.32</td>\n","      <td>1.6</td>\n","      <td>0.053</td>\n","      <td>47.0</td>\n","      <td>150.0</td>\n","      <td>0.99480</td>\n","      <td>3.29</td>\n","      <td>0.76</td>\n","      <td>9.6</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>4635</th>\n","      <td>1</td>\n","      <td>5.8</td>\n","      <td>0.345</td>\n","      <td>0.15</td>\n","      <td>10.8</td>\n","      <td>0.033</td>\n","      <td>26.0</td>\n","      <td>120.0</td>\n","      <td>0.99494</td>\n","      <td>3.25</td>\n","      <td>0.49</td>\n","      <td>10.0</td>\n","    </tr>\n","    <tr>\n","      <th>6084</th>\n","      <td>0</td>\n","      <td>6.6</td>\n","      <td>0.800</td>\n","      <td>0.03</td>\n","      <td>7.8</td>\n","      <td>0.079</td>\n","      <td>6.0</td>\n","      <td>12.0</td>\n","      <td>0.99630</td>\n","      <td>3.52</td>\n","      <td>0.50</td>\n","      <td>12.2</td>\n","    </tr>\n","    <tr>\n","      <th>4920</th>\n","      <td>0</td>\n","      <td>7.9</td>\n","      <td>0.430</td>\n","      <td>0.21</td>\n","      <td>1.6</td>\n","      <td>0.106</td>\n","      <td>10.0</td>\n","      <td>37.0</td>\n","      <td>0.99660</td>\n","      <td>3.17</td>\n","      <td>0.91</td>\n","      <td>9.5</td>\n","    </tr>\n","    <tr>\n","      <th>3994</th>\n","      <td>1</td>\n","      <td>6.7</td>\n","      <td>0.280</td>\n","      <td>0.34</td>\n","      <td>8.9</td>\n","      <td>0.048</td>\n","      <td>32.0</td>\n","      <td>111.0</td>\n","      <td>0.99455</td>\n","      <td>3.25</td>\n","      <td>0.54</td>\n","      <td>11.0</td>\n","    </tr>\n","    <tr>\n","      <th>6371</th>\n","      <td>0</td>\n","      <td>6.1</td>\n","      <td>0.600</td>\n","      <td>0.08</td>\n","      <td>1.8</td>\n","      <td>0.071</td>\n","      <td>14.0</td>\n","      <td>45.0</td>\n","      <td>0.99336</td>\n","      <td>3.38</td>\n","      <td>0.54</td>\n","      <td>11.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>4157 rows × 12 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4baf83d2-506c-40de-be47-f3c7408a5b38')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-4baf83d2-506c-40de-be47-f3c7408a5b38 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-4baf83d2-506c-40de-be47-f3c7408a5b38');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":23}]},{"cell_type":"markdown","source":["##**Train-Val-Test Split**\n","\n","It splits the train data"],"metadata":{"id":"k7Ci_4e2KB0f"}},{"cell_type":"code","source":["from sklearn.model_selection import train_test_split\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25,shuffle=True)\n","# X_train\n","# y_train\n","# X_test\n","# y_test\n","\n","y_val=val['quality']\n","# y_val\n","X_val=val.drop(['quality'],axis=1)\n","X_val"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":502},"id":"Brd9YPISKO6v","executionInfo":{"status":"ok","timestamp":1655962567486,"user_tz":-330,"elapsed":641,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"22d89311-b6c7-45f0-fee9-a7f20651e214"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      type  fixed acidity  volatile acidity  citric acid  residual sugar  \\\n","6207     0            7.0              0.62         0.10             1.4   \n","657      1            7.3              0.34         0.21             3.2   \n","3249     1            6.4              0.23         0.35             4.6   \n","202      1            6.9              0.54         0.32            13.2   \n","1825     1            7.1              0.32         0.40             1.5   \n","...    ...            ...               ...          ...             ...   \n","4078     1            5.8              0.23         0.21             1.5   \n","2435     1            6.4              0.35         0.35             5.6   \n","5585     0            9.1              0.64         0.23             3.1   \n","6075     0            7.1              0.66         0.00             2.4   \n","4        1            7.2              0.23         0.32             8.5   \n","\n","      chlorides  free sulfur dioxide  total sulfur dioxide  density    pH  \\\n","6207      0.071                 27.0                  63.0  0.99600  3.28   \n","657       0.050                 14.0                 136.0  0.99360  3.25   \n","3249      0.039                 43.0                 147.0  0.99216  3.18   \n","202       0.050                 53.0                 236.0  0.99730  3.20   \n","1825      0.034                 13.0                  84.0  0.99440  3.42   \n","...         ...                  ...                   ...      ...   ...   \n","4078      0.044                 21.0                 110.0  0.99138  3.30   \n","2435      0.034                  9.0                 148.0  0.99441  3.17   \n","5585      0.095                 13.0                  38.0  0.99980  3.28   \n","6075      0.052                  6.0                  11.0  0.99318  3.35   \n","4         0.058                 47.0                 186.0  0.99560  3.19   \n","\n","      sulphates  alcohol  \n","6207       0.61      9.2  \n","657        0.44     10.2  \n","3249       0.40     11.0  \n","202        0.50      9.6  \n","1825       0.60     10.4  \n","...         ...      ...  \n","4078       0.57     11.0  \n","2435       0.50      9.8  \n","5585       0.59      9.7  \n","6075       0.66     12.7  \n","4          0.40      9.9  \n","\n","[1040 rows x 12 columns]"],"text/html":["\n","  <div id=\"df-19c19542-6c53-4cf8-94e1-ee3adb5d3957\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>type</th>\n","      <th>fixed acidity</th>\n","      <th>volatile acidity</th>\n","      <th>citric acid</th>\n","      <th>residual sugar</th>\n","      <th>chlorides</th>\n","      <th>free sulfur dioxide</th>\n","      <th>total sulfur dioxide</th>\n","      <th>density</th>\n","      <th>pH</th>\n","      <th>sulphates</th>\n","      <th>alcohol</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>6207</th>\n","      <td>0</td>\n","      <td>7.0</td>\n","      <td>0.62</td>\n","      <td>0.10</td>\n","      <td>1.4</td>\n","      <td>0.071</td>\n","      <td>27.0</td>\n","      <td>63.0</td>\n","      <td>0.99600</td>\n","      <td>3.28</td>\n","      <td>0.61</td>\n","      <td>9.2</td>\n","    </tr>\n","    <tr>\n","      <th>657</th>\n","      <td>1</td>\n","      <td>7.3</td>\n","      <td>0.34</td>\n","      <td>0.21</td>\n","      <td>3.2</td>\n","      <td>0.050</td>\n","      <td>14.0</td>\n","      <td>136.0</td>\n","      <td>0.99360</td>\n","      <td>3.25</td>\n","      <td>0.44</td>\n","      <td>10.2</td>\n","    </tr>\n","    <tr>\n","      <th>3249</th>\n","      <td>1</td>\n","      <td>6.4</td>\n","      <td>0.23</td>\n","      <td>0.35</td>\n","      <td>4.6</td>\n","      <td>0.039</td>\n","      <td>43.0</td>\n","      <td>147.0</td>\n","      <td>0.99216</td>\n","      <td>3.18</td>\n","      <td>0.40</td>\n","      <td>11.0</td>\n","    </tr>\n","    <tr>\n","      <th>202</th>\n","      <td>1</td>\n","      <td>6.9</td>\n","      <td>0.54</td>\n","      <td>0.32</td>\n","      <td>13.2</td>\n","      <td>0.050</td>\n","      <td>53.0</td>\n","      <td>236.0</td>\n","      <td>0.99730</td>\n","      <td>3.20</td>\n","      <td>0.50</td>\n","      <td>9.6</td>\n","    </tr>\n","    <tr>\n","      <th>1825</th>\n","      <td>1</td>\n","      <td>7.1</td>\n","      <td>0.32</td>\n","      <td>0.40</td>\n","      <td>1.5</td>\n","      <td>0.034</td>\n","      <td>13.0</td>\n","      <td>84.0</td>\n","      <td>0.99440</td>\n","      <td>3.42</td>\n","      <td>0.60</td>\n","      <td>10.4</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>4078</th>\n","      <td>1</td>\n","      <td>5.8</td>\n","      <td>0.23</td>\n","      <td>0.21</td>\n","      <td>1.5</td>\n","      <td>0.044</td>\n","      <td>21.0</td>\n","      <td>110.0</td>\n","      <td>0.99138</td>\n","      <td>3.30</td>\n","      <td>0.57</td>\n","      <td>11.0</td>\n","    </tr>\n","    <tr>\n","      <th>2435</th>\n","      <td>1</td>\n","      <td>6.4</td>\n","      <td>0.35</td>\n","      <td>0.35</td>\n","      <td>5.6</td>\n","      <td>0.034</td>\n","      <td>9.0</td>\n","      <td>148.0</td>\n","      <td>0.99441</td>\n","      <td>3.17</td>\n","      <td>0.50</td>\n","      <td>9.8</td>\n","    </tr>\n","    <tr>\n","      <th>5585</th>\n","      <td>0</td>\n","      <td>9.1</td>\n","      <td>0.64</td>\n","      <td>0.23</td>\n","      <td>3.1</td>\n","      <td>0.095</td>\n","      <td>13.0</td>\n","      <td>38.0</td>\n","      <td>0.99980</td>\n","      <td>3.28</td>\n","      <td>0.59</td>\n","      <td>9.7</td>\n","    </tr>\n","    <tr>\n","      <th>6075</th>\n","      <td>0</td>\n","      <td>7.1</td>\n","      <td>0.66</td>\n","      <td>0.00</td>\n","      <td>2.4</td>\n","      <td>0.052</td>\n","      <td>6.0</td>\n","      <td>11.0</td>\n","      <td>0.99318</td>\n","      <td>3.35</td>\n","      <td>0.66</td>\n","      <td>12.7</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1</td>\n","      <td>7.2</td>\n","      <td>0.23</td>\n","      <td>0.32</td>\n","      <td>8.5</td>\n","      <td>0.058</td>\n","      <td>47.0</td>\n","      <td>186.0</td>\n","      <td>0.99560</td>\n","      <td>3.19</td>\n","      <td>0.40</td>\n","      <td>9.9</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1040 rows × 12 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-19c19542-6c53-4cf8-94e1-ee3adb5d3957')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-19c19542-6c53-4cf8-94e1-ee3adb5d3957 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-19c19542-6c53-4cf8-94e1-ee3adb5d3957');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":24}]},{"cell_type":"markdown","source":["##**Build the Model**\n","The TensorFlow tf.keras API is the preferred way to create models and layers. This makes it easy to build models and experiment while Keras handles the complexity of connecting everything together.\n","\n","The tf.keras.Sequential model is a linear stack of layers. "],"metadata":{"id":"RKfjHAjz-Wo2"}},{"cell_type":"code","source":["model=tf.keras.Sequential([\n","tf.keras.layers.Dense(12,activation='relu',input_shape=(12,)),\n","tf.keras.layers.Dense(12,activation='relu'),\n","tf.keras.layers.Dense(1,activation='softmax'),             \n","])"],"metadata":{"id":"kWaoZZ57D7lf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##**Compile the Model**"],"metadata":{"id":"CekYGxgFPVKZ"}},{"cell_type":"code","source":["model.compile(\n","    optimizer='adam',\n","    loss=tf.keras.losses.CategoricalCrossentropy(from_logits=True),\n","    metrics=['categorical_accuracy']\n",")"],"metadata":{"id":"VAM5mN9hOtkU"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"DChI3pKURs0w","executionInfo":{"status":"ok","timestamp":1655962698599,"user_tz":-330,"elapsed":10,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"3e315212-bce1-4511-8ca7-3f3824a42494"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential_1\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," dense_3 (Dense)             (None, 12)                156       \n","                                                                 \n"," dense_4 (Dense)             (None, 12)                156       \n","                                                                 \n"," dense_5 (Dense)             (None, 1)                 13        \n","                                                                 \n","=================================================================\n","Total params: 325\n","Trainable params: 325\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","source":["##**Train the Model**"],"metadata":{"id":"-zMH_NJ8SgzJ"}},{"cell_type":"code","source":["hist=model.fit(\n","    x=X_train, # Input data\n","    y=y_train, # Target data\n","    # batch_size=None, #  Number of samples per gradient update\n","    epochs=5, # Number of epochs to train the model\n","    # verbose='auto', # 'auto', 0, 1, or 2. Verbosity mode. 0 = silent, 1 = progress bar, 2\n","    # callbacks=None, # List of keras.callbacks.Callback instances\n","    # validation_split=0.0, # Float between 0 and 1. Fraction of the training data to be used as validation data\n","    validation_data=(X_val,y_val), # Data on which to evaluate the loss and any model metrics at the end of each epoch\n","    shuffle=True, # Boolean (whether to shuffle the training data before each epoch) or str (for 'batch')\n","    # class_weight=None, # Optional dictionary mapping class indices (integers) to a weight (float) value, used for weighting the loss function (during training only)\n","    # sample_weight=None, #  Optional Numpy array of weights for the training samples\n","    # initial_epoch=0, #  Epoch at which to start training (useful for resuming a previous training run)\n","    # steps_per_epoch=None,\n","    # validation_steps=None, # Total number of steps (batches of samples) to draw before stopping when performing validation at the end of every epoch\n","    # validation_batch_size=None, # Integer or None. Number of samples per validation batch\n","    # validation_freq=1, #  How many training epochs to run before a new validation run is performed\n","    # max_queue_size=10, # Maximum size for the generator queuy\n","    # workers=1, # Maximum number of processes to spin up when using process-based threading\n","    # use_multiprocessing=False # If True, use process-based threading.\n","    )"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8fmTPvZISKT1","executionInfo":{"status":"ok","timestamp":1655964709460,"user_tz":-330,"elapsed":2510,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"58b0d642-a826-4a71-ffcc-6fbf50f5992f"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/util/dispatch.py:1082: UserWarning: \"`categorical_crossentropy` received `from_logits=True`, but the `output` argument was produced by a sigmoid or softmax activation and thus does not represent logits. Was this intended?\"\n","  return dispatch_target(*args, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["98/98 [==============================] - 1s 4ms/step - loss: 0.0000e+00 - categorical_accuracy: 1.0000 - val_loss: 0.0000e+00 - val_categorical_accuracy: 1.0000\n","Epoch 2/5\n"," 1/98 [..............................] - ETA: 0s - loss: 0.0000e+00 - categorical_accuracy: 1.0000"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/util/dispatch.py:1082: UserWarning: \"`categorical_crossentropy` received `from_logits=True`, but the `output` argument was produced by a sigmoid or softmax activation and thus does not represent logits. Was this intended?\"\n","  return dispatch_target(*args, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["98/98 [==============================] - 0s 3ms/step - loss: 0.0000e+00 - categorical_accuracy: 1.0000 - val_loss: 0.0000e+00 - val_categorical_accuracy: 1.0000\n","Epoch 3/5\n","98/98 [==============================] - 0s 2ms/step - loss: 0.0000e+00 - categorical_accuracy: 1.0000 - val_loss: 0.0000e+00 - val_categorical_accuracy: 1.0000\n","Epoch 4/5\n","98/98 [==============================] - 0s 2ms/step - loss: 0.0000e+00 - categorical_accuracy: 1.0000 - val_loss: 0.0000e+00 - val_categorical_accuracy: 1.0000\n","Epoch 5/5\n","98/98 [==============================] - 0s 3ms/step - loss: 0.0000e+00 - categorical_accuracy: 1.0000 - val_loss: 0.0000e+00 - val_categorical_accuracy: 1.0000\n"]}]},{"cell_type":"markdown","source":["##**Plot the Performance**"],"metadata":{"id":"vsYRhAmJYvUc"}},{"cell_type":"code","source":["# Convert the training history to a dataframe\n","historydf = pd.DataFrame(hist.history)\n","historydf"],"metadata":{"id":"_T5qECYXUduD","colab":{"base_uri":"https://localhost:8080/","height":206},"executionInfo":{"status":"ok","timestamp":1655964785600,"user_tz":-330,"elapsed":508,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"96aa5a74-3900-4724-eee0-07e4d0fbcbd5"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["   loss  categorical_accuracy  val_loss  val_categorical_accuracy\n","0   0.0                   1.0       0.0                       1.0\n","1   0.0                   1.0       0.0                       1.0\n","2   0.0                   1.0       0.0                       1.0\n","3   0.0                   1.0       0.0                       1.0\n","4   0.0                   1.0       0.0                       1.0"],"text/html":["\n","  <div id=\"df-ef810113-6d7f-477d-a211-7e0c9a6017e9\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>loss</th>\n","      <th>categorical_accuracy</th>\n","      <th>val_loss</th>\n","      <th>val_categorical_accuracy</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","      <td>0.0</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ef810113-6d7f-477d-a211-7e0c9a6017e9')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-ef810113-6d7f-477d-a211-7e0c9a6017e9 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-ef810113-6d7f-477d-a211-7e0c9a6017e9');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":30}]},{"cell_type":"code","source":["# Plot training history\n","historydf.loc[0:, ['loss', 'val_loss']].plot()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":282},"id":"6sGKYgp3ZEVg","executionInfo":{"status":"ok","timestamp":1655964798493,"user_tz":-330,"elapsed":883,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"8074ebe3-7b9a-4369-de71-ab4d55be8667"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f688d3736d0>"]},"metadata":{},"execution_count":31},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"iVBORw0KGgoAAAANSUhEUgAAAYIAAAD4CAYAAADhNOGaAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4yLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+WH4yJAAATgElEQVR4nO3de3CV9Z3H8XcSUOvUIhJUmojBFu1QlYuE6pRSbLVYsdIRNlpdAUfH0dXZTZ3WxdUWFh1rbZUUbx1LS5VVBF1do9KhF290x0vijXijIIXhImAEL2ytEvjtH89jPcQTOEkOeRJ+79fMM3kuv3PONz948nl+v+ecpCSEgCQpXqVZFyBJypZBIEmRMwgkKXIGgSRFziCQpMj1yrqAjnjrrbfC6tWrsy5DknqUkSNHNgP9W+/vkUGwevVqqqursy5DknqUEELeK2inhiQpcgaBJEXOIJCkyPXIewSS4tO3b19qa2upqqqipKQk63K6rRACq1atoq6uji1bthT0GINAUo9QW1tLY2MjM2fOZPv27VmX022VlZUxfvx4amtrmT59ekGPcWpIUo9QVVXFokWLDIHd2L59O4888ghVVVUFP8YgkNQjlJSUGAIF2r59e7umzwwCSYqcQSBJBXr//fezLmGPMAgkKXIGgSR1wPXXX09TUxNLly6lpqYGgEMPPZQnnniCF154gaamJkaPHk1paSlz5879R9va2tqMK/803z4qqceZcHktn//S4KI+5/rXl/Pg9XUFtT3jjDMYNmwYQ4cOpby8nIaGBp588knOPvtsFi9ezLXXXktpaSn7778/w4YNo6KigmOOOQaAPn36FLXuYnBEIEntNHr0aObPn8+OHTvYtGkTTzzxBNXV1TQ0NHDeeecxffp0jjnmGLZu3crKlSs54ogjmD17NuPGjeO9997LuvxPcUQgqccp9Mq9qy1ZsoQxY8Ywfvx4fvvb33LjjTcyb948hg4dyrhx47jooouoqanh/PPPz7rUnTgikKR2WrJkCWeeeSalpaWUl5czZswYnn32WQYOHMjGjRuZM2cOc+bMYcSIEfTr14/S0lLuv/9+rrrqKkaMGJF1+Z/iiECS2umBBx7ghBNO4KWXXiKEwOWXX87GjRuZPHkyP/zhD9m2bRtbt25l8uTJVFRUMHfuXEpLk+vuK664IuPq8wgh9LiloaEhAC4uLhEtd955Z+Y19KQlX3+FEBrz/Ux1akiSImcQSFLkDAJJipxBIEmRMwgkKXIGgSRFziCQpMgZBJK0h+zq7xccfvjhNDU1dWE1bStWEJwCLANWANPyHN8XWJAefwaoanV8ILAV+EGR6pEkFagYv2KiDLgFOBlYCzQA9cCrOW3OB7YAXwTOAn4KnJlz/Ebgd0WoRVIEZs26gKHDjijqc7704kq+//05u2zzk5/8hDVr1nDrrbcCMH36dFpaWjjxxBPp27cvvXv35qqrrqK+vr5dr73vvvty2223MXLkSFpaWrjssst4/PHHGTJkCHPnzmWfffahtLSUiRMnsn79ehYuXEhlZSVlZWVcffXVLFy4sMPfNxQnCEaRXOmvTLfvASawcxBMAGak6/cBNwMlJB97/i7wV+D/ilCLJO0xCxYsoK6u7h9BUFNTw7hx45g9ezbvv/8+/fr14+mnn253EFxyySWEEDj22GM56qij+P3vf8+RRx7JRRddxC9+8QvuvvtuevfuTVlZGaeeeirr16/ntNNOA+Bzn/tcp7+vYgRBBbAmZ3st8JVdtGkB3gX6AX8H/p1kNLG7aaEL04Xy8vLOVSypR9vdlfue8uKLL3LwwQczYMAA+vfvz5YtW9iwYQOzZs1izJgx7Nixg4qKCg455BA2btxY8POOHj2am266CYBly5axevVqjjzySJ566imuvPJKKisruf/++1mxYgVNTU3ccMMNXHfddTz88MP8+c9/7vT3lfXN4hnALJL7A7tzOzASGNnc3Lwna5KkNt17771MmjSJM888kwULFnDOOefQv39/jjvuOIYPH87GjRvZb7/9ivJa8+fP5/TTT+eDDz5g0aJFnHjiiSxfvpwRI0bQ1NTENddcw49+9KNOv04xRgTrgMNytivTffnarE1fsw/wNsnIYRJwPXAgsINklHBzEeqSpKJbsGABv/rVrygvL+frX/86NTU1bNq0iZaWFsaOHUtVVVW7n3PJkiWcc845PPbYYwwePJiBAweybNkyBg0axMqVK7npppsYOHAgxx57LK+//jqbN2/mrrvu4p133uGCCy7o9PdUjCBoAAYDg0h+4J8FnN2qTT0wBXiK5Af/oyT3B76W02YGycjAEJDUbb366qsccMABrFu3jg0bNnDXXXfx0EMPsXTpUhobG3nttdfa/Zy33nort912G0uXLqWlpYWpU6fy0UcfUVNTw7nnnsu2bdvYsGED1157LdXV1fzsZz9jx44dbNu2jYsvvrjz31SR/kbAqSGEv4QQ3gghXJnumxlCOD1d3y+EcG8IYUUI4dkQwhF5nmNGCOEH/j0CFxeXfIt/j6Dz/dXW3yMo1l8oW5QuuX6cs/534J928xwzilSLJKkd/FOVkrQHHX300cybN2+nfR9++CHHH398RhV9mkEgqUcIIVBWVsb27duzLqVdXn75ZYYPH96lr1lWVkYIoeD2Wb99VJIKsmrVKsaPH09ZWVnWpXRrZWVljB8/nlWrVhX8GEcEknqEuro6amtrmThxIiUlJVmX022FEFi1ahV1dXUFP6akPcOH7qKxsTFUV1dnXYYk9SghhOdIPpi7E6eGJClyBoEkRc4gkKTIGQSSFDmDQJIiZxBIUuQMAkmKnEEgSZEzCCQpcgaBJEXOIJCkyBkEkhQ5g0CSImcQSFLkDAJJipxBIEmRMwgkKXIGgSRFziCQpMgZBJIUOYNAkiJnEEhS5AwCSYqcQSBJkTMIJClyxQqCU4BlwApgWp7j+wIL0uPPAFXp/pOB54Cm9Os3ilSPJKlAxQiCMuAW4NvAEOB76ddc5wNbgC8Cs4Cfpvubge8AxwBTgHlFqEeS1A7FCIJRJFf6K4GPgHuACa3aTADuSNfvA74JlAAvAOvT/a8AnyEZPUiSukgxgqACWJOzvTbd11abFuBdoF+rNhOB54EPi1CTJKlAvbIuIPVlkumib+2izYXpQnl5eVfUJElRKMaIYB1wWM52ZbqvrTa9gD7A2zntHwAmA2/s4nVuB0YCI5ubmztZsiTpY8UIggZgMDAI2Ac4C6hv1aae5GYwwCTgUSAABwKPkLzT6H+LUIskqZ2KEQQtwKXAYuA1YCHJjd+ZwOlpm1+T3BNYAVzGJ28xvZTknUQ/Bl5Ml4OLUJMkqUAlIYSsa2i3xsbGUF1dnXUZktSjhBCeI5li34mfLJakyBkEkhQ5g0CSImcQSFLkDAJJipxBIEmRMwgkKXIGgSRFziCQpMgZBJIUOYNAkiJnEEhS5AwCSYqcQSBJkTMIJClyBoEkRc4gkKTIGQSSFDmDQJIiZxBIUuQMAkmKnEEgSZEzCCQpcgaBJEXOIJCkyBkEkhQ5g0CSImcQSFLkDAJJipxBIEmRMwgkKXLFCoJTgGXACmBanuP7AgvS488AVTnHrkj3LwPGFakeSVKBihEEZcAtwLeBIcD30q+5zge2AF8EZgE/TfcPAc4CvkwSJremzydJ6iK9ivAco0iu6Fem2/cAE4BXc9pMAGak6/cBNwMl6f57gA+Bv6bPMwp4qgh1fcqDS27hqC8cvCeeWpL2uGVvbGLC1y4p+vMWY0RQAazJ2V6b7murTQvwLtCvwMd+7EKgEWgsLy/vZMmSpI8VY0TQVW5PF5qbm0NHnmBPJKkk9XTFGBGsAw7L2a5M97XVphfQB3i7wMdKkvagYgRBAzAYGATsQ3Lzt75Vm3pgSro+CXgUCOn+s0jeVTQofZ5ni1CTJKlAxZgaagEuBRaTvOPnN8ArwEySOf164NfAPJKbwZtJfviTtltIcmO5BbgE2F6EmiRJBSoJoUPT7ZlqbGwM1dXVWZchST1KCOE5YGTr/X6yWJIiZxBIUuQMAkmKnEEgSZEzCCQpcgaBJEXOIJCkyBkEkhQ5g0CSImcQSFLkDAJJipxBIEmRMwgkKXIGgSRFziCQpMgZBJIUOYNAkiJnEEhS5AwCSYqcQSBJkTMIJClyBoEkRc4gkKTIGQSSFDmDQJIiZxBIUuQMAkmKnEEgSZEzCCQpcgaBJEWus0FwEPAHYHn6tW8b7aakbZan6wD7A48ArwOvANd1shZJUgd0NgimAX8CBqdfp+VpcxAwHfgKMCpd/zgwfg58CRgOfBX4difrkSS1U2eDYAJwR7p+B/DdPG3GkYwWNgNb0vVTgL8Bj6VtPgKeByo7WY8kqZ06GwSHAG+m6xvS7dYqgDU522vTfbkOBL5DMqqQJHWhXgW0+SNwaJ79V7baDunSkRrmA7OBlbtod2G6UF5e3oGXkSTlU0gQnLSLYxuBASSjggHApjxt1gFjc7Yrgcdztm8nuYlct5s6bk8XmpubOxI4kqQ8Ojs1VM8n7wKaAjyYp81i4FskN4j7puuL02PXAH2A2k7WIUnqoM4GwXXAySRX9CfxyVtARwJz0vXNwNVAQ7rMTPdVkkwvDSG5UfwicEEn65EktVNJCD1vlqWxsTFUV1dnXYYk9SghhOdILtR34ieLJSlyBoEkRc4gkKTIGQSSFDmDQJIiZxBIUuQMAkmKnEEgSZEzCCQpcgaBJEXOIJCkyBkEkhQ5g0CSImcQSFLkDAJJipxBIEmRMwgkKXIGgSRFziCQpMgZBJIUOYNAkiJnEEhS5AwCSYqcQSBJkTMIJClyBoEkRc4gkKTIGQSSFDmDQJIiZxBIUuQMAkmKXGeD4CDgD8Dy9GvfNtpNSdssT9dbqwde7mQtkqQO6GwQTAP+BAxOv07L0+YgYDrwFWBUup4bGGcAWztZhySpgzobBBOAO9L1O4Dv5mkzjmS0sBnYkq6fkh77LHAZcE0n65AkdVCvTj7+EODNdH1Dut1aBbAmZ3ttug/gauAG4G8FvNaF6UJ5eXlHapUk5VFIEPwRODTP/itbbYd0KdQw4AvA94GqAtrfni40Nze353UkSbtQSBCctItjG4EBJKOCAcCmPG3WAWNztiuBx4ETgJHAqrSOg9P9uW0lSXtYZ+8R1PPJu4CmAA/mabMY+BbJDeK+6fpi4Dbg8ySjgdHAXzAEJKnLdTYIrgNOJnlb6EnpNiRX+nPS9c0k9wIa0mVmuk+S1A2UhNDzptsbGxtDdXV11mVIUo8SQniO5EJ9J36yWJIiZxBIUuQMAkmKnEEgSZEzCCQpcgaBJEXOIJCkyBkEkhQ5g0CSImcQSFLkDAJJipxBIEmRMwgkKXIGgSRFziCQpMgZBJIUOYNAkiJnEEhS5AwCSYqcQSBJkTMIJClyBoEkRc4gkKTIGQSSFLmSEELWNXTEW8DqDj62HGguYi3FYl3tY13tY13ts7fWdTjQv/XOnhoEndEIjMy6iDysq32sq32sq32iqsupIUmKnEEgSZErmzFjRtY1ZOG5rAtog3W1j3W1j3W1TzR1xXiPQJKUw6khSYqcQSBJkdubg+AUYBmwApiW5/i+wIL0+DNAVTepayrJ5yReTJcLuqCm3wCbgJfbOF4CzCapeSkwogtqKqSuscC7fNJXP+6asjgMeAx4FXgF+Lc8bbLos0LqGkvX99l+wLPAS2ld/5mnTRbnYyF1TaXrz8ePlQEvAA/nOVbc/goh7I1LWQjhjRDCESGEfUIIL4UQhrRq8y8hhF+m62eFEBZ0k7qmhhBu7uL+GhNCGBFCeLmN46eGEH4XQigJIRwfQnimm9Q1NoTwcBf3FSGEAWldhBAOCCH8Jc+/YxZ9VkhdWfRZSQjhs+l677Qvjm/VJovzsZC6poauPx8/Xi4LIdzdxr9XUftrbx0RjCJJypXAR8A9wIRWbSYAd6Tr9wHfJLmKy7quLDwJbN7F8QnAnUAAngYOBAZ0g7qy8ibwfLr+PvAaUNGqTRZ9VkhdWQjA1nS9d7q0fpdKFudjIXVlpRIYD8xp43hR+2tvDYIKYE3O9lo+fULktmkhGS736wZ1AUwkmU64j2S4n7VC687CCSRD+98BX87g9auA4STD81xZ91kV+euCbPqsjGRqZRPwhzx1ZXE+FlIXZHM+1gGXAzvaOF7U/tpbg6Ane4jkJD6W5D/mHbtsHbfnSX53ylDgJuB/uvj1Pwv8N1ALvNfFr70ru6orqz7bDgwjudIdBRzdRa+7O7urK4vz8TSSYOqyzzHsrUGwjp2TuzLd11abXkAf4O1uUNfbwIfp+hzguD1cUyEKqTsL7/HJ0H4RydC+vIteuzfJD9u7gPvzHM+qz3ZXV5Z9BvAOyQ3tU1rtz+J8LKSuLM7HrwKnA6tIpo+/AfxXqzZF7a+9NQgagMHAIGAf4CygvlWbemBKuj4JeJQ9Pz9YSF2588ink8zzZq0emEwyB3k8yTD0zUwrShzKJ/Oio0j+P3fFD48S4Nck/zY3ttEmiz4rpK4s+qw/yT0SgM8AJwOvt2qTxflYSF1ZnI9XkFw4VJH8jHgU+OdWbYraX706+sBurgW4FFhMMgf4G5K3h80k+e199SQnzDySm7ebSTq8O9T1ryT/4VrSuqZ2QV3zSd5WWE4ylz2d5EoR4JckV46nkvTV34DzuqCmQuqaBFxM0lcfkPwbdsXNvq8C5wJNJPPLAP8BDMypLYs+K6SuLPpsAMmUShlJ8CwkeUtk1udjIXVlcT62ZY/1l79iQpIit7dODUmSCmQQSFLkDAJJipxBIEmRMwgkKXIGgSRFziCQpMj9P6o2ANrdxGPxAAAAAElFTkSuQmCC\n"},"metadata":{"needs_background":"dark"}}]}]}