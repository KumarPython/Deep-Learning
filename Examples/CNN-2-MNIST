{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CNN-2-MNIST","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyMIXHEhWC92RuEVRXtd6ak8"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#**MNIST**\n","\n","MNIST (\"Modified National Institute of Standards and Technology\") is the de facto “hello world” dataset of computer vision. Since its release in 1999, this classic dataset of handwritten images has served as the basis for benchmarking classification algorithms. As new machine learning techniques emerge, MNIST remains a reliable resource for researchers and learners alike.\n","\n","In this competition, your goal is to correctly identify digits from a dataset of tens of thousands of handwritten images."],"metadata":{"id":"3Xcm4dPYeBLg"}},{"cell_type":"code","source":["import tensorflow\n","from tensorflow import keras\n","import matplotlib"],"metadata":{"id":"10z0WwUDeNu6"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **Load**"],"metadata":{"id":"o9HmXPOpfKXj"}},{"cell_type":"code","source":["num_classes=10\n","input_shape=(28,28,1)\n","\n","# Load the data and split it between train and test sets\n","(x_train, y_train), (x_test, y_test) = keras.datasets.mnist.load_data()"],"metadata":{"id":"6uO001hwfp9r"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## **See**"],"metadata":{"id":"IjaS8UBi0Fiu"}},{"cell_type":"code","source":["\n","import matplotlib.pyplot as plt\n","\n","plt.imshow(x_train[1000].reshape(28,28),cmap=matplotlib.cm.binary,interpolation='nearest',aspect='auto')\n","plt.axis('off')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VIrI3edH0NLl","executionInfo":{"status":"ok","timestamp":1657131356903,"user_tz":-330,"elapsed":9,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"6eb69278-82cf-40bc-c513-aac0699f9f35"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":["y_train[1000].argmax()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"E9Mo4loX1Ct6","executionInfo":{"status":"ok","timestamp":1657131356905,"user_tz":-330,"elapsed":9,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"9ee821ee-cec0-435e-d967-88926044e726"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0"]},"metadata":{},"execution_count":4}]},{"cell_type":"markdown","source":["# **Pre-process**"],"metadata":{"id":"DpH-3IETotsH"}},{"cell_type":"markdown","source":["## **Scaling**"],"metadata":{"id":"60Mv8Td0o-M0"}},{"cell_type":"code","source":["# Scale images to the [0, 1] range\n","x_train=x_train.astype(\"float32\")/255\n","x_test=x_test.astype(\"float32\")/255\n","x_train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"P58T_ofqooC3","executionInfo":{"status":"ok","timestamp":1657131357635,"user_tz":-330,"elapsed":739,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"bd1fd3a9-5edd-4cb2-e154-ead5241e5e0d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[[0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        ...,\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.]],\n","\n","       [[0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        ...,\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.]],\n","\n","       [[0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        ...,\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.]],\n","\n","       ...,\n","\n","       [[0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        ...,\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.]],\n","\n","       [[0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        ...,\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.]],\n","\n","       [[0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        ...,\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.],\n","        [0., 0., 0., ..., 0., 0., 0.]]], dtype=float32)"]},"metadata":{},"execution_count":5}]},{"cell_type":"markdown","source":["## **Images must retain shape**"],"metadata":{"id":"2RP_qPvzqRfD"}},{"cell_type":"code","source":["import numpy as np\n","\n","# Make sure images have shape (28, 28, 1)\n","x_train=np.expand_dims(x_train,-1)\n","x_test=np.expand_dims(x_test,-1)\n","x_train\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K2qFzFNpqeig","executionInfo":{"status":"ok","timestamp":1657131357636,"user_tz":-330,"elapsed":9,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"1be37eee-e42f-4ddb-f65c-3c2869378319"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[[[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        ...,\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]]],\n","\n","\n","       [[[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        ...,\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]]],\n","\n","\n","       [[[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        ...,\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]]],\n","\n","\n","       ...,\n","\n","\n","       [[[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        ...,\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]]],\n","\n","\n","       [[[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        ...,\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]]],\n","\n","\n","       [[[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        ...,\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]],\n","\n","        [[0.],\n","         [0.],\n","         [0.],\n","         ...,\n","         [0.],\n","         [0.],\n","         [0.]]]], dtype=float32)"]},"metadata":{},"execution_count":6}]},{"cell_type":"markdown","source":["## **Convert to Class Matrices**"],"metadata":{"id":"hfmy8c4Arovm"}},{"cell_type":"code","source":["from tensorflow.keras.utils import to_categorical\n","\n","# convert class vectors to binary class matrices\n","y_train=to_categorical(y_train,num_classes)\n","y_test=to_categorical(y_test,num_classes)\n","y_train"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vol7TPB5riiA","executionInfo":{"status":"ok","timestamp":1657131357636,"user_tz":-330,"elapsed":7,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"e9878352-9758-49b1-dfc2-3a0b653951f3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0., 0., 0., ..., 0., 0., 0.],\n","       [1., 0., 0., ..., 0., 0., 0.],\n","       [0., 0., 0., ..., 0., 0., 0.],\n","       ...,\n","       [0., 0., 0., ..., 0., 0., 0.],\n","       [0., 0., 0., ..., 0., 0., 0.],\n","       [0., 0., 0., ..., 0., 1., 0.]], dtype=float32)"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":["# **Model**"],"metadata":{"id":"AjmFQxbEt73v"}},{"cell_type":"markdown","source":["## **Build Model**"],"metadata":{"id":"JaAjoqKCuD6A"}},{"cell_type":"code","source":["from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense,Flatten,Conv2D,MaxPooling2D,Dropout\n","\n","model=Sequential(name='mnist')  # Model name\n","\n","model.add(Conv2D(filters=32,kernel_size=(3,3),activation='relu',input_shape=input_shape)),\n","model.add(MaxPooling2D(pool_size=(2,2))),\n","\n","model.add(Conv2D(filters=64,kernel_size=(3,3),activation='relu'),name=\"Name\"),  # Naming layer\n","model.add(MaxPooling2D(pool_size=(2,2)),name=\"Name\"),  # Naming layer\n","\n","model.add(Flatten()),\n","model.add(Dropout(0.5)),\n","model.add(Dense(units=num_classes,activation='sigmoid'))\n","\n","model.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"pTQGEGD-uCLd","executionInfo":{"status":"ok","timestamp":1657131358771,"user_tz":-330,"elapsed":1141,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"a9d26e0c-9e50-4191-9565-f9f9b4ac2676"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 26, 26, 32)        320       \n","                                                                 \n"," max_pooling2d (MaxPooling2D  (None, 13, 13, 32)       0         \n"," )                                                               \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 11, 11, 64)        18496     \n","                                                                 \n"," max_pooling2d_1 (MaxPooling  (None, 5, 5, 64)         0         \n"," 2D)                                                             \n","                                                                 \n"," flatten (Flatten)           (None, 1600)              0         \n","                                                                 \n"," dropout (Dropout)           (None, 1600)              0         \n","                                                                 \n"," dense (Dense)               (None, 10)                16010     \n","                                                                 \n","=================================================================\n","Total params: 34,826\n","Trainable params: 34,826\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","source":["***In general, it's a recommended best practice to always specify the input shape of a Sequential model in advance if you know what it is.***\n","\n","***A common debugging workflow: add() + summary()\n","When building a new Sequential architecture, it's useful to incrementally stack layers with add() and frequently print model summaries.***"],"metadata":{"id":"_LDKjPIXb74v"}},{"cell_type":"markdown","source":["## **Visualize Model**"],"metadata":{"id":"UdKGyRiR2Ip-"}},{"cell_type":"code","source":["from tensorflow.keras.utils import plot_model\n","\n","plot_model(\n","    model,  # A Keras model instance\n","    to_file=\"model.png\",  #  File name of the plot image\n","    show_shapes=True,  # whether to display shape information\n","    show_dtype=False,  # whether to display layer dtypes\n","    show_layer_names=False,  # whether to display layer names\n","    # rankdir=\"TB\",  # rankdir argument passed to PyDot, a string specifying the format of the plot: 'TB' creates a vertical plot; 'LR' creates a horizontal plot\n","    # expand_nested=False,\n","    # dpi=96,\n","    # layer_range=None,  # input of list containing two str items, which is the starting layer name and ending layer name (both inclusive)\n","    # show_layer_activations=False,  # Display layer activations (only for layers that have an activation property)\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Yv6RH7Vm2Tgf","executionInfo":{"status":"ok","timestamp":1657131358773,"user_tz":-330,"elapsed":14,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"edad7a26-eb25-47b6-e35f-3169724e4717"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<IPython.core.display.Image object>"],"image/png":"\n"},"metadata":{},"execution_count":9}]},{"cell_type":"code","source":["!pip install visualkeras\n","import visualkeras\n","visualkeras.layered_view(model, legend=True) "],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ilT2zoVd6Y4S","executionInfo":{"status":"ok","timestamp":1657131365684,"user_tz":-330,"elapsed":6920,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"76a7ac62-1e13-4be6-9e65-3d75ef1c186c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: visualkeras in /usr/local/lib/python3.7/dist-packages (0.0.2)\n","Requirement already satisfied: numpy>=1.18.1 in /usr/local/lib/python3.7/dist-packages (from visualkeras) (1.21.6)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.7/dist-packages (from visualkeras) (7.1.2)\n","Requirement already satisfied: aggdraw>=1.3.11 in /usr/local/lib/python3.7/dist-packages (from visualkeras) (1.3.15)\n"]},{"output_type":"execute_result","data":{"text/plain":["<PIL.Image.Image image mode=RGBA size=521x175 at 0x7FB18A5B3E90>"],"image/png":"\n"},"metadata":{},"execution_count":10}]},{"cell_type":"markdown","source":["## **Compile**"],"metadata":{"id":"UseyUa9a5b59"}},{"cell_type":"code","source":["from tensorflow.keras.losses import CategoricalCrossentropy\n","\n","model.compile(optimizer='adam',  # String (name of optimizer) or optimizer instance\n","              loss=CategoricalCrossentropy(from_logits=True),  #  Loss function. May be a string (name of loss function), or a tf.keras.losses.Loss instance\n","              metrics= ['accuracy'],  #  List of metrics to be evaluated by the model during training and testing\n","              # loss_weights=None,  # Optional list or dictionary specifying scalar coefficients (Python floats) to weight the loss contributions of different model outputs\n","              # weighted_metrics=None,  # List of metrics to be evaluated\n","              # run_eagerly=None,  # Defaults to False. If True, this Model's logic will not be wrapped in a tf.functio\n","              # steps_per_execution=None,  # Defaults to 1. The number of batches to run during each tf.function call\n","              # jit_compile=None,  #  If True, compile the model training step with XLA. XLA is an optimizing compiler for machine learning. jit_compile is not enabled for by default\n","              # **kwargs  # Arguments supported for backwards compatibility\n","                        ),\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hMIzkxvw23bO","executionInfo":{"status":"ok","timestamp":1657131365686,"user_tz":-330,"elapsed":21,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"7a68bc73-cd90-4f48-e249-cc3f2dd9d84d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(None,)"]},"metadata":{},"execution_count":11}]},{"cell_type":"markdown","source":["# **Train**"],"metadata":{"id":"FT7RWw6UKOuc"}},{"cell_type":"code","source":["history=model.fit(\n","    x=x_train,  # Input data\n","    y=y_train,  # Target data\n","    batch_size=None,  # Number of samples per gradient update\n","    epochs=5,  # Number of epochs to train the model\n","    # verbose=\"auto\",  #  Verbosity mode. 0 = silent, 1 = progress bar, 2 = one line per epoch\n","    # callbacks=None,  #  List of keras.callbacks.Callback instances\n","    validation_split=0.2,  # Fraction of the training data to be used as validation data\n","    validation_data=(x_test,y_test),  # Data on which to evaluate the loss and any model metrics at the end of each epoch\n","    shuffle=True,  # whether to shuffle the training data before each epoch\n","    # class_weight=None,  # Optional dictionary mapping class indices (integers) to a weight (float) value\n","    # sample_weight=None,  # Optional Numpy array of weights for the training samples, used for weighting the loss function (during training only)\n","    # initial_epoch=0,  # Epoch at which to start training (useful for resuming a previous training run)\n","    # steps_per_epoch=None,  # Total number of steps (batches of samples) before declaring one epoch finished and starting the next epoch\n","    # validation_steps=None,  # Total number of steps (batches of samples) to draw before stopping when performing validation at the end of every epoch\n","    # validation_batch_size=None,  # Number of samples per validation batch\n","    # validation_freq=1,  # If an integer, specifies how many training epochs to run before a new validation run is performed\n","    # max_queue_size=10,  # Used for generator or keras.utils.Sequence input\n","    # workers=1,  # Maximum number of processes to spin up when using process-based threading\n","    # use_multiprocessing=False,  # Used for generator or keras.utils.Sequence input\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"y7uJWnRQIuwz","executionInfo":{"status":"ok","timestamp":1657131699563,"user_tz":-330,"elapsed":333896,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"6f1fb672-570f-4846-ca6a-a60096d4e181"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1/5\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/tensorflow/python/util/dispatch.py:1082: UserWarning: \"`categorical_crossentropy` received `from_logits=True`, but the `output` argument was produced by a sigmoid or softmax activation and thus does not represent logits. Was this intended?\"\n","  return dispatch_target(*args, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["1875/1875 [==============================] - 81s 42ms/step - loss: 0.2043 - accuracy: 0.9376 - val_loss: 0.0576 - val_accuracy: 0.9808\n","Epoch 2/5\n","1875/1875 [==============================] - 65s 35ms/step - loss: 0.0796 - accuracy: 0.9757 - val_loss: 0.0404 - val_accuracy: 0.9864\n","Epoch 3/5\n","1875/1875 [==============================] - 63s 34ms/step - loss: 0.0637 - accuracy: 0.9798 - val_loss: 0.0327 - val_accuracy: 0.9884\n","Epoch 4/5\n","1875/1875 [==============================] - 63s 33ms/step - loss: 0.0542 - accuracy: 0.9832 - val_loss: 0.0263 - val_accuracy: 0.9909\n","Epoch 5/5\n","1875/1875 [==============================] - 62s 33ms/step - loss: 0.0489 - accuracy: 0.9844 - val_loss: 0.0254 - val_accuracy: 0.9913\n"]}]},{"cell_type":"markdown","source":["**Returns**\n","\n","***A History object. Its History.history attribute is a record of training loss values and metrics values at successive epochs, as well as validation loss values and validation metrics values (if applicable).***"],"metadata":{"id":"GtPOWnLURbNn"}},{"cell_type":"markdown","source":["# **Evaluate**"],"metadata":{"id":"jzsxFmlsRzbd"}},{"cell_type":"code","source":["model.evaluate(\n","    x=x_test,  # Input data\n","    y=y_test,  # Target data\n","    # batch_size=None,  # Number of samples per batch of computation\n","    # verbose=\"auto\",  # Verbosity mode. 0 = silent, 1 = progress bar, 2 = single line. \"auto\" defaults to 1\n","    # sample_weight=None,  # Optional Numpy array of weights for the test samples\n","    # steps=None,  # Total number of steps (batches of samples) before declaring the evaluation round finished\n","    # callbacks=None,  # List of keras.callbacks.Callback instances. List of callbacks to apply during evaluation\n","    # max_queue_size=10,  # Used for generator or keras.utils.Sequence input only. Maximum size for the generator queue\n","    # workers=1,  # Maximum number of processes to spin up when using process-based threading\n","    # use_multiprocessing=False,  # Used for generator or keras.utils.Sequence input\n","    # return_dict=False,  # If True, loss and metric results are returned as a dict, with each key being the name of the metric.\n","    # **kwargs\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SVQQv_tIO7uT","executionInfo":{"status":"ok","timestamp":1657131704241,"user_tz":-330,"elapsed":4692,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"55fa98f3-374d-46cf-81d7-793f28bb18b4"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 [==============================] - 4s 13ms/step - loss: 0.0254 - accuracy: 0.9913\n"]},{"output_type":"execute_result","data":{"text/plain":["[0.025405848398804665, 0.9912999868392944]"]},"metadata":{},"execution_count":13}]},{"cell_type":"markdown","source":["# **Predict**"],"metadata":{"id":"ZrOPFwo0UI6-"}},{"cell_type":"code","source":["pred=model.predict(\n","    x=x_test,  # Input samples\n","    batch_size=None,  # Number of samples per batch\n","    verbose=\"auto\",  #  \"auto\", 0, 1, or 2. Verbosity mode. 0 = silent, 1 = progress bar, 2 = single line. \"auto\" defaults to 1\n","    steps=None,  # Total number of steps (batches of samples) before declaring the prediction round finished.\n","    callbacks=None,  # List of keras.callbacks.Callback instances. List of callbacks to apply during prediction\n","    max_queue_size=10,  # Used for generator or keras.utils.Sequence input only\n","    workers=1,  # Maximum number of processes to spin up when using process-based threading\n","    use_multiprocessing=False,  # If True, use process-based threading\n",").argmax(axis=1)\n","\n","pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"agRQOccmSLZm","executionInfo":{"status":"ok","timestamp":1657131709137,"user_tz":-330,"elapsed":4902,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"8c30b406-f2b1-4f35-947a-3ea54fdd8c48"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["313/313 [==============================] - 4s 14ms/step\n"]},{"output_type":"execute_result","data":{"text/plain":["array([7, 2, 1, ..., 4, 5, 6])"]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","source":["# **Save**"],"metadata":{"id":"FzkmuvhKW8RG"}},{"cell_type":"code","source":["model.save(\n","    'mnist.h5',  # String, PathLike, path to SavedModel or H5 file to save the model\n","    overwrite=True,  # Whether to silently overwrite any existing file at the target location, or provide the user with a manual prompt\n","    # include_optimizer=True,  # If True, save optimizer's state together\n","    # save_format=None,  # Either 'tf' or 'h5', indicating whether to save the model to Tensorflow SavedModel or HDF5. Defaults to 'tf' in TF 2.X, and 'h5' in TF 1.X.\n","    # signatures=None,  # Signatures to save with the SavedModel\n","    # options=None,\n","    # save_traces=True,\n",")"],"metadata":{"id":"m-uPqNd5WOh-"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["# **Load**"],"metadata":{"id":"oZvyDC0aZeXd"}},{"cell_type":"code","source":["from keras.models import load_model\n","mnist = load_model('mnist.h5')\n","mnist.summary()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FN6qN_dvZLw2","executionInfo":{"status":"ok","timestamp":1657131709138,"user_tz":-330,"elapsed":12,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"5224b425-9d16-4768-ca69-f14df11de767"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Model: \"sequential\"\n","_________________________________________________________________\n"," Layer (type)                Output Shape              Param #   \n","=================================================================\n"," conv2d (Conv2D)             (None, 26, 26, 32)        320       \n","                                                                 \n"," max_pooling2d (MaxPooling2D  (None, 13, 13, 32)       0         \n"," )                                                               \n","                                                                 \n"," conv2d_1 (Conv2D)           (None, 11, 11, 64)        18496     \n","                                                                 \n"," max_pooling2d_1 (MaxPooling  (None, 5, 5, 64)         0         \n"," 2D)                                                             \n","                                                                 \n"," flatten (Flatten)           (None, 1600)              0         \n","                                                                 \n"," dropout (Dropout)           (None, 1600)              0         \n","                                                                 \n"," dense (Dense)               (None, 10)                16010     \n","                                                                 \n","=================================================================\n","Total params: 34,826\n","Trainable params: 34,826\n","Non-trainable params: 0\n","_________________________________________________________________\n"]}]},{"cell_type":"markdown","source":["# **Accuracy**"],"metadata":{"id":"NLAeegyfaxYH"}},{"cell_type":"code","source":["# summarize history for accuracy\n","plt.plot(history.history['accuracy'])\n","plt.plot(history.history['val_accuracy'])\n","plt.title('Model Accuracy')\n","plt.ylabel('Accuracy')\n","plt.xlabel('Epochs')\n","plt.legend('Train','Validation',loc='upper left')\n","plt.show()"],"metadata":{"id":"XTxcQLbEaj_e","colab":{"base_uri":"https://localhost:8080/","height":642},"executionInfo":{"status":"ok","timestamp":1657131710003,"user_tz":-330,"elapsed":870,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"a2d368a3-3865-4824-8854-83290b221489"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:7: UserWarning: Legend does not support 'T' instances.\n","A proxy artist may be used instead.\n","See: http://matplotlib.org/users/legend_guide.html#creating-artists-specifically-for-adding-to-the-legend-aka-proxy-artists\n","  import sys\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:7: UserWarning: Legend does not support 'r' instances.\n","A proxy artist may be used instead.\n","See: http://matplotlib.org/users/legend_guide.html#creating-artists-specifically-for-adding-to-the-legend-aka-proxy-artists\n","  import sys\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:7: UserWarning: Legend does not support 'a' instances.\n","A proxy artist may be used instead.\n","See: http://matplotlib.org/users/legend_guide.html#creating-artists-specifically-for-adding-to-the-legend-aka-proxy-artists\n","  import sys\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:7: UserWarning: Legend does not support 'i' instances.\n","A proxy artist may be used instead.\n","See: http://matplotlib.org/users/legend_guide.html#creating-artists-specifically-for-adding-to-the-legend-aka-proxy-artists\n","  import sys\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:7: UserWarning: Legend does not support 'n' instances.\n","A proxy artist may be used instead.\n","See: http://matplotlib.org/users/legend_guide.html#creating-artists-specifically-for-adding-to-the-legend-aka-proxy-artists\n","  import sys\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["# **Feature Importance using SHAP**\n","\n","SHAP or SHAPley Additive exPlanations is a visualization tool that can be used for making a machine learning model more explainable by visualizing its output. It can be used for explaining the prediction of any model by computing the contribution of each feature to the prediction. It is a combination of various tools like lime, SHAPely sampling values, DeepLift, QII, and many more. \n","\n","The idea is using game theory to interpret target model. All features are “contributor” and trying to predict the task which is “game” and the “reward” is actual prediction minus the result from explanation model.\n","\n","![shap](https://miro.medium.com/max/700/1*Fb4sZSoSxxtQ14yy4aaN8g.png)\n","\n","**Interpreting CNN Models**\n","\n","Here’s the interesting part, can we really unbox the opacity presented to us by a seemingly black-box CNN model and try and understand what’s really going on under the hood and what does the model really see when it looks at an image? There are a wide variety of techniques and tools for interpreting decisions made by vision-based deep learning models.\n","\n","![shap3](https://miro.medium.com/max/700/1*_e8cWSTcpGrSs9FeOB105A.png)\n"],"metadata":{"id":"FkLHXBSVeExF"}},{"cell_type":"code","source":["# import shap\n","# import numpy as np\n","# tensorflow.compat.v1.disable_eager_execution()\n","\n","# # select a set of background examples to take an expectation over\n","# background = x_train[np.random.choice(x_train.shape[0], 100, replace=False)]\n","\n","# # explain predictions of the model on three images\n","# e = shap.DeepExplainer(model, background)\n","# # ...or pass tensors directly\n","# # e = shap.DeepExplainer((model.layers[0].input, model.layers[-1].output), background)\n","# shap_values = e.shap_values(x_test[1:5])"],"metadata":{"id":"w_1I0JwJlA_h"},"execution_count":null,"outputs":[]}]}