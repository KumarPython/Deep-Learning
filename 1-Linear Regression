{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"1-Linear Regression","provenance":[],"authorship_tag":"ABX9TyMGAzcWG2YXlzJfAzJnp4uY"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#**Linear Regression**\n","\n","A linear regression learning algorithm example using TensorFlow library."],"metadata":{"id":"mdVKAUWf5FKL"}},{"cell_type":"code","source":["import tensorflow as tf\n","tf.compat.v1.disable_eager_execution() # need to disable eager in TF2.x\n","import numpy\n","import matplotlib.pyplot as plt\n","rng = numpy.random"],"metadata":{"id":"d6wU_hHm5Mcl","executionInfo":{"status":"ok","timestamp":1654065400284,"user_tz":-330,"elapsed":617,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}}},"execution_count":23,"outputs":[]},{"cell_type":"code","source":["# Parameters\n","learning_rate = 0.01\n","training_epochs = 1000\n","display_step = 50"],"metadata":{"id":"ROibay7t5qUt","executionInfo":{"status":"ok","timestamp":1654065400905,"user_tz":-330,"elapsed":12,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}}},"execution_count":24,"outputs":[]},{"cell_type":"code","source":["# Training Data\n","train_X = numpy.asarray([3.3,4.4,5.5,6.71,6.93,4.168,9.779,6.182,7.59,2.167,\n","                         7.042,10.791,5.313,7.997,5.654,9.27,3.1])\n","train_Y = numpy.asarray([1.7,2.76,2.09,3.19,1.694,1.573,3.366,2.596,2.53,1.221,\n","                         2.827,3.465,1.65,2.904,2.42,2.94,1.3])\n","n_samples = train_X.shape[0]\n","train_X"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FdPRamxF5wui","executionInfo":{"status":"ok","timestamp":1654065400905,"user_tz":-330,"elapsed":11,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"466bafbe-8a4f-443d-a7cf-0cb292074e99"},"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([ 3.3  ,  4.4  ,  5.5  ,  6.71 ,  6.93 ,  4.168,  9.779,  6.182,\n","        7.59 ,  2.167,  7.042, 10.791,  5.313,  7.997,  5.654,  9.27 ,\n","        3.1  ])"]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["# tf Graph Input\n","X = tf.compat.v1.placeholder(\"float\")\n","Y = tf.compat.v1.placeholder(\"float\")\n","\n","# Set model weights\n","W = tf.Variable(rng.randn(), name=\"weight\")\n","b = tf.Variable(rng.randn(), name=\"bias\")"],"metadata":{"id":"hLj7i_JD54k6","executionInfo":{"status":"ok","timestamp":1654065400906,"user_tz":-330,"elapsed":10,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}}},"execution_count":26,"outputs":[]},{"cell_type":"code","source":["# Construct a linear model\n","pred = tf.add(tf.multiply(X, W), b)\n","pred"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"VZASCimg6GBu","executionInfo":{"status":"ok","timestamp":1654065400906,"user_tz":-330,"elapsed":10,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"97c5a7fc-0835-4c7c-cbab-8c3580a603f1"},"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<tf.Tensor 'Add_2:0' shape=<unknown> dtype=float32>"]},"metadata":{},"execution_count":27}]},{"cell_type":"code","source":["# Mean squared error\n","cost = tf.reduce_sum(tf.pow(pred-Y, 2))/(2*n_samples)\n","\n","# Gradient descent\n","optimizer = tf.compat.v1.train.GradientDescentOptimizer(learning_rate).minimize(cost)"],"metadata":{"id":"QhY0dwpJ7e1X","executionInfo":{"status":"ok","timestamp":1654065400907,"user_tz":-330,"elapsed":9,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["# Initialize the variables (i.e. assign their default value)\n","init = tf.compat.v1.global_variables_initializer()"],"metadata":{"id":"zveh9dhI7u67","executionInfo":{"status":"ok","timestamp":1654065400907,"user_tz":-330,"elapsed":8,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}}},"execution_count":29,"outputs":[]},{"cell_type":"code","source":["# Start training\n","with tf.compat.v1.Session() as sess:\n","    sess.run(init)\n","\n","    # Fit all training data\n","    for epoch in range(training_epochs):\n","        for (x, y) in zip(train_X, train_Y):\n","            sess.run(optimizer, feed_dict={X: x, Y: y})\n","\n","        #Display logs per epoch step\n","        if (epoch+1) % display_step == 0:\n","            c = sess.run(cost, feed_dict={X: train_X, Y:train_Y})\n","            print(\"Epoch:\",(epoch+1), \"cost=\", c,\"W =\", sess.run(W), \"b =\", sess.run(b))\n","\n","    print(\"Optimization Finished!\")\n","    training_cost = sess.run(cost, feed_dict={X: train_X, Y: train_Y})\n","    print(\"Training cost=\", training_cost, \"W =\", sess.run(W), \"b =\", sess.run(b))\n","#Graphic display\n","    plt.plot(train_X, train_Y, 'ro', label='Original data')\n","    plt.plot(train_X, sess.run(W) * train_X + sess.run(b), label='Fitted line')\n","    plt.legend()\n","    plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":647},"id":"NrJmiXBX8RAP","executionInfo":{"status":"ok","timestamp":1654065508536,"user_tz":-330,"elapsed":10411,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"32179c94-b6a4-4f54-d6ca-18979169a05c"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch: 50 cost= 0.20451498 W = 0.44925448 b = -0.6348799\n","Epoch: 100 cost= 0.18978047 W = 0.43737975 b = -0.54945356\n","Epoch: 150 cost= 0.17674752 W = 0.42621127 b = -0.46910807\n","Epoch: 200 cost= 0.16521966 W = 0.41570696 b = -0.39354122\n","Epoch: 250 cost= 0.15502314 W = 0.40582752 b = -0.32246903\n","Epoch: 300 cost= 0.14600423 W = 0.3965355 b = -0.2556231\n","Epoch: 350 cost= 0.13802695 W = 0.38779616 b = -0.19275294\n","Epoch: 400 cost= 0.13097109 W = 0.3795766 b = -0.13362207\n","Epoch: 450 cost= 0.12473025 W = 0.37184596 b = -0.07800793\n","Epoch: 500 cost= 0.11921034 W = 0.36457494 b = -0.02570146\n","Epoch: 550 cost= 0.11432809 W = 0.35773647 b = 0.023494175\n","Epoch: 600 cost= 0.110009864 W = 0.35130468 b = 0.06976394\n","Epoch: 650 cost= 0.10619057 W = 0.34525543 b = 0.11328187\n","Epoch: 700 cost= 0.102812536 W = 0.339566 b = 0.15421158\n","Epoch: 750 cost= 0.09982491 W = 0.33421493 b = 0.19270678\n","Epoch: 800 cost= 0.0971825 W = 0.3291821 b = 0.22891274\n","Epoch: 850 cost= 0.09484547 W = 0.32444862 b = 0.26296523\n","Epoch: 900 cost= 0.092778556 W = 0.31999654 b = 0.29499274\n","Epoch: 950 cost= 0.09095054 W = 0.31580934 b = 0.32511526\n","Epoch: 1000 cost= 0.08933392 W = 0.3118712 b = 0.353446\n","Optimization Finished!\n","Training cost= 0.08933392 W = 0.3118712 b = 0.353446\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]}]}