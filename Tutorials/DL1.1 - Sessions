{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"DL0.1 - TensorFlow Basics","provenance":[],"toc_visible":true,"authorship_tag":"ABX9TyNyrxz9ssP5CgDtt4hJ5b0p"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#**Sessions**\n","\n","```\n","tf.compat.v1.Session\n","```\n","A class for running TensorFlow operations.\n"],"metadata":{"id":"ncEGtT4Y8QyF"}},{"cell_type":"markdown","source":["##**1-run()**\n","\n","A Session object encapsulates the environment in which Operation objects are executed, and Tensor objects are evaluated.\n","\n","Session does not work with either eager execution or tf.function, and you should not invoke it directly. To migrate code that uses sessions to TF2, rewrite the code without it. See the migration guide on replacing Session.run calls."],"metadata":{"id":"aqci9v9C9MR5"}},{"cell_type":"code","source":["tf.compat.v1.disable_eager_execution() # need to disable eager in TF2.x\n","\n","# Build a graph.\n","a = tf.constant(5.0)\n","b = tf.constant(6.0)\n","c = a * b\n","\n","# Launch the graph in a session.\n","sess = tf.compat.v1.Session()\n","\n","# Evaluate the tensor `c`.\n","print(sess.run(c))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"eDUd3r5C6uu8","executionInfo":{"status":"ok","timestamp":1653998006619,"user_tz":-330,"elapsed":8,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"a6dc8c17-1288-42ed-b981-9ef1a6292bed"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["30.0\n"]}]},{"cell_type":"markdown","source":["The ***ConfigProto*** protocol buffer exposes various configuration options for a session. For example, to create a session that uses soft constraints for device placement, and log the resulting placement decisions, create a session as follows:"],"metadata":{"id":"3d0DxFNo91u5"}},{"cell_type":"code","source":["# Launch the graph in a session that allows soft device placement and logs the placement decisions.\n","sess = tf.compat.v1.Session(config=tf.compat.v1.ConfigProto(allow_soft_placement=True,log_device_placement=True))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cSJIkVQC9qxp","executionInfo":{"status":"ok","timestamp":1653998124486,"user_tz":-330,"elapsed":6,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"5d50cd9e-0303-46c5-e3a9-ed29ac7dea2d"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Device mapping: no known devices.\n"]}]},{"cell_type":"markdown","source":["##**2-close()**\n","\n","A session may own resources, such as tf.Variable, tf.queue.QueueBase, and tf.compat.v1.ReaderBase. It is important to release these resources when they are no longer required. To do this, either invoke the tf.Session.close method on the session, or use the session as a context manager."],"metadata":{"id":"ojy14mUR-iZG"}},{"cell_type":"code","source":["# Using the `close()` method.\n","sess.close()"],"metadata":{"id":"rvMH7qnA-Hjv","executionInfo":{"status":"ok","timestamp":1653998299946,"user_tz":-330,"elapsed":8,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}}},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":["##**3-as_default()**\n","\n","Returns a context manager that makes this object the default session."],"metadata":{"id":"3yPQcRz0-2ZI"}},{"cell_type":"code","source":["as_default()"],"metadata":{"id":"FDaHEOYz_B8J"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["Use with the with keyword to specify that calls to tf.Operation.run or tf.Tensor.eval should be executed in this session."],"metadata":{"id":"yJyVfPej_K47"}},{"cell_type":"code","source":["c = tf.constant(c)\n","sess = tf.compat.v1.Session()\n","\n","with sess.as_default():\n","  assert tf.compat.v1.get_default_session() is sess\n","  print(c.eval())"],"metadata":{"id":"bXJyhqGQ_Wtf"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##**4-list_devices()**\n","\n","Lists available devices in this session."],"metadata":{"id":"MEenS0kA_pKr"}},{"cell_type":"code","source":["devices = sess.list_devices()\n","for d in devices:\n","  print(d.name)"],"metadata":{"id":"BAAy442D_3zE"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["***Each element in the list has the following properties***\n","â€‹\n","* name: A string with the full name of the device. ex: /job:worker/replica:0/task:3/device:CPU:0\n","* device_type: The type of the device (e.g. CPU, GPU, TPU.)\n","* memory_limit: The maximum amount of memory available on the device."],"metadata":{"id":"14kqoTYqAOyr"}},{"cell_type":"markdown","source":["##**5-make_callable()**\n","\n","Returns a Python callable that runs a particular step.\n","\n","The returned callable will take len(feed_list) arguments whose types must be compatible feed values for the respective elements of feed_list. For example, if element i of feed_list is a tf.Tensor, the ith argument to the returned callable must be a numpy ndarray (or something convertible to an ndarray) with matching element type and shape. See tf.Session.run for details of the allowable feed key and value types.\n","\n","The returned callable will have the same return type as tf.Session.run(fetches, ...). For example, if fetches is a tf.Tensor, the callable will return a numpy ndarray; if fetches is a tf.Operation, it will return None."],"metadata":{"id":"4-2y1Qb3AcuZ"}},{"cell_type":"markdown","source":["##**6-partial_run()**\n","\n","To use partial execution, a user first calls partial_run_setup() and then a sequence of partial_run(). partial_run_setup specifies the list of feeds and fetches that will be used in the subsequent partial_run calls."],"metadata":{"id":"kXpIAoqfCBB2"}},{"cell_type":"code","source":["a = array_ops.placeholder(dtypes.float32, shape=[])\n","b = array_ops.placeholder(dtypes.float32, shape=[])\n","c = array_ops.placeholder(dtypes.float32, shape=[])\n","\n","r1 = math_ops.add(a, b)\n","r2 = math_ops.multiply(r1, c)\n","\n","h = sess.partial_run_setup([r1, r2], [a, b, c])\n","res = sess.partial_run(h, r1, feed_dict={a: 1, b: 2})\n","res = sess.partial_run(h, r2, feed_dict={c: res})"],"metadata":{"id":"0rAJQcmICpKB"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#**Arithmatic Operations**"],"metadata":{"id":"UtEVvTfVFjg1"}},{"cell_type":"code","source":["import tensorflow as tf\n","tf.compat.v1.disable_eager_execution() # need to disable eager in TF2.x\n","\n","# Basic constant operations\n","a = tf.constant(2)\n","b = tf.constant(3)\n","\n","# Launch the default graph.\n","with tf.compat.v1.Session() as sess:\n","    \n","    print(\"Addition =\",sess.run(a+b))\n","    print(\"Multiplication =\",sess.run(a*b))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"c6VbEVc2Fx9u","executionInfo":{"status":"ok","timestamp":1654000780656,"user_tz":-330,"elapsed":419,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"a92c6d50-7fc7-4eac-cbb2-a9425a182506"},"execution_count":17,"outputs":[{"output_type":"stream","name":"stdout","text":["Addition = 5\n","Multiplication = 6\n"]}]},{"cell_type":"code","source":["# Basic Operations with variable as graph input\n","a = tf.compat.v1.placeholder(tf.int16)\n","b = tf.compat.v1.placeholder(tf.int16)\n","\n","# Define some operations\n","add = tf.add(a, b)\n","mul = tf.multiply(a, b)\n","\n","# Launch the default graph.\n","with tf.compat.v1.Session() as sess:\n","    # Run every operation with variable input\n","    print(\"Addition =\", sess.run(add, feed_dict={a: 2, b: 3}))\n","    print(\"Multiplication =\", sess.run(mul, feed_dict={a: 2, b: 3}))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sLdkrWcrHaOH","executionInfo":{"status":"ok","timestamp":1654001236699,"user_tz":-330,"elapsed":380,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"0fae8024-d009-4bb2-d7cb-22a5b7e2b1f7"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["Addition = 5\n","Multiplication = 6\n"]}]},{"cell_type":"code","source":["# Matrix Multiplication\n","matrix1 = tf.constant([[3., 3.]])\n","matrix2 = tf.constant([[2.],[2.]])\n","\n","# Create a Matmul op that takes 'matrix1' and 'matrix2' as inputs.\n","# The returned value, 'product', represents the result of the matrix multiplication.\n","product = tf.matmul(matrix1, matrix2)\n","\n","# To run the matmul op we call the session 'run()' method, passing 'product' which represents the output of the matmul op.\n","with tf.compat.v1.Session() as sess:\n","    result = sess.run(product)\n","    print (result)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sKyhSP4EIgzA","executionInfo":{"status":"ok","timestamp":1654001635737,"user_tz":-330,"elapsed":384,"user":{"displayName":"P Kumar","userId":"08759630486056956439"}},"outputId":"501d0fd4-fc7e-4e89-b934-a7b90b2a78f9"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["[[12.]]\n"]}]}]}