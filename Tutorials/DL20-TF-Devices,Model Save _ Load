{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"DL20-TF-Devices,Model Save & Load","provenance":[],"authorship_tag":"ABX9TyOr3ktj0RHWjBINkhhzn0wp"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#**TF-on-Various Devices**\n","\n","[TF-on-Various Devices](https://youtu.be/Lx7OCFXPG8o)\n","\n","**TensorFlow**\n","\n","TensorFlow serves as the core platform and library for machine learning. TensorFlowâ€™s APIs use Keras to allow users to make their own machine learning models. In addition to building and training their model, TensorFlow can also help load the data to train the model, and deploy it using TensorFlow Serving.\n","\n","TensorFlow provides a stable Python API, as well as APIs without backwards compatibility guarantee for Javascript, C++, and Java. Third-party language binding packages are also available for C#, Haskell, Julia, MATLAB, R, Scala, Rust, OCaml, and Crystal. Bindings that are now archived and unsupported include Go and Swift.\n","\n","**TensorFlow.js**\n","\n","TensorFlow also has a library for machine learning in JavaScript. Using the provided JavaScript APIs, TensorFlow.js allows users to use either Tensorflow.js models or converted models from TensorFlow or TFLite, retrain the given models, and run on the web.\n","\n","**TFLite**\n","\n","TensorFlow Lite has APIs for mobile apps or embedded devices to generate and deploy TensorFlow models. These models are compressed and optimized in order to be more efficient and have a higher performance on smaller capacity devices.\n","\n","TensorFlow Lite uses FlatBuffers as the data serialization format for network models, eschewing the Protocol Buffers format used by standard TensorFlow models.\n","\n","**TFX**\n","\n","TensorFlow Extended (abbrev. TFX) provides numerous components to perform all the operations needed for end-to-end production. Components include loading, validating, and transforming data, tuning, training, and evaluating the machine learning model, and pushing the model itself into production."],"metadata":{"id":"tphzdxaz0D4u"}},{"cell_type":"markdown","source":["#**Save**\n","\n","Now that we've trained the model, we can save it as an HDF5 file, which is the format used by Keras. Our HDF5 file will have the extension '.h5', and it's name will correpond to the current time stamp."],"metadata":{"id":"L2hNQUZC3KwE"}},{"cell_type":"code","source":["t = time.time()\n","\n","export_path_keras = \"./{}.h5\".format(int(t))\n","print(export_path_keras)\n","\n","model.save(export_path_keras)"],"metadata":{"id":"POopUguU3Wjg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!ls"],"metadata":{"id":"Lmb4YQkU3miT"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["You can later recreate the same model from this file, even if you no longer have access to the code that created the model.\n","\n","This file includes:\n","\n","- The model's architecture\n","- The model's weight values (which were learned during training)\n","- The model's training config (what you passed to `compile`), if any\n","- The optimizer and its state, if any (this enables you to restart training where you left off)"],"metadata":{"id":"-TK6AJP97v8D"}},{"cell_type":"markdown","source":["#**Load**\n","\n","We will now load the model we just saved into a new model called `reloaded`. We will need to provide the file path and the `custom_objects` parameter. This parameter tells keras how to load the `hub.KerasLayer` from the `feature_extractor` we used for transfer learning."],"metadata":{"id":"mQFeFINq8tXa"}},{"cell_type":"code","source":["reloaded = tf.keras.models.load_model(\n","  export_path_keras, \n","  # `custom_objects` tells keras how to load a `hub.KerasLayer`\n","  custom_objects={'KerasLayer': hub.KerasLayer})\n","\n","reloaded.summary()"],"metadata":{"id":"VSoEm35U818_"},"execution_count":null,"outputs":[]}]}